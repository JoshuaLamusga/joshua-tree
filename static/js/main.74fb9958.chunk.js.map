{"version":3,"sources":["parse-story/storyInterpreter.tsx","common/random.ts","parse-expressions/Associativity.ts","parse-expressions/Placements.ts","parse-expressions/TokenOp.ts","parse-expressions/TokenSym.ts","parse-expressions/Parser.ts","common/settings/settings.actions.ts","common/settings/settings.reducers.ts","common/storage/persistence.ts","common/storage/persistence.actions.ts","common/storage/persistence.reducers.ts","gui/menu/MenuBarDropdown.tsx","gui/menu/MenuBar.tsx","common/commands/commands.ts","gui/editor/EditorView.tsx","parse-story/storyParseNode.ts","parse-story/storyParser.ts","gui/runner/RunnerView.tsx","gui/runner-editor/RunnerEditorView.tsx","store.ts","index.tsx","common/commands/shortcutManager.ts","parse-expressions/TokenBool.ts","common/themes.ts","common/identifiers.ts","parse-expressions/TokenId.ts","parse-expressions/TokenFunc.ts","common/redux/reduxTools.ts","parse-expressions/utils.ts","common/redux/viewedit.actions.ts","common/redux/viewedit.reducers.ts","common/localization/LocalizedStrings.ts","parse-expressions/TokenNum.ts","common/localization/Localization.ts","common/styles/controlStyles.ts"],"names":["uniqueKeyCounter","Number","MIN_SAFE_INTEGER","whitespaceRegex","colorRegex","singleDigitRegex","escapeBraceRegex","escapeNoBraceRegex","exprParser","Parser","StoryInterpreterC","props","actions","content","entries","errorMessage","fork","log","options","stopEvaluation","textboxHidden","timers","variables","variablesPrev","defaultDarkThemeStyle","styleInput","runnerDefaultInputStyle","themes","dark","theme","styleOptions","runnerDefaultOptionsStyle","styleOptionsHighlight","runnerDefaultOptionsHighlightStyle","styleOutput","runnerDefaultOutputStyle","styleRunner","runnerDefaultWrapperStyle","defaultLightThemeStyle","light","defaultCustomization","discreteInlineLinks","preserveOldOutput","random","Random","restartOptionDisabled","restartOptionText","showErrors","customization","getRestartLink","addOption","restartGame","idRunnerOptionRestart","onTextboxKeyPress","ev","charCode","forEach","action","currentTarget","value","refreshInterpreter","entriesKeys","Object","keys","setFork","text","style","this","styles","idRunnerInputElement","forkNameOrAction","key","themeStyle","linkAction","push","addInput","onClick","root","display","height","rootFocused","rootHovered","idRunnerOptionElement","idRunnerOutputElement","tree","updateLog","ref","clearTimeout","undefined","variablesKeys","i","length","preorderProcess","visitFork","refreshInterpreterGui","setErrorMessage","lines","split","line","words","input","j","trim","startsWith","color","test","substring","backgroundColor","numberRegex","number","parseFloat","fontSize","fontFamily","fallbackFontStack","error","runner","document","getElementById","idRunnerWrapper","refreshInterpreterGuiStyles","dispatchRerenderStory","themeStyles","localizedName","restartOption","allOutput","id","idRunnerLog","idRunnerContent","idRunnerOptions","messageBarType","MessageBarType","textbox","autoComplete","name","idRunnerInputfield","onKeyPress","runnerInputTextboxStyle","type","className","runnerWrapperStyle","runnerOutputWrapperStyle","forkToLoad","includes","forkName","loadFork","matchBraces","replace","str","node","textboxText","processIf","processText","children","condition","isNaN","isFinite","global","setTimeout","query","escapeText","toLowerCase","queryWords","containsWord","RegExp","endsWith","matches","optIncludeUnknowns","resetTokens","varValue","addIdentifier","TokenId","varName","varVal","addFunction","TokenFunc","tokens","TokenBool","result","eval","join","e","Error","message","textLeft","endOfLine","indexOf","displayName","indexOfAt","lbPos","rbPos","output","fontStyle","fontWeight","addOutput","TokenNum","n0","nextNumber","exprTwoSidedIndex","lhs","slice","rhs","resultVal","getTokens","some","o","strForm","lhsBool","tok","toString","React","StoryInterpreter","connect","state","renderTrigger","viewEdit","storyRerenderToken","settings","dispatch","forwardRef","seed","mt","Array","N","mti","Date","getTime","init_genrand","s","s2","y","mag01","MATRIX_A","kk","M","UPPER_MASK","LOWER_MASK","range","_nextInt32","associativity","placements","TokenOp","opPlacement","precedence","format","operation","placement","assoc","prec","numArgs","function","both","obj","TokenSym","optRequireRightPars","optUnknownDefault","Fsin","operands","Math","sin","Fcos","cos","Ftan","tan","Frnd","round","Frnd2","n1","Add","left","Sub","Mlt","Div","Mod","Neg","right","Exp","pow","Fac","givenVal","Eq","NotEq","Gt","Gte","Lt","Lte","LogNot","LogAnd","LogOr","varFalse","varTrue","varPi","PI","lPar","rPar","argSep","evalNoPar","subExpression","func","operators","filter","subExpressionStr","args","argVals","subResult","immediateResult","opTokens","maxPrecedence","isRightAssociative","opToken","splice","maxPrecedence2","token","sort","a","b","expression","evalTokens","tokenize","tokensList","tokId","functions","rbrPos","subExpressionEnd","lbrPos","lastIndexOf","subExpressionBegin","expressionLHS","expressionRHS","subExpressionFunc","tokFunc","find","f","equals","list","delimiter","lists","currentList","longestMatch","shortestMatch","candidateBeforeDefer","val","combinedTokens","unknownTokenName","setLocale","getActionGuid","setTheme","localeId","dispatchSetTheme","supportedTheme","body","semanticColors","bodyBackground","dispatchSetLocale","combineReducers","locale","getSupportedLocale","loadTheme","persistStateIdentifier","saveToLocalStorage","persistence","userConsentProvided","themeName","newState","saveFormatVersion","localStorage","setItem","JSON","stringify","loadFromLocalStorage","loadedState","getItem","returnedState","parse","setCustomizationApplied","setUserConsentProvided","dispatchSetUserConsentProvided","isConsentGiven","consentProvided","customizationApplied","isApplied","CommandBarDropdownC","dropdown","stylesTyped","Dropdown","commandBarDropdownStyle","CommandBarDropdown","commandIds","hiddenInputRef","MenuBarC","applyLocalStorage","localizedStrings","getLocaleDropdownOptionKey","renderLocaleDropdown","localeOption","data","LanguageCodeName","defaultSelectedKey","onRenderTitle","Icon","iconName","iconSpaceBeforeTextStyle","wholeTheme","fonts","large","onChange","event","option","then","reduxState","getThemeDropdownOptionKey","renderThemeDropdown","themeKey","strings","ThemeDropdownText","_","commandBarDropdownSeparatorStyle","items","commandBarItemStyle","mainMenuFileNew","MenuFileNew","iconProps","invokeCommand","mainMenuFileOpen","MenuFileOpen","mainMenuFileSave","MenuFileSave","farItems","ariaLabel","TipTheme","onRender","buttonStyles","commandBarDropdownButtonStyle","TipLanguage","handleFile","chosenFiles","target","files","fileReader","FileReader","onloadend","setStory","readAsText","hiddenAndInaccessible","CommandBar","TipNavigateCommandBar","commandBarStyle","MenuBar","getStrings","getTheme","setConsent","dispatchSetStory","actionMainMenuFileOpen","current","click","invokeOpenCommand","actionMainMenuFileSave","alert","commands","functionsToInvoke","guid","shortcuts","originalSequence","usesShift","Id","enableWhileTyping","activeElement","nodeName","getAttribute","disabled","EditorViewC","runStory","currentStory","idEditorInputfield","saveAndRunStory","updateStory","story","prevProps","setAttribute","editorTextAreaStyle","onBlur","flexDirection","PrimaryButton","EditorView","dispatchSaveAndRunStory","StoryParseNode","parent","doubleSlashRegex","ifRegex","endIfRegex","isOption","index","startOfLine","isOutput","beforeSubstring","bracketOpenPos","RunnerViewC","interpreterRef","interpreter","parsed","entryPositions","newlineSplitStory","setEntries","header","processHeaderOptions","entryName","entryList","entry","isFinished","match","exec","pos","depth","ifMatches","endIfMatches","ifs","endifs","allMatches","item1","item2","elemBegin","elemType","cond","prevIfBegin","prevIfCond","k","prevEndIfBegin","prevEndIfCond","prevElemBegin","prevElemCond","textNode","prevElemEnd","newChild","lastElemBegin","lastCondLength","setEntriesWithFork","parseStory","storyToParse","ex","console","RunnerView","RunnerEditorViewC","margin","mainViewWrapperStyle","idEditorWrapper","mainViewEditorStyle","mainViewRunnerStyle","RunnerEditorView","rootReducer","store","createStore","applyMiddleware","thunk","initializeIcons","commandKeys","commandsWithMatchProgress","map","shortcut","step","window","addEventListener","commandProgress","progress","sequence","customSequence","toUpperCase","Boolean","usesAlt","altKey","usesCtrl","ctrlKey","shiftKey","listenForShortcuts","routing","path","component","ReactDOM","render","basename","ThemeDark","palette","black","neutralDark","neutralLight","neutralLighter","neutralLighterAlt","neutralPrimary","neutralPrimaryAlt","neutralQuaternary","neutralQuaternaryAlt","neutralSecondary","neutralTertiary","neutralTertiaryAlt","themeDark","themeDarkAlt","themeDarker","themeLight","themeLighter","themeLighterAlt","themePrimary","themeSecondary","themeTertiary","white","ThemeLight","numberOfArgs","uniqueActionType","rerenderStory","ApplicationName","ApplicationNameAndVersion","appName","appVersion","MenuFile","defaultLocale","navigator","languages","langParts","language","region","supportedLocales","alignSelf","borderColor","bodyText","borderRightStyle","borderWidth","propStyles","caretDownWrapper","mergeStyles","position","width","dropdownItem","dropdownItemSelected","title","border","borderRadius","alignItems","itemsOnRight","paddingLeft","paddingRight","padding","primarySet","secondarySet","bodyStandoutBackground","borderStyle","resize","marginRight","overflowY","flexShrink","flexGrow","warningText","primaryButtonText","primaryButtonTextHovered"],"mappings":"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","file":"static/js/main.74fb9958.chunk.js","sourcesContent":["import * as React from \"react\";\nimport { StoryParseNode } from \"./storyParseNode\";\nimport { Random } from \"../common/random\";\nimport { IPageDictionary } from \"./storyParser\";\nimport {\n  idRunnerContent,\n  idRunnerInputfield,\n  idRunnerLog,\n  idRunnerOptions,\n  idRunnerOptionRestart,\n  idRunnerWrapper,\n  idRunnerInputElement,\n  idRunnerOutputElement,\n  idRunnerOptionElement,\n} from \"../common/identifiers\";\nimport { IRootState } from \"../store\";\nimport { connect } from \"react-redux\";\nimport { dispatchRerenderStory } from \"../common/redux/viewedit.reducers\";\nimport { Dispatch } from \"redux\";\nimport {\n  runnerInputTextboxStyle,\n  runnerWrapperStyle,\n  runnerOutputWrapperStyle,\n  runnerDefaultInputStyle,\n  runnerDefaultOptionsStyle,\n  runnerDefaultOptionsHighlightStyle,\n  runnerDefaultOutputStyle,\n  runnerDefaultWrapperStyle,\n  fallbackFontStack,\n} from \"../common/styles/controlStyles\";\nimport { themes } from \"../common/themes\";\nimport { ActionButton } from \"office-ui-fabric-react/lib/components/Button/ActionButton/ActionButton\";\nimport { MessageBarType } from \"office-ui-fabric-react/lib/components/MessageBar/MessageBar.types\";\nimport { MessageBar } from \"office-ui-fabric-react/lib/components/MessageBar/MessageBar\";\nimport { numberRegex } from \"../parse-expressions/utils\";\nimport { Parser } from \"../parse-expressions/Parser\";\nimport { TokenBool } from \"../parse-expressions/TokenBool\";\nimport { TokenFunc } from \"../parse-expressions/TokenFunc\";\nimport { TokenId } from \"../parse-expressions/TokenId\";\nimport { TokenNum } from \"../parse-expressions/TokenNum\";\n\n// TODO: localize strings in this file.\n\nlet uniqueKeyCounter = Number.MIN_SAFE_INTEGER;\n\nconst whitespaceRegex = /\\s+/gm;\nconst colorRegex = /^[0-9|a-f]+$/g;\nconst singleDigitRegex = /[0-9]/g;\nconst escapeBraceRegex = /\\\\at|\\\\lb|\\\\rb|\\\\n|\\\\s/g;\nconst escapeNoBraceRegex = /\\\\at|\\\\n|\\\\s/g;\n\n/** An expression parser used by the interpreter to resolve expressions for variable assignments. */\nconst exprParser = new Parser();\n\n/** The interface for the variable dictionary. */\ninterface IVariables {\n  [key: string]: number | boolean | string;\n}\n\ninterface IInterpreterStyleCustomization {\n  styleInput: { [key: string]: string | number };\n  styleOptions: React.CSSProperties;\n  styleOptionsHighlight: React.CSSProperties;\n  styleOutput: React.CSSProperties;\n  styleRunner: React.CSSProperties;\n}\n\ninterface IInterpreterDefaultCustomization {\n  discreteInlineLinks: boolean;\n  preserveOldOutput: boolean;\n  random: Random;\n  restartOptionDisabled: boolean;\n  restartOptionText: string;\n  showErrors: boolean;\n}\n\ninterface IInterpreterDynamicCustomization {\n  discreteInlineLinks: boolean;\n  preserveOldOutput: boolean;\n  random: Random;\n  restartOptionDisabled: boolean;\n  restartOptionText: string;\n  showErrors: boolean;\n  styles: IInterpreterStyleCustomization;\n}\n\nconst mapStateToProps = (state: IRootState) => {\n  return {\n    renderTrigger: state.viewEdit.storyRerenderToken, // Needed to re-render at will.\n    theme: state.settings.theme,\n  };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch) => {\n  return {\n    dispatchRerenderStory: dispatchRerenderStory(dispatch),\n  };\n};\n\ntype StoryInterpreterOwnProps = {\n  showErrors?: boolean;\n  random?: Random;\n};\n\ntype CombinedProps = StoryInterpreterOwnProps &\n  ReturnType<typeof mapStateToProps> &\n  ReturnType<typeof mapDispatchToProps>;\n\nexport class StoryInterpreterC extends React.Component<StoryInterpreterOwnProps> {\n  /** Tracks actions so they can be removed when navigating other forks/files. */\n  private actions: ((text: string) => void)[] = [];\n\n  /** The content of the current page. */\n  private content: JSX.Element[] = [];\n\n  /** Stores all tree entries. */\n  private entries: IPageDictionary = {};\n\n  /** An optional error message that displays in a top banner when non-empty. */\n  private errorMessage = \"\";\n\n  /** Stores the current page by name. */\n  private fork = \"\";\n\n  /** Keeps a list of all previous content, if not disabled. */\n  private log: JSX.Element[] = [];\n\n  /** Hyperlink options to the next page. */\n  private options: JSX.Element[] = [];\n\n  /** Used to stop evaluation of the current fork entirely. */\n  private stopEvaluation = false;\n\n  /** Whether to display a textbox or not. It's displayed automatically when the user can enter text. */\n  private textboxHidden = true;\n\n  /** Tracked so they can be stopped when navigating other forks/files. */\n  private timers: NodeJS.Timeout[] = [];\n\n  /** Defines a place for generated variables to be stored and accessed. */\n  private variables: IVariables = {};\n\n  /** Stores a copy of all variables as they were just before visiting a new page. This is used when saving. */\n  private variablesPrev: IVariables = {};\n\n  private defaultDarkThemeStyle: IInterpreterStyleCustomization = {\n    styleInput: runnerDefaultInputStyle(themes.dark.theme),\n    styleOptions: runnerDefaultOptionsStyle(themes.dark.theme),\n    styleOptionsHighlight: runnerDefaultOptionsHighlightStyle(themes.dark.theme),\n    styleOutput: runnerDefaultOutputStyle(themes.dark.theme),\n    styleRunner: runnerDefaultWrapperStyle(themes.dark.theme),\n  };\n\n  private defaultLightThemeStyle: IInterpreterStyleCustomization = {\n    styleInput: runnerDefaultInputStyle(themes.light.theme),\n    styleOptions: runnerDefaultOptionsStyle(themes.light.theme),\n    styleOptionsHighlight: runnerDefaultOptionsHighlightStyle(themes.light.theme),\n    styleOutput: runnerDefaultOutputStyle(themes.light.theme),\n    styleRunner: runnerDefaultWrapperStyle(themes.light.theme),\n  };\n\n  private defaultCustomization: IInterpreterDefaultCustomization = {\n    discreteInlineLinks: false,\n    preserveOldOutput: true,\n    random: new Random(null),\n    restartOptionDisabled: false,\n    restartOptionText: \"restart\",\n    showErrors: true,\n  };\n\n  /**\n   * The current options and styles associated with the engine. Exposed to read and change styles.\n   * Note that changes will not trigger a re-render.\n   */\n  public customization: IInterpreterDynamicCustomization = {} as IInterpreterDynamicCustomization;\n\n  /** The restart link for when a page is empty or the link is forcibly shown. */\n  private getRestartLink = () =>\n    this.addOption(this.customization.restartOptionText, this.restartGame, idRunnerOptionRestart);\n\n  constructor(props: CombinedProps) {\n    super(props);\n\n    this.refreshInterpreter();\n\n    if (this.props.showErrors) {\n      this.customization.showErrors = this.props.showErrors;\n    }\n\n    if (this.props.random) {\n      this.customization.random = this.props.random;\n    }\n  }\n\n  /** Creates and returns a text element styled to represent the player's input. */\n  public addInput(text: string) {\n    return (\n      <p key={`${idRunnerInputElement}-${uniqueKeyCounter++}`} style={this.customization.styles.styleInput}>\n        {text}\n      </p>\n    );\n  }\n\n  /**\n   * Creates and returns a hyperlink styled as an option. For forkNameOrAction, if a string is\n   * provided, it indicates the fork to go to. Passing a function can execute custom code instead.\n   */\n  public addOption(text: string, forkNameOrAction: string | (() => void), key?: string) {\n    const themeStyle = this.customization.styles;\n    const linkAction =\n      typeof forkNameOrAction === \"function\"\n        ? forkNameOrAction\n        : () => {\n            if (this.customization.preserveOldOutput) {\n              this.content.push(this.addInput(text));\n            }\n\n            this.setFork(forkNameOrAction);\n          };\n\n    return (\n      <ActionButton\n        key={key ? key : `${idRunnerOptionElement}-${uniqueKeyCounter++}`}\n        onClick={linkAction}\n        styles={{\n          root: {\n            ...(themeStyle.styleOptions as object),\n            display: \"block\",\n            height: \"32px\",\n          },\n          rootFocused: { ...(themeStyle.styleOptionsHighlight as object) },\n          rootHovered: { ...(themeStyle.styleOptionsHighlight as object) },\n        }}\n        text={text}\n      />\n    );\n  }\n\n  /** Creates and returns a text element styled as output text. */\n  public addOutput(text: string) {\n    return (\n      <p key={`${idRunnerOutputElement}-${uniqueKeyCounter++}`} style={this.customization.styles.styleOutput}>\n        {text}\n      </p>\n    );\n  }\n\n  /** Loads the current progress from local storage if possible. */\n  public loadFile() {\n    // TODO: implement.\n  }\n\n  /** Loads an entry and pushes changes to the page, catching and displaying errors on the screen. */\n  public loadFork() {\n    this.updateLog();\n    this.content = [];\n    this.options = [];\n    this.textboxHidden = true;\n\n    // Clears all timers.\n    this.timers.forEach((ref: NodeJS.Timeout) => {\n      clearTimeout(ref);\n    });\n\n    this.timers = [];\n    this.actions = [];\n\n    // Sets up variables.\n    let tree: StoryParseNode | undefined;\n\n    // Gets the nodes to process, if possible.\n    tree = this.entries[this.fork];\n    if (tree === undefined) {\n      this.setErrorMessage(\"Interpreter: fork '\" + this.fork + \"' not found.\");\n      return;\n    }\n\n    // Records the previous state of all variables.\n    this.variablesPrev = {};\n    const variablesKeys = Object.keys(this.variables);\n\n    for (let i = 0; i < variablesKeys.length; i++) {\n      this.variablesPrev[variablesKeys[i]] = this.variables[variablesKeys[i]];\n    }\n\n    // Evaluates every node.\n    this.preorderProcess(tree, \"\");\n\n    // Exits if fork execution stops.\n    if (this.stopEvaluation) {\n      return;\n    }\n\n    // Ensures the fork is considered visited.\n    this.visitFork();\n    this.refreshInterpreterGui();\n  }\n\n  /** Parses a special set of options at the top of the file. */\n  public processHeaderOptions(text: string) {\n    // Clears all old preferences.\n    this.refreshInterpreter();\n\n    let lines = text.split(\"\\n\");\n\n    for (let i = 0; i < lines.length; i++) {\n      // Gets the line and words on that line.\n      let line = lines[i];\n      let words = line.split(\" \");\n\n      // Gets all text after the option has been named.\n      let input = \"\";\n\n      for (let j = 1; j < words.length; j++) {\n        input += words[j] + \" \";\n      }\n\n      input = input.trim();\n\n      if (line.startsWith(\"link-style-text\")) {\n        this.customization.discreteInlineLinks = true;\n      } else if (line.startsWith(\"option-default-text\")) {\n        this.customization.restartOptionText = input;\n      } else if (line.startsWith(\"option-default-disable\")) {\n        this.customization.restartOptionDisabled = true;\n      } else if (\n        line.startsWith(\"option-color\") ||\n        line.startsWith(\"option-hover-color\") ||\n        line.startsWith(\"background-color\")\n      ) {\n        // Stores the color to be created.\n        let color = \"\";\n        if (!colorRegex.test(input)) {\n          this.setErrorMessage(\n            \"Interpreter: In the line '\" +\n              line +\n              \"', color must be given in hex format. It can only include numbers 1-9 and upper or lowercase a-f.\"\n          );\n        } else if (input.length !== 6 && input.length !== 3) {\n          this.setErrorMessage(\n            \"Interpreter: In the line '\" +\n              line +\n              \"', color must be given in hex format using 3 or 6 digits. For example, f00 or 8800f0.\"\n          );\n        } else if (input.length === 3 || input.length === 6) {\n          color = input.substring(0, input.length);\n        }\n\n        if (line.startsWith(\"option-color\")) {\n          this.customization.styles.styleOptions.color = color;\n        } else if (line.startsWith(\"option-hover-color\")) {\n          this.customization.styles.styleOptionsHighlight.color = color;\n        } else if (line.startsWith(\"background-color\")) {\n          this.customization.styles.styleRunner.backgroundColor = color;\n        }\n      } else if (line.startsWith(\"output-font-size\") || line.startsWith(\"option-font-size\")) {\n        if (!numberRegex.test(input)) {\n          this.setErrorMessage(\"Interpreter: In line '\" + line + \"', a number must be specified after the option.\");\n          continue;\n        }\n\n        let number = parseFloat(input);\n\n        if (number <= 0) {\n          this.setErrorMessage(\"Interpreter: In line '\" + line + \"', numbers must be greater than zero.\");\n          continue;\n        }\n\n        if (line.startsWith(\"output-font-size\")) {\n          this.customization.styles.styleOutput.fontSize = number;\n        } else if (line.startsWith(\"option-font-size\")) {\n          this.customization.styles.styleOutput.fontSize = number;\n        }\n      } else if (line.startsWith(\"option-font\")) {\n        this.customization.styles.styleOptions.fontFamily = input + \"; \" + fallbackFontStack;\n      } else if (line.startsWith(\"output-font\")) {\n        this.customization.styles.styleOutput.fontFamily = input + \"; \" + fallbackFontStack;\n      }\n    }\n  }\n\n  /** Sets or clears an error message. */\n  public setErrorMessage(error: string | undefined) {\n    this.errorMessage = error ?? \"\";\n    this.refreshInterpreterGui();\n  }\n\n  /** Re-renders the interpreter and applies the chosen background color. */\n  public refreshInterpreterGui() {\n    const runner = document.getElementById(idRunnerWrapper);\n\n    if (runner && this.customization.styles.styleRunner.backgroundColor) {\n      runner.style[\"backgroundColor\"] = this.customization.styles.styleRunner.backgroundColor;\n    }\n\n    this.refreshInterpreterGuiStyles();\n    (this.props as CombinedProps).dispatchRerenderStory();\n  }\n\n  private refreshInterpreterGuiStyles() {\n    const themeStyles =\n      (this.props as CombinedProps).theme.localizedName === themes.light.localizedName\n        ? this.defaultLightThemeStyle\n        : this.defaultDarkThemeStyle;\n\n    this.customization.styles = {\n      styleInput: { ...themeStyles.styleInput },\n      styleOptions: { ...themeStyles.styleOptions },\n      styleOptionsHighlight: { ...themeStyles.styleOptionsHighlight },\n      styleOutput: { ...themeStyles.styleOutput },\n      styleRunner: { ...themeStyles.styleRunner },\n    };\n  }\n\n  /** Renders output. Conditionally renders logs, error message, and textbox. */\n  public render(): React.ReactNode {\n    const restartOption =\n      this.options.length === 0 && !this.customization.restartOptionDisabled ? this.getRestartLink() : undefined;\n\n    const allOutput = [\n      <div key={idRunnerLog} id={idRunnerLog}>\n        {this.log}\n      </div>,\n      <div key={idRunnerContent} id={idRunnerContent}>\n        {this.content}\n      </div>,\n      <div key={idRunnerOptions} id={idRunnerOptions}>\n        {this.options}\n        {restartOption}\n      </div>,\n    ];\n\n    const errorMessage =\n      this.customization.showErrors && this.errorMessage !== \"\" ? (\n        <MessageBar messageBarType={MessageBarType.error}>{this.errorMessage}</MessageBar>\n      ) : undefined;\n\n    const textbox = !this.textboxHidden ? (\n      <input\n        autoComplete=\"nah\" // Required for browsers to not autocomplete with address.\n        name=\"textfield\" // Required for browsers to not autocomplete with prior entries.\n        id={idRunnerInputfield}\n        key={idRunnerInputfield}\n        onKeyPress={this.onTextboxKeyPress}\n        style={runnerInputTextboxStyle((this.props as CombinedProps).theme.theme)}\n        type=\"text\"\n      />\n    ) : undefined;\n\n    return (\n      <div className={runnerWrapperStyle}>\n        <div className={runnerOutputWrapperStyle}>{allOutput}</div>\n        {errorMessage}\n        {textbox}\n      </div>\n    );\n  }\n\n  /** Saves the current progress to local storage if possible. */\n  public saveFile() {\n    // TODO: implement.\n  }\n\n  /** For internal use. Sets the entries usually given by the parser. */\n  public setEntries(entries: IPageDictionary) {\n    this.entries = entries;\n  }\n\n  /** For internal use. Sets the entries usually given by the parser. If forkToLoad is an empty string, loads the first fork. */\n  public setEntriesWithFork(entries: IPageDictionary, forkToLoad: string) {\n    this.content = [];\n    this.log = [];\n    this.options = [];\n    this.entries = entries;\n    this.errorMessage = \"\";\n\n    const entriesKeys = Object.keys(this.entries);\n\n    if (entriesKeys.length === 0) {\n      this.setErrorMessage(\n        \"Interpreter: cannot play story. It contains no forks. Use @ at the beginning of a line to denote an fork.\"\n      );\n    } else {\n      if (forkToLoad !== \"\" && entriesKeys.includes(forkToLoad)) {\n        this.setFork(forkToLoad);\n      } else {\n        this.setFork(entriesKeys[0]);\n      }\n    }\n  }\n\n  /** For internal use. Sets the fork usually given by parsed entries. */\n  public setFork(forkName: string) {\n    this.fork = forkName;\n    this.stopEvaluation = false;\n\n    this.loadFork();\n  }\n\n  /** Escapes the given text for all supported escape sequences. */\n  private escapeText(text: string, matchBraces: boolean) {\n    if (matchBraces) {\n      return text.replace(escapeBraceRegex, (str: string) => {\n        switch (str) {\n          case \"\\\\at\":\n            return \"@\";\n          case \"\\\\n\":\n            return \"\\n\";\n          case \"\\\\s\":\n            return \"\\\\\";\n          case \"\\\\lb\":\n            return \"{\";\n          case \"\\\\rb\":\n            return \"}\";\n        }\n\n        return str;\n      });\n    }\n\n    return text.replace(escapeNoBraceRegex, (str: string) => {\n      switch (str) {\n        case \"\\\\at\":\n          return \"@\";\n        case \"\\\\n\":\n          return \"\\n\";\n        case \"\\\\s\":\n          return \"\\\\\";\n      }\n\n      return str;\n    });\n  }\n\n  /** Handles submission of text in the textbox. */\n  private onTextboxKeyPress = (ev: React.KeyboardEvent<HTMLInputElement>) => {\n    if (ev.charCode === 13) {\n      this.actions.forEach((action) => {\n        action(ev.currentTarget.value);\n      });\n\n      ev.currentTarget.value = \"\";\n    }\n  };\n\n  /**\n   * Crawls the given node structure in a depth-first search. If text is provided, it's used\n   * solely to evaluate 'if text is' and 'if text has' syntax. Otherwise, those nodes are set to be\n   * parsed the next time input is submitted through the textbox.\n   */\n  private preorderProcess(node: StoryParseNode, textboxText: string) {\n    // If the node's conditions are met, processes it and children.\n    if (this.processIf(node, textboxText)) {\n      this.processText(node);\n\n      for (let i = 0; i < node.children.length; i++) {\n        if (this.stopEvaluation) {\n          return;\n        }\n\n        this.preorderProcess(node.children[i], textboxText);\n      }\n    }\n  }\n\n  /**\n   * Interprets the contents of a node is its condition is met. If text is provided, it's used\n   * solely to evaluate 'if text is' and 'if text has' syntax. Otherwise, those nodes are set to be\n   * parsed the next time input is submitted through the textbox.\n   */\n  private processIf(node: StoryParseNode, textboxText: string): boolean {\n    // If there are no conditions, consider it met.\n    if (node.condition.trim() === \"\") {\n      return true;\n    }\n\n    // Gets the condition without the word 'if'.\n    const condition = node.condition.substring(2).trim();\n    const words = condition.split(\" \");\n\n    // There should be at least one word after 'if'.\n    if (words.length === 0) {\n      this.setErrorMessage(\"The line if '\" + condition + \"' is incorrectly formatted.\");\n      return false; // Skips ifs with invalid syntax.\n    }\n\n    //#region Timers. Syntax: if timer is num\n    if (words.length > 1 && words[0] === \"timer\" && words[1] === \"is\") {\n      if (words.length < 2) {\n        this.setErrorMessage(\"The timer must be set with a time specified in seconds.\");\n        return false;\n      }\n\n      // The third word must be a number.\n      if (!numberRegex.test(words[2])) {\n        this.setErrorMessage(\"Interpreter: In line '\" + condition + \"', the third word must be numeric.\");\n        return false;\n      }\n\n      const number = parseFloat(words[2]);\n\n      if (isNaN(number) || !isFinite(number)) {\n        this.setErrorMessage(\"Interpreter: In line '\" + condition + \"', the time must be numeric and not too large.\");\n        return false;\n      }\n\n      // The number must be positive.\n      if (number <= 0) {\n        this.setErrorMessage(\"Interpreter: In line '\" + condition + \"', the time must be positive and non-zero.\");\n        return false;\n      }\n\n      // Creates a timer to delay the evaluation of everything in the current if-statement.\n      const ref = global.setTimeout(() => {\n        this.processText(node);\n\n        for (let i = 0; i < node.children.length; i++) {\n          this.preorderProcess(node.children[i], textboxText);\n        }\n      }, number * 1000);\n\n      this.timers.push(ref);\n\n      return false; // Delays execution of child nodes.\n    }\n    //#endregion\n\n    //#region Textbox. Syntax: if text (!)is/has/pick query\n    // Handles syntax: if text is query, if text has query, if text !is query, if text !has query, if text pick query\n    else if (\n      words.length > 1 &&\n      words[0] === \"text\" &&\n      (words[1] === \"is\" || words[1] === \"!is\" || words[1] === \"has\" || words[1] === \"!has\" || words[1] === \"pick\")\n    ) {\n      // Automatically shows the textbox.\n      this.textboxHidden = false;\n\n      let query = \"\"; // Contains all additional words.\n\n      // Concatenates all words after the command syntax.\n      for (let i = 2; i < words.length; i++) {\n        query += words[i] + \" \";\n      }\n\n      query = this.escapeText(query.toLowerCase().trim(), true);\n\n      if (query === \"\") {\n        this.setErrorMessage(\n          \"Interpreter: In the line 'if \" +\n            condition +\n            \"', at least one word to look for must be specified after 'pick'.\"\n        );\n      }\n\n      // The generated option adds to the submission event based on whether it's checking if the\n      // textbox input is/has the query.\n      if (words[1] === \"pick\") {\n        // Splits the query on commas if checking for containing.\n        const queryWords = query.split(\",\");\n\n        // Escapes commas as \\c\n        for (let i = 0; i < queryWords.length; i++) {\n          queryWords[i] = queryWords[i].replace(\"\\\\c\", \",\").trim();\n        }\n\n        if (textboxText === \"\") {\n          this.actions.push((text: string) => {\n            text = text.toLowerCase().trim();\n            let containsWord = false;\n\n            // Ensures the text contains at least one word.\n            for (let i = 0; i < queryWords.length; i++) {\n              const matchWordRegex = new RegExp(\"\\\\b\" + queryWords[i] + \"\\\\b\");\n              if (matchWordRegex.test(text)) {\n                containsWord = true;\n              }\n            }\n\n            if (!containsWord) {\n              return;\n            }\n\n            // If still executing, conditions are met.\n            if (this.customization.preserveOldOutput) {\n              this.content.push(this.addInput(text));\n            }\n\n            this.processText(node);\n\n            for (let i = 0; i < node.children.length; i++) {\n              this.preorderProcess(node.children[i], text);\n            }\n\n            this.refreshInterpreterGui();\n          });\n        } else {\n          textboxText = textboxText.toLowerCase().trim();\n          let containsWord = false;\n\n          // Ensures the text contains at least one word.\n          for (let i = 0; i < queryWords.length; i++) {\n            const matchWordRegex = new RegExp(\"\\\\b\" + queryWords[i] + \"\\\\b\");\n\n            if (matchWordRegex.test(textboxText)) {\n              containsWord = true;\n            }\n          }\n\n          if (!containsWord) {\n            return false;\n          }\n\n          // If still executing, conditions are met.\n          this.processText(node);\n\n          for (let i = 0; i < node.children.length; i++) {\n            this.preorderProcess(node.children[i], textboxText);\n          }\n        }\n      } else if (words[1].endsWith(\"is\")) {\n        if (textboxText === \"\") {\n          this.actions.push((text: string) => {\n            text = text.toLowerCase().trim();\n\n            if ((words[1] === \"is\" && text === query) || (words[1] === \"!is\" && text !== query)) {\n              if (this.customization.preserveOldOutput) {\n                this.content.push(this.addInput(text));\n              }\n\n              this.processText(node);\n\n              for (let i = 0; i < node.children.length; i++) {\n                this.preorderProcess(node.children[i], text);\n              }\n            }\n\n            this.refreshInterpreterGui();\n          });\n        } else {\n          if ((words[1] === \"is\" && textboxText === query) || (words[1] === \"!is\" && textboxText !== query)) {\n            this.processText(node);\n\n            for (let i = 0; i < node.children.length; i++) {\n              this.preorderProcess(node.children[i], textboxText);\n            }\n          }\n        }\n      } else if (words[1].endsWith(\"has\")) {\n        // Splits the query on commas if checking for containing.\n        const queryWords = query.split(\",\");\n\n        // Escapes commas as \\c.\n        for (let i = 0; i < queryWords.length; i++) {\n          queryWords[i] = queryWords[i].replace(\"\\\\c\", \",\").trim();\n        }\n\n        if (textboxText === \"\") {\n          this.actions.push((text: string) => {\n            text = text.toLowerCase().trim();\n\n            // Ensures the text contains each word.\n            for (let i = 0; i < queryWords.length; i++) {\n              const matchWordRegex = new RegExp(\"\\\\b\" + queryWords[i] + \"\\\\b\");\n              const matches = matchWordRegex.test(text);\n\n              if ((words[1] === \"has\" && !matches) || (words[1] === \"!has\" && matches)) {\n                return;\n              }\n            }\n\n            // If still executing, conditions are met.\n            if (this.customization.preserveOldOutput) {\n              this.content.push(this.addInput(text));\n            }\n\n            this.processText(node);\n\n            for (let i = 0; i < node.children.length; i++) {\n              this.preorderProcess(node.children[i], text);\n            }\n\n            this.refreshInterpreterGui();\n          });\n        } else {\n          // Ensures the text contains each word.\n          for (let i = 0; i < queryWords.length; i++) {\n            const matchWordRegex = new RegExp(\"\\\\b\" + queryWords[i] + \"\\\\b\");\n            const matches = matchWordRegex.test(textboxText);\n\n            if ((words[1] === \"has\" && !matches) || (words[1] === \"!has\" && matches)) {\n              return false;\n            }\n          }\n\n          // If still executing, conditions are met.\n          this.processText(node);\n\n          for (let i = 0; i < node.children.length; i++) {\n            this.preorderProcess(node.children[i], textboxText);\n          }\n        }\n      }\n\n      return false; // Execution of child nodes is conditional.\n    }\n    //#endregion\n\n    //#region Truth tests. Syntax: if expr; expr must be true or false.\n    else {\n      // Unregisters previously-set variables and confirms options.\n      exprParser.optIncludeUnknowns = true;\n      exprParser.resetTokens();\n\n      const variablesKeys = Object.keys(this.variables);\n\n      // Supports syntax: if visited, if !visited\n      const varValue = this.variables[\"visited\" + this.fork] as number;\n      exprParser.addIdentifier(new TokenId(\"visited\", varValue));\n\n      // Registers all valid variables with the math parser.\n      for (let i = 0; i < variablesKeys.length; i++) {\n        const varName = variablesKeys[i];\n        const varVal = this.variables[variablesKeys[i]];\n\n        exprParser.addIdentifier(new TokenId(varName, varVal));\n      }\n\n      // Registers a function to check if a variable exists.\n      exprParser.addFunction(\n        new TokenFunc(\"exists\", 1, (tokens) => {\n          if (tokens[0] instanceof TokenBool) {\n            return tokens[0];\n          }\n\n          return new TokenBool(!(tokens[0] instanceof TokenId));\n        })\n      );\n\n      let result = \"\";\n      let resultVal = null;\n\n      // Attempts to compute the expression.\n      try {\n        result = exprParser.eval(words.join(\" \"));\n      } catch (e) {\n        if (e instanceof Error) {\n          this.setErrorMessage(e.message);\n        } else {\n          this.setErrorMessage(e);\n        }\n\n        return false;\n      }\n\n      // Parses the computed result as a bool.\n      if (result === \"true\" || result === \"false\") {\n        return result === \"true\";\n      } else {\n        this.setErrorMessage(\n          \"Interpreter: In the line 'if \" +\n            words.join(\" \") +\n            \"', the expression must be boolean (true or false), but was \" +\n            resultVal +\n            \" instead.\"\n        );\n\n        return false;\n      }\n    }\n  }\n\n  /** Interprets the node text to display output and evaluate commands. */\n  private processText(node: StoryParseNode) {\n    let textLeft = node.text;\n\n    // Processes all text until none is left.\n    while (textLeft.length > 0) {\n      // Gets the current line and its words.\n      let endOfLine = textLeft.indexOf(\"\\n\");\n      let line: string;\n\n      if (endOfLine >= 0) {\n        line = textLeft.substring(0, endOfLine);\n      } else {\n        line = textLeft;\n      }\n\n      let words = line.split(\" \");\n\n      //#region Handles empty lines if they appear.\n      // Removes excess lines.\n      if (line.trim() === \"\") {\n        // Deletes pointless whitespace.\n        textLeft = textLeft.substring(endOfLine + 1);\n      }\n      //#endregion\n\n      //#region Parse in-line options. Syntax: output@@forkname.\n      else if (line.includes(\"@@\")) {\n        let forkName = line\n          .substring(line.indexOf(\"@\") + 2)\n          .replace(whitespaceRegex, \"\")\n          .toLowerCase();\n\n        let displayName = this.escapeText(line.substring(0, line.indexOf(\"@\")).trim(), false);\n\n        // Handles having no hyperlink or display name.\n        if (forkName === \"\") {\n          this.setErrorMessage(\"Interpreter: there was no fork name given to option '\" + displayName + \"'.\");\n        } else if (displayName.trim() === \"\") {\n          this.setErrorMessage(\n            \"Interpreter: the option linking to '\" + forkName + \"' has no displayable text specified.\"\n          );\n        } else if (this.entries[forkName] === undefined) {\n          this.setErrorMessage(\n            \"Interpreter: the fork in the option '\" + displayName + \"@\" + forkName + \"' doesn't exist.\"\n          );\n        } else {\n          this.options.push(this.addOption(displayName, forkName));\n        }\n\n        // Deletes the line just processed.\n        textLeft = textLeft.substring(textLeft.indexOf(\"\\n\") + 1);\n      }\n      //#endregion\n\n      //#region Parse options. Syntax: output@forkname.\n      else if (line.includes(\"@\")) {\n        // Gets the fork name. Case and space insensitive.\n        const indexOfAt = line.indexOf(\"@\");\n        const forkName = line\n          .substring(indexOfAt + 1)\n          .replace(whitespaceRegex, \"\")\n          .toLowerCase();\n        const displayName = this.escapeText(line.substring(0, indexOfAt).trim(), false);\n\n        // Handles having no hyperlink or display name.\n        if (forkName === \"\") {\n          this.setErrorMessage(\"Interpreter: there was no fork name given to option '\" + displayName + \"'.\");\n        } else if (displayName.trim() === \"\") {\n          this.setErrorMessage(\n            \"Interpreter: the option linking to '\" + forkName + \"' has no displayable text specified.\"\n          );\n        } else {\n          this.options.push(this.addOption(displayName, forkName));\n        }\n\n        // Deletes the line just processed.\n        textLeft = textLeft.substring(textLeft.indexOf(\"\\n\") + 1);\n      }\n      //#endregion\n\n      //#region Print text. Syntax: {output text}.\n      // Parses output text and escape characters.\n      else if (line.includes(\"{\")) {\n        let lbPos = textLeft.indexOf(\"{\");\n        let rbPos = textLeft.indexOf(\"}\");\n        let output = textLeft.substring(lbPos, rbPos + 1);\n\n        if (rbPos < lbPos) {\n          this.setErrorMessage(\"Interpreter: In the line '\" + line + \"', right braces should follow left braces. \");\n\n          // Skips the unprocessable line.\n          textLeft = textLeft.substring(textLeft.indexOf(\"\\n\") + 1);\n\n          continue;\n        }\n\n        const fontStyle = this.customization.styles.styleOutput.fontStyle;\n        const fontWeight = this.customization.styles.styleOutput.fontWeight;\n\n        if (output.includes(\"***}\")) {\n          this.customization.styles.styleOutput.fontStyle = \"italic\";\n          this.customization.styles.styleOutput.fontWeight = 600;\n        } else if (output.includes(\"**}\")) {\n          this.customization.styles.styleOutput.fontWeight = 600;\n        } else if (output.includes(\"*}\")) {\n          this.customization.styles.styleOutput.fontStyle = \"italic\";\n        }\n\n        // create output\n        output = this.escapeText(\n          output.replace(\"{\", \"\").replace(\"***}\", \"\").replace(\"**}\", \"\").replace(\"*}\", \"\").replace(\"}\", \"\"),\n          true\n        );\n\n        // Generates the text\n        this.content.push(this.addOutput(output));\n\n        this.customization.styles.styleOutput.fontStyle = fontStyle;\n        this.customization.styles.styleOutput.fontWeight = fontWeight;\n\n        // Removes the processed text.\n        textLeft = textLeft.substring(0, lbPos) + textLeft.substring(rbPos + 1, textLeft.length);\n      }\n      //#endregion\n\n      //#region Set variables.\n      else if (textLeft.startsWith(\"set\")) {\n        // Unregisters previously-set variables.\n        exprParser.optIncludeUnknowns = false;\n        exprParser.resetTokens();\n\n        // Registers all valid variables with the math parser.\n        const variablesKeys = Object.keys(this.variables);\n        for (let i = 0; i < variablesKeys.length; i++) {\n          const varName = variablesKeys[i];\n          const varVal = this.variables[variablesKeys[i]];\n\n          if (typeof varVal === \"number\") {\n            exprParser.addIdentifier(new TokenId(varName, varVal));\n          } else if (typeof varVal === \"boolean\") {\n            exprParser.addIdentifier(new TokenId(varName, varVal));\n          }\n        }\n\n        // Registers a function to set a random number.\n        exprParser.addFunction(\n          new TokenFunc(\"random\", 1, (tokens) => {\n            if (tokens[0] instanceof TokenNum) {\n              const n0 = tokens[0] as TokenNum;\n\n              return new TokenNum(this.customization.random.nextNumber() * n0.value + 1);\n            }\n\n            return null;\n          })\n        );\n\n        // Gets the index to separate left and right-hand sides.\n        let exprTwoSidedIndex = words.indexOf(\"=\");\n\n        // Handles expressions with both LHS and RHS.\n        if (exprTwoSidedIndex !== -1) {\n          let lhs = words.slice(1, exprTwoSidedIndex);\n          let rhs = words.slice(exprTwoSidedIndex + 1);\n          let result = \"\";\n          let resultVal = null;\n\n          // If the left-hand side is a single word.\n          if (lhs.length === 1) {\n            // Attempts to compute the RHS expression.\n            try {\n              result = exprParser.eval(rhs.join(\" \"));\n            } catch (e) {\n              if (e instanceof Error) {\n                this.setErrorMessage(\"Interpreter: In the line '\" + line + \"', \" + e.message);\n              } else {\n                this.setErrorMessage(\"Interpreter: In the line '\" + line + \", \" + e);\n              }\n            }\n\n            // Parses the computed result as a bool.\n            if (result === \"true\" || result === \"false\") {\n              resultVal = result === \"true\";\n            }\n\n            // Parses the computed result as a number.\n            else {\n              if (numberRegex.test(result)) {\n                resultVal = parseFloat(result);\n              } else {\n                this.setErrorMessage(\n                  \"Interpreter: In the line '\" +\n                    line +\n                    \"', the expression \" +\n                    rhs.join(\" \") +\n                    \" should be a number, but \" +\n                    result +\n                    \" was computed instead.\"\n                );\n              }\n            }\n\n            // Sets or adds the new value as appropriate.\n            if (variablesKeys.includes(lhs[0])) {\n              this.variables[lhs[0]] = resultVal as number | boolean;\n            } else {\n              if (singleDigitRegex.test(lhs[0][0]) || exprParser.getTokens().some((o) => o.strForm === lhs[0])) {\n                this.setErrorMessage(\n                  \"Interpreter: In the line '\" +\n                    line +\n                    \"', the variable '\" +\n                    lhs[0] +\n                    \"' is a name used for math or is a number.\"\n                );\n              } else {\n                this.variables[lhs[0]] = resultVal as number | boolean;\n              }\n            }\n          } else {\n            this.setErrorMessage(\n              \"Interpreter: In the line '\" +\n                line +\n                \", the phrase \" +\n                lhs.join(\" \") +\n                \" must be a variable name without spaces.\"\n            );\n          }\n        }\n\n        // Handles shorthand expressions with only the LHS.\n        else {\n          let lhs = words.slice(1);\n          let result = \"\";\n          let resultVal = null;\n\n          if (lhs.length > 0) {\n            // Syntax: set name, set !name\n            if (lhs.length === 1) {\n              // Sets false boolean values.\n              if (lhs[0].startsWith(\"!\")) {\n                let lhsBool = lhs[0].substring(1);\n\n                if (variablesKeys.includes(lhsBool)) {\n                  this.variables[lhsBool] = false;\n                } else if (\n                  (lhs.length > 0 && singleDigitRegex.test(lhs[0][0])) ||\n                  exprParser.getTokens().some((tok) => tok.strForm === lhsBool)\n                ) {\n                  this.setErrorMessage(\n                    \"Interpreter: In the line '\" +\n                      line +\n                      \"', the variable '\" +\n                      lhsBool +\n                      \"' is a number or is used for math.\"\n                  );\n                } else {\n                  this.variables[lhsBool] = false;\n                }\n              }\n\n              // Sets true boolean values.\n              else {\n                if (variablesKeys.includes(lhs[0])) {\n                  this.variables[lhs[0]] = true;\n                } else if (\n                  (lhs.length > 0 && singleDigitRegex.test(lhs[0][0])) ||\n                  exprParser.getTokens().some((tok) => tok.strForm === lhs[0])\n                ) {\n                  this.setErrorMessage(\n                    \"Interpreter: In the line '\" +\n                      line +\n                      \"', the variable '\" +\n                      lhs[0] +\n                      \"' is a number or is used for math.\"\n                  );\n                } else {\n                  this.variables[lhs[0]] = true;\n                }\n              }\n            }\n\n            // Syntax: set EXPR, where EXPR is a math expression and not equation.\n            // This is computed as set name = EXPR.\n            else if (variablesKeys.includes(lhs[0])) {\n              // Attempts to compute the LHS expression.\n              try {\n                result = exprParser.eval(lhs.join(\" \"));\n              } catch (e) {\n                if (e instanceof Error) {\n                  this.setErrorMessage(\"Interpreter: In the line '\" + line + \"', \" + e.message);\n                } else {\n                  this.setErrorMessage(\"Interpreter: In the line '\" + line + \"', \" + e);\n                }\n              }\n\n              // Parses the computed result as a bool.\n              if (result === \"true\" || result === \"false\") {\n                resultVal = result === \"true\";\n              }\n\n              // Parses the computed result as a number.\n              else {\n                if (numberRegex.test(result)) {\n                  resultVal = parseFloat(result);\n                } else {\n                  this.setErrorMessage(\n                    \"Interpreter: In the line '\" +\n                      line +\n                      \"', the expression \" +\n                      lhs.join(\" \") +\n                      \" should be a number, but \" +\n                      result +\n                      \" was computed instead.\"\n                  );\n                }\n              }\n\n              this.variables[lhs[0]] = resultVal as number | boolean;\n            } else {\n              this.setErrorMessage(\n                \"Interpreter: In the line '\" + line + \"', the variable \" + lhs[0] + \" doesn't exist yet.\"\n              );\n            }\n          } else {\n            this.setErrorMessage(\n              \"Interpreter: In the line '\" +\n                line +\n                \"', you need to provide a variable name to set, using syntax like set a, set !a, or a mathematical expression.\"\n            );\n          }\n        }\n\n        // Deletes the line just processed.\n        if (endOfLine >= 0) {\n          textLeft = textLeft.substring(textLeft.indexOf(\"\\n\") + 1);\n        } else {\n          textLeft = \"\";\n        }\n      }\n      //#endregion\n\n      //#region Print variables. Syntax: get name.\n      // Syntax: get name.\n      else if (textLeft.startsWith(\"get\")) {\n        if (words.length === 2) {\n          if (this.variables[words[1]] !== undefined) {\n            this.content.push(this.addOutput(this.variables[words[1]].toString()));\n          } else {\n            this.setErrorMessage(\"Interpreter: In the line '\" + line + \"', variable \" + words[1] + \" does not exist.\");\n          }\n        } else {\n          this.setErrorMessage(\"Interpreter: In the line '\" + line + \"', only one word can follow 'get'.\");\n        }\n\n        // Deletes the line just processed.\n        if (endOfLine >= 0) {\n          textLeft = textLeft.substring(textLeft.indexOf(\"\\n\") + 1);\n        } else {\n          textLeft = \"\";\n        }\n      }\n      //#endregion\n\n      //#region Immediately jumps to another forks. Syntax: goto forkname.\n      // Handles syntax: goto forkname.\n      else if (textLeft.startsWith(\"goto\")) {\n        let forkName = line.substring(4).replace(whitespaceRegex, \"\").toLowerCase();\n\n        if (this.entries[forkName] !== undefined) {\n          // Ensures this page is considered visited, then executes the page being jumped to. When\n          // execution flow returns, this exits out of everything.\n          this.visitFork();\n          this.setFork(forkName);\n          this.stopEvaluation = true;\n          return;\n        } else {\n          this.setErrorMessage(\n            \"Interpreter: In the line '\" +\n              textLeft +\n              \"', cannot navigate to fork '\" +\n              forkName +\n              \"' because it does not exist.\"\n          );\n        }\n\n        // Deletes the line just processed.\n        if (endOfLine >= 0) {\n          textLeft = textLeft.substring(textLeft.indexOf(\"\\n\") + 1);\n        } else {\n          textLeft = \"\";\n        }\n      }\n      //#endregion\n\n      //#region Set text color. Syntax: color ffffff, color fff.\n      // Handles syntax: color ffffff (and other hex codes).\n      else if (textLeft.startsWith(\"color\")) {\n        let color = line.substring(5).trim().toLowerCase();\n        if (!colorRegex.test(color)) {\n          this.setErrorMessage(\n            \"Interpreter: In the line '\" +\n              line +\n              \"', color must be given in hex format. It can only include numbers 1-9 and upper or lowercase a-f.\"\n          );\n        } else if (color.length !== 6 && color.length !== 3) {\n          this.setErrorMessage(\n            \"Interpreter: In the line '\" +\n              line +\n              \"', color must be given in hex format using 3 or 6 digits. For example, f00 or 8800f0.\"\n          );\n        } else if (color.length === 3) {\n          this.customization.styles.styleOutput.color = color.substring(0, 3);\n        }\n\n        // Deletes the line just processed.\n        if (endOfLine >= 0) {\n          textLeft = textLeft.substring(textLeft.indexOf(\"\\n\") + 1);\n        } else {\n          textLeft = \"\";\n        }\n      }\n      //#endregion\n\n      // Anything left is an error.\n      else {\n        this.setErrorMessage(\n          \"Interpreter: In the line '\" +\n            line +\n            \"', unexpected symbols encountered. Ensure all output text is wrapped in single braces and there are no extra braces inside.\"\n        );\n\n        // Skips the unprocessable line.\n        textLeft = textLeft.substring(textLeft.indexOf(\"\\n\") + 1);\n      }\n    }\n  }\n\n  /** Initializes or resets the interpreter states. */\n  private refreshInterpreter() {\n    this.actions = [];\n    this.content = [];\n    this.customization = {\n      discreteInlineLinks: this.defaultCustomization.discreteInlineLinks,\n      preserveOldOutput: this.defaultCustomization.preserveOldOutput,\n      random: this.defaultCustomization.random,\n      restartOptionDisabled: this.defaultCustomization.restartOptionDisabled,\n      restartOptionText: this.defaultCustomization.restartOptionText,\n      showErrors: this.defaultCustomization.showErrors,\n      styles: this.customization.styles,\n    };\n    this.errorMessage = \"\";\n    this.fork = \"\";\n    this.log = [];\n    this.options = [];\n    this.timers = [];\n    this.variables = {};\n    this.variablesPrev = {};\n\n    this.refreshInterpreterGuiStyles();\n  }\n\n  /** Called when a restart link is pressed or restart is invoked. */\n  private restartGame = () => {\n    this.refreshInterpreter();\n\n    const entriesKeys = Object.keys(this.entries);\n    this.setFork(entriesKeys[0]);\n  };\n\n  /** Empties the log or updates it, depending on interpreter options. */\n  private updateLog() {\n    if (!this.customization.preserveOldOutput) {\n      this.log = [];\n    } else {\n      this.log.push(...this.content);\n    }\n  }\n\n  /**\n   * Called when a fork is finished executing or is stopped so another fork can run, in which this\n   * should execute immediately.\n   */\n  private visitFork() {\n    // Automatically sets variables to indicate pages were visited.\n    if (this.variables[\"visited\" + this.fork] === undefined) {\n      this.variables[\"visited\" + this.fork] = true;\n    }\n  }\n}\n\nexport const StoryInterpreter = connect(mapStateToProps, mapDispatchToProps, undefined, {\n  forwardRef: true,\n})(StoryInterpreterC);\n","/**\n * Adapted by Benyl on StackOverflow at https://stackoverflow.com/a/32537932/7197632 based on the Mersenne Twister\n * algorithm at https://gist.github.com/banksean/300494. This is used because as of October 2020, there is no ECMA\n * standardized support for seeding a random number, and it's useful for debugging.\n */\nexport class Random {\n  static N = 624;\n  static M = 397;\n  static MATRIX_A = 0x9908b0df;\n  /* constant vector a */\n  static UPPER_MASK = 0x80000000;\n  /* most significant w-r bits */\n  static LOWER_MASK = 0x7fffffff;\n  /* least significant r bits */\n\n  mt = new Array(Random.N);\n  /* the array for the state vector */\n  mti = Random.N + 1;\n  /* mti==N+1 means mt[N] is not initialized */\n\n  constructor(seed: number | null = null) {\n    if (seed == null) {\n      seed = new Date().getTime();\n    }\n\n    this.init_genrand(seed);\n  }\n\n  private init_genrand(s: number) {\n    this.mt[0] = s >>> 0;\n    for (this.mti = 1; this.mti < Random.N; this.mti++) {\n      const s2 = this.mt[this.mti - 1] ^ (this.mt[this.mti - 1] >>> 30);\n      this.mt[this.mti] = ((((s2 & 0xffff0000) >>> 16) * 1812433253) << 16) + (s2 & 0x0000ffff) * 1812433253 + this.mti;\n      /* See Knuth TAOCP Vol2. 3rd Ed. P.106 for multiplier. */\n      /* In the previous versions, MSBs of the seed affect   */\n      /* only MSBs of the array mt[].                        */\n      /* 2002/01/09 modified by Makoto Matsumoto             */\n      this.mt[this.mti] >>>= 0;\n      /* for >32 bit machines */\n    }\n  }\n\n  /**\n   * generates a random number on [0,0xffffffff]-interval\n   * @private\n   */\n  private _nextInt32(): number {\n    var y: number;\n    var mag01 = [0x0, Random.MATRIX_A];\n    /* mag01[x] = x * MATRIX_A  for x=0,1 */\n\n    if (this.mti >= Random.N) {\n      /* generate N words at one time */\n      var kk: number;\n\n      if (this.mti === Random.N + 1)\n        /* if init_genrand() has not been called, */\n        this.init_genrand(5489);\n      /* a default initial seed is used */\n\n      for (kk = 0; kk < Random.N - Random.M; kk++) {\n        y = (this.mt[kk] & Random.UPPER_MASK) | (this.mt[kk + 1] & Random.LOWER_MASK);\n        this.mt[kk] = this.mt[kk + Random.M] ^ (y >>> 1) ^ mag01[y & 0x1];\n      }\n      for (; kk < Random.N - 1; kk++) {\n        y = (this.mt[kk] & Random.UPPER_MASK) | (this.mt[kk + 1] & Random.LOWER_MASK);\n        this.mt[kk] = this.mt[kk + (Random.M - Random.N)] ^ (y >>> 1) ^ mag01[y & 0x1];\n      }\n      y = (this.mt[Random.N - 1] & Random.UPPER_MASK) | (this.mt[0] & Random.LOWER_MASK);\n      this.mt[Random.N - 1] = this.mt[Random.M - 1] ^ (y >>> 1) ^ mag01[y & 0x1];\n\n      this.mti = 0;\n    }\n\n    y = this.mt[this.mti++];\n\n    /* Tempering */\n    y ^= y >>> 11;\n    y ^= (y << 7) & 0x9d2c5680;\n    y ^= (y << 15) & 0xefc60000;\n    y ^= y >>> 18;\n\n    return y >>> 0;\n  }\n\n  /**\n   * generates an int32 pseudo random number\n   * @param range: an optional [from, to] range, if not specified the result will be in range [0,0xffffffff]\n   * @return {number}\n   */\n  nextInt32(range: [number, number] | null = null): number {\n    var result = this._nextInt32();\n    if (range == null) {\n      return result;\n    }\n\n    return (result % (range[1] - range[0])) + range[0];\n  }\n\n  /**\n   * generates a random number on [0,0x7fffffff]-interval\n   */\n  nextInt31(): number {\n    return this._nextInt32() >>> 1;\n  }\n\n  /**\n   * generates a random number on [0,1]-real-interval\n   */\n  nextNumber(): number {\n    return this._nextInt32() * (1.0 / 4294967295.0);\n  }\n\n  /**\n   * generates a random number on [0,1) with 53-bit resolution\n   */\n  nextNumber53(): number {\n    var a = this._nextInt32() >>> 5,\n      b = this._nextInt32() >>> 6;\n    return (a * 67108864.0 + b) * (1.0 / 9007199254740992.0);\n  }\n}\n","/** Represents which direction to evaluate multiple homogenous operators in. */\nexport enum associativity {\n  /** Left associative operators compute a ~ b ~ c as (a ~ b) ~ c. */\n  left,\n\n  /** Right associative operators compute a ~ b ~ c as a ~ (b ~ c). */\n  right,\n}\n","/** Determines how operands interact with an operator token. */\nexport enum placements {\n  /** For unary tokens that use the preceding number, like negation. */\n  left,\n\n  /** For unary tokens that use the following number, like factorial. */\n  right,\n\n  /** For binary tokens. */\n  both,\n}\n","import { associativity } from \"./Associativity\";\nimport { placements } from \"./Placements\";\nimport { IToken, tokenEvalFunc } from \"./utils\";\n\n/** An operator token. */\nexport class TokenOp implements IToken {\n  public strForm: string;\n  public placement: placements;\n  public assoc: associativity;\n  public prec: number;\n  public numArgs: number;\n  public function: tokenEvalFunc;\n\n  constructor(\n    opPlacement: placements,\n    associativity: associativity,\n    precedence: number,\n    format: string,\n    operation: tokenEvalFunc\n  ) {\n    this.placement = opPlacement;\n    this.assoc = associativity;\n    this.prec = precedence;\n\n    if (opPlacement === placements.both) {\n      this.numArgs = 2;\n    } else {\n      this.numArgs = 1;\n    }\n\n    this.strForm = format;\n    this.function = operation;\n  }\n\n  /** Returns true if all properties of each token are the same. */\n  public equals(obj: TokenOp) {\n    return (\n      this.strForm === obj.strForm &&\n      this.placement === obj.placement &&\n      this.assoc === obj.assoc &&\n      this.prec === obj.prec &&\n      this.numArgs === obj.numArgs &&\n      this.function === obj.function\n    );\n  }\n}\n","import { IToken } from \"./utils\";\n\n/** A symbolic token to store a general symbol. */\nexport class TokenSym implements IToken {\n  public strForm: string;\n\n  constructor(name: string) {\n    this.strForm = name;\n  }\n\n  /** Returns true if all properties of each token are the same. */\n  public equals(obj: TokenSym) {\n    return this.strForm === obj.strForm;\n  }\n}\n","// TODO: localize all errors in this file.\n\nimport { associativity } from \"./Associativity\";\nimport { placements } from \"./Placements\";\nimport { TokenBool } from \"./TokenBool\";\nimport { TokenFunc } from \"./TokenFunc\";\nimport { TokenId } from \"./TokenId\";\nimport { TokenNum } from \"./TokenNum\";\nimport { TokenOp } from \"./TokenOp\";\nimport { TokenSym } from \"./TokenSym\";\nimport { IToken, numberRegex } from \"./utils\";\n\n/** Tokenizes mathematical expressions to evaluate or symbolically manipulate them. */\nexport class Parser {\n  /** If true, parentheses groups must always be balanced. False by default. */\n  public optRequireRightPars = false;\n\n  /** If true, tokens that aren't recognized will be added as unknown variables. True by default. */\n  public optIncludeUnknowns = true;\n\n  /**\n   * Null identifiers will be replaced with this token for evaluation, if specified. Else, an error\n   * will be thrown. Null by default.\n   */\n  public optUnknownDefault: IToken | null = null;\n\n  /** The sine function for radians. */\n  public Fsin = new TokenFunc(\"sin\", 1, (operands: IToken[]) => {\n    if (operands[0] instanceof TokenNum) {\n      const n0 = operands[0] as TokenNum;\n\n      return new TokenNum(Math.sin(n0.value));\n    }\n\n    return null;\n  });\n\n  /** The cosine function for radians. */\n  public Fcos = new TokenFunc(\"cos\", 1, (operands: IToken[]) => {\n    if (operands[0] instanceof TokenNum) {\n      const n0 = operands[0] as TokenNum;\n\n      return new TokenNum(Math.cos(n0.value));\n    }\n\n    return null;\n  });\n\n  /** The tangent function for radians. */\n  public Ftan = new TokenFunc(\"tan\", 1, (operands: IToken[]) => {\n    if (operands[0] instanceof TokenNum) {\n      const n0 = operands[0] as TokenNum;\n\n      return new TokenNum(Math.tan(n0.value));\n    }\n\n    return null;\n  });\n\n  /** Rounds a single number to the nearest integer. */\n  public Frnd = new TokenFunc(\"round\", 1, (operands: IToken[]) => {\n    if (operands[0] instanceof TokenNum) {\n      const n0 = operands[0] as TokenNum;\n\n      return new TokenNum(Math.round(n0.value));\n    }\n\n    return null;\n  });\n\n  /** Rounds a number to the nearest multiple of another. */\n  public Frnd2 = new TokenFunc(\"round\", 2, (operands: IToken[]) => {\n    if (operands[0] instanceof TokenNum && operands[1] instanceof TokenNum) {\n      const n0 = operands[0] as TokenNum;\n      const n1 = operands[1] as TokenNum;\n\n      return new TokenNum(Math.round(n0.value / n1.value) * n1.value);\n    }\n\n    return null;\n  });\n\n  /** The addition operator. */\n  public Add = new TokenOp(placements.both, associativity.left, 6, \"+\", (operands: IToken[]) => {\n    if (operands[0] instanceof TokenNum && operands[1] instanceof TokenNum) {\n      const n0 = operands[0] as TokenNum;\n      const n1 = operands[1] as TokenNum;\n\n      return new TokenNum(n0.value + n1.value);\n    }\n\n    return null;\n  });\n\n  /** The subtraction operator. */\n  public Sub = new TokenOp(placements.both, associativity.left, 6, \"-\", (operands: IToken[]) => {\n    if (operands[0] instanceof TokenNum && operands[1] instanceof TokenNum) {\n      const n0 = operands[0] as TokenNum;\n      const n1 = operands[1] as TokenNum;\n\n      return new TokenNum(n0.value - n1.value);\n    }\n\n    return null;\n  });\n\n  /** The multiplication operator. */\n  public Mlt = new TokenOp(placements.both, associativity.left, 7, \"*\", (operands: IToken[]) => {\n    if (operands[0] instanceof TokenNum && operands[1] instanceof TokenNum) {\n      const n0 = operands[0] as TokenNum;\n      const n1 = operands[1] as TokenNum;\n\n      return new TokenNum(n0.value * n1.value);\n    }\n\n    return null;\n  });\n\n  /** The division operator. */\n  public Div = new TokenOp(placements.both, associativity.left, 7, \"/\", (operands: IToken[]) => {\n    if (operands[0] instanceof TokenNum && operands[1] instanceof TokenNum) {\n      const n0 = operands[0] as TokenNum;\n      const n1 = operands[1] as TokenNum;\n\n      if (n1.value === 0) {\n        throw new Error(`Parser: The expression ${n0.strForm} / ${n1.strForm} causes division by zero.`);\n      }\n\n      return new TokenNum(n0.value / n1.value);\n    }\n\n    return null;\n  });\n\n  /** The modulus operator. */\n  public Mod = new TokenOp(placements.both, associativity.left, 7, \"%\", (operands: IToken[]) => {\n    if (operands[0] instanceof TokenNum && operands[1] instanceof TokenNum) {\n      const n0 = operands[0] as TokenNum;\n      const n1 = operands[1] as TokenNum;\n\n      if (n1.value === 0) {\n        throw new Error(`Parser: The expression ${n0.strForm} % ${n1.strForm} causes division by zero.`);\n      }\n\n      return new TokenNum(n0.value % n1.value);\n    }\n\n    return null;\n  });\n\n  /** The negation operator. */\n  public Neg = new TokenOp(placements.right, associativity.right, 8, \"-\", (operands: IToken[]) => {\n    if (operands[1] instanceof TokenNum) {\n      const n1 = operands[1] as TokenNum;\n      return new TokenNum(-n1.value);\n    }\n\n    return null;\n  });\n\n  /** The exponentiation operator. */\n  public Exp = new TokenOp(placements.both, associativity.right, 8, \"^\", (operands: IToken[]) => {\n    if (operands[0] instanceof TokenNum && operands[1] instanceof TokenNum) {\n      const n0 = operands[0] as TokenNum;\n      const n1 = operands[1] as TokenNum;\n\n      return new TokenNum(Math.pow(n0.value, n1.value));\n    }\n\n    return null;\n  });\n\n  /** The factorial operator. */\n  public Fac = new TokenOp(placements.left, associativity.left, 9, \"!\", (operands: IToken[]) => {\n    if (operands[0] instanceof TokenNum) {\n      const n0 = operands[0] as TokenNum;\n      let givenVal = n0.value;\n      let value = 1;\n\n      while (n0.value > 1) {\n        value *= givenVal--;\n      }\n\n      return new TokenNum(value);\n    }\n\n    return null;\n  });\n\n  /** The equality operator. */\n  public Eq = new TokenOp(placements.both, associativity.left, 4, \"=\", (operands: IToken[]) => {\n    if (operands[0] instanceof TokenNum && operands[1] instanceof TokenNum) {\n      const n0 = operands[0] as TokenNum;\n      const n1 = operands[1] as TokenNum;\n\n      return new TokenBool(n0.value === n1.value);\n    }\n\n    if (operands[0] instanceof TokenBool && operands[1] instanceof TokenBool) {\n      const n0 = operands[0] as TokenBool;\n      const n1 = operands[1] as TokenBool;\n\n      return new TokenBool(n0.value === n1.value);\n    }\n\n    return null;\n  });\n\n  /** The inequality operator. */\n  public NotEq = new TokenOp(placements.both, associativity.left, 4, \"!=\", (operands: IToken[]) => {\n    if (operands[0] instanceof TokenNum && operands[1] instanceof TokenNum) {\n      const n0 = operands[0] as TokenNum;\n      const n1 = operands[1] as TokenNum;\n\n      return new TokenBool(n0.value !== n1.value);\n    }\n\n    if (operands[0] instanceof TokenBool && operands[1] instanceof TokenBool) {\n      const n0 = operands[0] as TokenBool;\n      const n1 = operands[1] as TokenBool;\n\n      return new TokenBool(n0.value !== n1.value);\n    }\n\n    return null;\n  });\n\n  /** The greater-than operator. */\n  public Gt = new TokenOp(placements.both, associativity.left, 5, \">\", (operands: IToken[]) => {\n    if (operands[0] instanceof TokenNum && operands[1] instanceof TokenNum) {\n      const n0 = operands[0] as TokenNum;\n      const n1 = operands[1] as TokenNum;\n\n      return new TokenBool(n0.value > n1.value);\n    }\n\n    return null;\n  });\n\n  /** The greater-than-or-equal operator. */\n  public Gte = new TokenOp(placements.both, associativity.left, 5, \">=\", (operands: IToken[]) => {\n    if (operands[0] instanceof TokenNum && operands[1] instanceof TokenNum) {\n      const n0 = operands[0] as TokenNum;\n      const n1 = operands[1] as TokenNum;\n\n      return new TokenBool(n0.value >= n1.value);\n    }\n\n    return null;\n  });\n\n  /** The less-than operator. */\n  public Lt = new TokenOp(placements.both, associativity.left, 5, \"<\", (operands: IToken[]) => {\n    if (operands[0] instanceof TokenNum && operands[1] instanceof TokenNum) {\n      const n0 = operands[0] as TokenNum;\n      const n1 = operands[1] as TokenNum;\n\n      return new TokenBool(n0.value < n1.value);\n    }\n\n    return null;\n  });\n\n  /** The less-than-or-equal operator. */\n  public Lte = new TokenOp(placements.both, associativity.left, 5, \"<=\", (operands: IToken[]) => {\n    if (operands[0] instanceof TokenNum && operands[1] instanceof TokenNum) {\n      const n0 = operands[0] as TokenNum;\n      const n1 = operands[1] as TokenNum;\n\n      return new TokenBool(n0.value <= n1.value);\n    }\n\n    return null;\n  });\n\n  /** The logical not operator. */\n  public LogNot = new TokenOp(placements.right, associativity.left, 3, \"!\", (operands: IToken[]) => {\n    if (operands[1] instanceof TokenBool) {\n      const n1 = operands[1] as TokenBool;\n\n      return new TokenBool(!n1.value);\n    }\n\n    return null;\n  });\n\n  /** The logical and operator. */\n  public LogAnd = new TokenOp(placements.both, associativity.left, 1, \"&\", (operands: IToken[]) => {\n    if (operands[0] instanceof TokenBool && operands[1] instanceof TokenBool) {\n      const n0 = operands[0] as TokenBool;\n      const n1 = operands[1] as TokenBool;\n\n      return new TokenBool(n0.value && n1.value);\n    }\n\n    return null;\n  });\n\n  /** The logical or operator. */\n  public LogOr = new TokenOp(placements.both, associativity.left, 2, \"|\", (operands: IToken[]) => {\n    if (operands[0] instanceof TokenBool && operands[1] instanceof TokenBool) {\n      const n0 = operands[0] as TokenBool;\n      const n1 = operands[1] as TokenBool;\n\n      return new TokenBool(n0.value || n1.value);\n    }\n\n    return null;\n  });\n\n  /** Represents the literal boolean value of false. */\n  public varFalse = new TokenId(\"false\", false);\n\n  /** Represents the literal boolean value of true. */\n  public varTrue = new TokenId(\"true\", true);\n\n  /** The mathematical constant, Pi. */\n  public varPi = new TokenId(\"pi\", Math.PI);\n\n  /** Represents a left parenthesis. */\n  public lPar = new TokenSym(\"(\");\n\n  /** Represents a right parenthesis. */\n  public rPar = new TokenSym(\")\");\n\n  /** Represents a function argument separator. */\n  public argSep = new TokenSym(\",\");\n\n  // prettier-ignore\n  /** A list of all tokens to parse with. */\n  public tokens: IToken[] = [];\n\n  constructor() {\n    this.resetTokens();\n  }\n\n  /** Adds a string-lowercased copy of the function. */\n  public addFunction(token: TokenFunc) {\n    this.tokens.push(new TokenFunc(token.strForm.toLowerCase(), token.numArgs, token.function));\n    this.tokens = this.tokens.sort((a, b) => (a.strForm < b.strForm ? 1 : -1));\n  }\n\n  /** Adds a string-lowercased copy of the identifier. */\n  public addIdentifier(token: TokenId) {\n    this.tokens.push(new TokenId(token.strForm.toLowerCase(), token.value));\n    this.tokens = this.tokens.sort((a, b) => (a.strForm < b.strForm ? 1 : -1));\n  }\n\n  /** Adds a string-lowercased copy of the operator. */\n  public addOperator(token: TokenOp) {\n    this.tokens.push(\n      new TokenOp(token.placement, token.assoc, token.prec, token.strForm.toLowerCase(), token.function)\n    );\n\n    // Sorts tokens in reverse lexicographic order to support deferring.\n    this.tokens = this.tokens.sort((a, b) => (a.strForm < b.strForm ? 1 : -1));\n  }\n\n  /** Parses an expression with operators, functions, and identifiers. */\n  public eval(expression: string) {\n    return this.evalTokens(this.tokenize(expression));\n  }\n\n  /** Parses a pre-tokenized expression. Invalid tokenization may result in unanticipated errors. */\n  public evalTokens(tokensList: IToken[]) {\n    // Substitutes values for identifiers.\n    for (let i = 0; i < tokensList.length; i++) {\n      if (tokensList[i] instanceof TokenId) {\n        const tokId = tokensList[i] as TokenId;\n\n        // Inserts any known values for a token.\n        if (tokId.value !== null) {\n          if (typeof tokId.value === \"number\") {\n            tokensList[i] = new TokenNum(tokId.value);\n          } else if (typeof tokId.value === \"boolean\") {\n            tokensList[i] = new TokenBool(tokId.value);\n          }\n        }\n\n        // Replaces unknown identifiers with a value or fails.\n        else if (this.optUnknownDefault !== null) {\n          tokensList[i] = this.optUnknownDefault;\n        } else {\n          throw new Error(\"Parser: The identifier '\" + tokensList[i].strForm + \"' is unknown and can't be computed.\");\n        }\n      }\n    }\n\n    const functions = this.tokens.filter((token) => token instanceof TokenFunc) as TokenFunc[];\n\n    // Solves each parenthesis group from deepest depth outward.\n    while (true) {\n      // Finds the end of the nearest complete sub-expression.\n      let rbrPos = tokensList.indexOf(this.rPar) + 1;\n      let subExpressionEnd = rbrPos >= 1 ? rbrPos : tokensList.length;\n\n      // Finds the start of the nearest complete sub-expression.\n      let lbrPos = tokensList.slice(0, subExpressionEnd).lastIndexOf(this.lPar);\n      let subExpressionBegin = lbrPos >= 0 ? lbrPos : 0;\n\n      // Isolates the sub-expression.\n      let expressionLHS = tokensList.slice(0, subExpressionBegin);\n      let expressionRHS = tokensList.slice(subExpressionEnd, tokensList.length);\n      let subExpression = tokensList.slice(subExpressionBegin, subExpressionEnd);\n\n      // Includes functions and picks a proper overload.\n      let subExpressionFunc: TokenFunc | null = null;\n\n      if (expressionLHS[expressionLHS.length - 1] instanceof TokenFunc) {\n        const tokFunc = expressionLHS[expressionLHS.length - 1] as TokenFunc;\n        expressionLHS.splice(expressionLHS.length - 1, 1);\n\n        let numArgs = 1;\n\n        subExpression.forEach((tok) => {\n          if (tok === this.argSep) {\n            numArgs++;\n          }\n        });\n\n        subExpressionFunc = functions.find((f) => f.numArgs === numArgs && f.strForm === tokFunc.strForm) ?? null;\n      }\n\n      // Evaluates sub-expressions.\n      tokensList = expressionLHS;\n      tokensList.push(...this.evalNoPar(subExpression, subExpressionFunc));\n      tokensList.push(...expressionRHS);\n\n      // Returns when everything has been parsed.\n      if (expressionLHS.length === 0 && expressionRHS.length === 0) {\n        let result = \"\";\n\n        for (let i = 0; i < tokensList.length; i++) {\n          result += tokensList[i].strForm;\n        }\n\n        return result;\n      }\n    }\n  }\n\n  /**\n   * Parses a non-relational expression without parentheses with an optional argument to treat the\n   * expression as function arguments.\n   */\n  public evalNoPar = (subExpression: IToken[], func: TokenFunc | null): IToken[] => {\n    let operators = this.tokens.filter((tok) => tok instanceof TokenOp) as TokenOp[];\n    let result: IToken[] = [];\n\n    // Creates a string representation of the token list for errors.\n    let subExpressionStr = \"\";\n\n    for (let i = 0; i < subExpression.length; i++) {\n      subExpressionStr += subExpression[i].strForm;\n    }\n\n    // Strips () and catches empty expressions.\n    if (\n      this.optRequireRightPars &&\n      subExpression[0] === this.lPar &&\n      subExpression[subExpression.length - 1] !== this.rPar\n    ) {\n      throw new Error(\"Parser: The expression '\" + subExpressionStr + \"' is missing a right parenthesis at the end.\");\n    }\n\n    subExpression.filter((tok) => tok === this.lPar || tok === this.rPar);\n\n    if (subExpression.length === 0) {\n      throw new Error(\"Parser: an empty parenthesis group was provided; there is nothing to process within it.\");\n    }\n\n    // Parses each argument separately, then applies the function.\n    if (func !== null) {\n      let args = this.split(subExpression, this.argSep);\n      let argVals: IToken[] = [];\n\n      // Catches overloads with the wrong number of arguments.\n      if (func.numArgs !== args.length) {\n        throw new Error(\n          \"Parser: In expression '\" +\n            subExpressionStr +\n            \"', the number of arguments for \" +\n            func.strForm +\n            \" should be \" +\n            func.numArgs +\n            \", but \" +\n            args.length +\n            \" arguments were given.\"\n        );\n      }\n\n      // Simplifies each argument.\n      for (let i = 0; i < args.length; i++) {\n        const subResult = this.evalNoPar(args[i], null);\n\n        if (subResult[0] instanceof TokenNum || subResult[0] instanceof TokenBool) {\n          argVals[i] = subResult[0];\n        } else {\n          throw new Error(\n            \"Parser: In expression '\" +\n              subExpressionStr +\n              \"', a boolean argument was provided instead of a decimal value.\"\n          );\n        }\n      }\n\n      // Applies functions.\n      const immediateResult = func.function(argVals);\n      if (immediateResult === null) {\n        throw new Error(\n          \"Parser: In expression '\" + subExpressionStr + \"', arguments do not match parameter types used.\"\n        );\n      }\n\n      result.push(immediateResult);\n      return result;\n    }\n\n    // Minuses are binary by default; determines which ones are unary. If the first token is a\n    // minus, it's a negation.\n    if (subExpression[0] === this.Sub) {\n      subExpression[0] = this.Neg;\n    }\n\n    // Performs left-to-right modifications on the token list.\n    for (let i = 1; i < subExpression.length; i++) {\n      // A minus after a binary operator or negation is a negation.\n      if (\n        (subExpression[i] === this.Sub &&\n          subExpression[i - 1] instanceof TokenOp &&\n          ((subExpression[i - 1] as TokenOp).numArgs > 1 || subExpression[i - 1] === this.Neg)) ||\n        subExpression[i - 1] instanceof TokenFunc\n      ) {\n        subExpression[i] = this.Neg;\n      }\n    }\n\n    // Gets max precedence within sub-expression.\n    let opTokens = subExpression.filter((tok) => tok instanceof TokenOp) as TokenOp[];\n\n    let maxPrecedence = 0;\n    opTokens.forEach((tok: TokenOp) => {\n      if (tok.prec > maxPrecedence) {\n        maxPrecedence = tok.prec;\n      }\n    });\n\n    // Computes all operators with equal precedence.\n    while (maxPrecedence > 0) {\n      let isRightAssociative = operators.some((tok) => maxPrecedence === tok.prec && tok.assoc === associativity.right);\n\n      // Iterates through each token forwards or backwards.\n      let j = isRightAssociative ? subExpression.length - 1 : 0;\n\n      while ((isRightAssociative && j >= 0) || (!isRightAssociative && j < subExpression.length)) {\n        if (subExpression[j] instanceof TokenOp && (subExpression[j] as TokenOp).prec === maxPrecedence) {\n          let opToken = subExpression[j] as TokenOp;\n          let argVals: IToken[] = [subExpression[j - 1] ?? null, subExpression[j + 1] ?? null];\n          let result: IToken | null = null;\n\n          // Handles missing arguments.\n          if (argVals[0] === null && (opToken.placement === placements.both || opToken.placement === placements.left)) {\n            throw new Error(\n              \"Parser: In '\" +\n                subExpressionStr +\n                \"', the '\" +\n                subExpression[j].strForm +\n                \"' operator is missing a lefthand operand.\"\n            );\n          } else if (\n            argVals[1] === null &&\n            (opToken.placement === placements.both || opToken.placement === placements.right)\n          ) {\n            throw new Error(\n              \"Parser: In '\" +\n                subExpressionStr +\n                \"', the '\" +\n                subExpression[j].strForm +\n                \"' operator is missing a righthand operand.\"\n            );\n          }\n\n          // Applies each operator.\n          result = opToken.function(argVals);\n\n          // Removes affected tokens and inserts new value.\n          if (result === null) {\n            throw new Error(\"In expression '\" + subExpressionStr + \"', operand type(s) do not match operator.\");\n          } else {\n            subExpression[j] = result;\n          }\n\n          if (opToken.placement === placements.left) {\n            subExpression.splice(j - 1, 1);\n            j += isRightAssociative ? 0 : -1;\n          } else if (opToken.placement === placements.right) {\n            subExpression.splice(j + 1, 1);\n            j += isRightAssociative ? 1 : 0;\n          } else if (opToken.placement === placements.both) {\n            subExpression.splice(j + 1, 1);\n            subExpression.splice(j - 1, 1);\n            j += isRightAssociative ? 0 : -1;\n          }\n        }\n\n        // Moves to next token to evaluate.\n        if (isRightAssociative) {\n          j--;\n        } else {\n          j++;\n        }\n      }\n\n      // Gets new precedence within sub-expression.\n      opTokens = subExpression.filter((tok) => tok instanceof TokenOp) as TokenOp[];\n      let maxPrecedence2 = 0;\n\n      opTokens.forEach((tok: TokenOp) => {\n        if (tok.prec > maxPrecedence2) {\n          maxPrecedence2 = tok.prec;\n        }\n      });\n    }\n\n    // Returns the final value.\n    result.push(...subExpression);\n    return result;\n  };\n\n  /** Returns the list of all tokens in use. */\n  public getTokens() {\n    return this.tokens;\n  }\n\n  /**\n   * Removes the first match for the given token from the list of tokens, if it exists. Returns\n   * true if found, false otherwise.\n   */\n  public removeToken(token: IToken) {\n    for (let i = this.tokens.length; i > 0; i--) {\n      if ((token as TokenBool).equals((this.tokens as TokenBool[])[i])) {\n        this.tokens.splice(i, 1);\n\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /** Resets to the default token list and removes all user-added tokens. */\n  public resetTokens() {\n    //Sets the token list. Omits factorial.\n    //prettier-ignore\n    this.tokens = [\n      this.Exp, this.Neg, this.Mod, this.Div, this.Mlt, this.Sub, this.Add, this.LogNot, this.LogOr, this.LogAnd,\n      this.Eq, this.Gt, this.Gte, this.Lt, this.Lte, this.NotEq,\n      this.Fsin, this.Fcos, this.Ftan, this.Frnd, this.Frnd2,\n      this.varFalse, this.varTrue, this.varPi,\n      this.lPar, this.rPar, this.argSep\n    ];\n\n    //Sorts tokens in reverse lexicographic order to support deferring.\n    this.tokens = this.tokens.sort((a, b) => (a.strForm < b.strForm ? 1 : -1));\n  }\n\n  /**\n   * Returns all consecutive items between each matched delimiter item. For example, a list\n   * containing [0, 2, 1, 3, 1] delimited by 1 will return the lists [0, 2][3].\n   */\n  public split<T>(list: T[], delimiter: T): T[][] {\n    const lists: T[][] = [];\n    const currentList: T[] = [];\n\n    // Stores the running list and creates another for each delimiter.\n    for (let i = 0; i < list.length; i++) {\n      if (list[i] === delimiter) {\n        lists.push([...currentList]);\n      } else {\n        currentList.push(list[i]);\n      }\n    }\n\n    if (currentList.length > 0) {\n      lists.push(currentList);\n    }\n\n    return lists;\n  }\n\n  /** Converts the given string to tokens. */\n  public tokenize(expression: string): IToken[] {\n    const tokensList: IToken[] = [];\n    let token = \"\";\n\n    // Catches null or whitespace strings.\n    if (expression.trim() === \"\") {\n      throw new Error(\"Parser: No expression provided.\");\n    }\n\n    // Lowercases and removes whitespaces.\n    expression = expression.replace(/\\s/gm, \"\").toLowerCase();\n\n    // Builds a token list.\n    let longestMatch: IToken | null = null;\n    let shortestMatch: IToken | null = null;\n    let candidateBeforeDefer: IToken | null = null;\n\n    for (let i = 0; i < expression.length; i++) {\n      token += expression[i];\n\n      // Matches longer tokens and tokens of the same length.\n      longestMatch = this.tokens.filter((tok) => tok.strForm === token)[0];\n\n      // Defers when the token is longer.\n      if (i !== expression.length - 1 && longestMatch?.strForm.length > token.length) {\n        shortestMatch = this.tokens.filter((tok) => tok.strForm === token)[0];\n\n        // Stores valid matches as token matching is deferred.\n        if (shortestMatch?.strForm === token) {\n          candidateBeforeDefer = shortestMatch;\n\n          // Adds the token if at end rather than deferring.\n          if (i === expression.length - 1) {\n            tokensList.push(shortestMatch);\n            token = \"\";\n            candidateBeforeDefer = null;\n          }\n        }\n      }\n\n      // Matches when there are no longer candidates.\n      else if (longestMatch !== null && (i !== expression.length - 1 || longestMatch.strForm.length === token.length)) {\n        tokensList.push(longestMatch);\n        token = \"\";\n        candidateBeforeDefer = null;\n      } else {\n        // Backtracks to the last valid token.\n        if (candidateBeforeDefer !== null) {\n          i -= token.length - candidateBeforeDefer.strForm.length;\n          tokensList.push(candidateBeforeDefer);\n          token = \"\";\n          candidateBeforeDefer = null;\n        }\n\n        // Matches literals.\n        else if (numberRegex.test(token)) {\n          const val = parseFloat(token);\n\n          // Adds the numeric token at end of string or boundary.\n          if (i === expression.length - 1 || !numberRegex.test(token + expression[i + 1])) {\n            tokensList.push(new TokenNum(val));\n            token = \"\";\n          }\n        }\n\n        // Matches unknowns by-character if allowed.\n        else if (this.optIncludeUnknowns) {\n          tokensList.push(new TokenId(token[0].toString(), null));\n          i -= token.length - 1;\n          token = \"\";\n        } else {\n          throw new Error(\"Parser: token '\" + token + \"' is not a recognized symbol.\");\n        }\n      }\n    }\n\n    // Combines contiguous tokens. If the resulting token exists, uses it. Else, adds as unknown or\n    // throws an error.\n    let combinedTokens: IToken[] = [];\n    let unknownTokenName = \"\";\n\n    // Combines contiguous unknowns. Sets tokens to be subtraction rather than negation by default.\n    for (let i = 0; i < tokensList.length; i++) {\n      // Break and add while looking ahead.\n      if (\n        i === tokensList.length - 1 ||\n        tokensList[i + 1] instanceof TokenOp ||\n        tokensList[i + 1] instanceof TokenSym\n      ) {\n        if (unknownTokenName !== \"\") {\n          unknownTokenName += tokensList[i].strForm;\n\n          if (this.optIncludeUnknowns) {\n            combinedTokens.push(new TokenId(unknownTokenName, null));\n            unknownTokenName = \"\";\n            continue;\n          } else {\n            throw new Error(\"Parser: token '\" + unknownTokenName + \"' is not a recognized symbol.\");\n          }\n        }\n      }\n\n      // Append.\n      else if (!(tokensList[i] instanceof TokenOp || tokensList[i] instanceof TokenSym)) {\n        if (unknownTokenName !== \"\" || !(tokensList[i] instanceof TokenNum)) {\n          unknownTokenName += tokensList[i].strForm;\n          continue;\n        }\n      }\n\n      // Add other tokens, favoring subtraction over negation.\n      if (tokensList[i] === this.Neg) {\n        combinedTokens.push(this.Sub);\n      } else {\n        combinedTokens.push(tokensList[i]);\n      }\n    }\n\n    return combinedTokens;\n  }\n}\n","import { ILocalizedStringSets } from \"../localization/Localization\";\nimport { getActionGuid } from \"../redux/reduxTools\";\nimport { ISupportedTheme } from \"../themes\";\n\nexport const actions = {\n  setLocale: getActionGuid(),\n  setTheme: getActionGuid(),\n};\n\n/** Action creator to store name of preferred color theme. */\nexport const setTheme = (theme: ISupportedTheme) => {\n  return {\n    theme,\n    type: actions.setTheme,\n  };\n};\n\n/** Action creator to store (lowercase) preferred locale id such as en-us. */\nexport const setLocale = (localeId: keyof ILocalizedStringSets) => {\n  return {\n    localeId,\n    type: actions.setLocale,\n  };\n};\n","import { combineReducers, Dispatch } from \"redux\";\nimport { getSupportedLocale, ILocalizedStringSets } from \"../localization/Localization\";\nimport { ISupportedTheme, themes } from \"../themes\";\nimport { actions, setLocale, setTheme } from \"./settings.actions\";\nimport { loadTheme } from \"office-ui-fabric-react/lib/Styling\";\n\n/** The user's preferred theme. An empty string here should mean the default theme is applied. */\nconst theme = (\n  state: ISupportedTheme = {\n    localizedName: themes.light.localizedName,\n    theme: loadTheme(themes.light.theme),\n  },\n  action: ReturnType<typeof setTheme>\n) => {\n  if (action.type === actions.setTheme) {\n    return action.theme;\n  }\n\n  return state;\n};\n\n/** Sets the full theme based on a partial theme and injects it to update components. */\nexport const dispatchSetTheme = (dispatch: Dispatch) => async (supportedTheme: ISupportedTheme) => {\n  document.body.style.backgroundColor = supportedTheme.theme.semanticColors.bodyBackground;\n  dispatch(setTheme({ localizedName: supportedTheme.localizedName, theme: supportedTheme.theme }));\n};\n\n/** The user's preferred language. */\nconst locale = (state = getSupportedLocale(), action: ReturnType<typeof setLocale>) => {\n  if (action.type === actions.setLocale) {\n    return action.localeId;\n  }\n\n  return state;\n};\n\n/** Sets the locale id in lowercase, such as en-us. */\nexport const dispatchSetLocale = (dispatch: Dispatch) => async (localeId: keyof ILocalizedStringSets) => {\n  dispatch(setLocale(localeId));\n};\n\n// Combine reducers and typescript definition.\nexport interface ISettingState {\n  locale: keyof ILocalizedStringSets;\n  theme: ISupportedTheme;\n}\n\nexport const settings = combineReducers({\n  locale,\n  theme,\n});\n","import { IRootState } from \"../../store\";\nimport { ILocalizedStringSets } from \"../localization/Localization\";\nimport { ISupportedThemes, themes } from \"../themes\";\n\nconst persistStateVersion = 1;\nconst persistStateIdentifier = \"JoshuaTree\";\n\n/** The object states to persist to local storage. */\nexport interface IPersistentState {\n  themeName: keyof ISupportedThemes;\n  localeId: keyof ILocalizedStringSets;\n  saveFormatVersion: number;\n}\n\n/**\n * Saves the given state to local storage. Users must accept the storage policy for data that\n * isn't essential to the service or anything that helps identify an individual.\n */\nexport const saveToLocalStorage = (state: IRootState) => {\n  if (!state.persistence.userConsentProvided) {\n    return;\n  }\n\n  let themeName = \"\";\n  Object.keys(themes).forEach((key: string) => {\n    const candidateThemeName = themes[key as keyof ISupportedThemes].localizedName;\n    if (candidateThemeName === state.settings.theme.localizedName) {\n      themeName = key;\n    }\n  });\n\n  const newState: IPersistentState = {\n    localeId: state.settings.locale,\n    saveFormatVersion: persistStateVersion,\n    themeName: themeName as keyof ISupportedThemes,\n  };\n\n  localStorage.setItem(persistStateIdentifier, JSON.stringify(newState));\n};\n\n/**\n * Loads the given state from local storage. Users must have accepted the storage policy for data\n * that isn't essential to the service or anything that helps identify an individual. Returns null\n * if a key isn't found. The state returned on success contains all keys, though their values\n * aren't checked for accuracy.\n */\nexport const loadFromLocalStorage = (): IPersistentState | null => {\n  const loadedState = localStorage.getItem(persistStateIdentifier);\n  if (loadedState === null) {\n    return null;\n  }\n\n  let returnedState: Partial<IPersistentState> = {};\n\n  try {\n    returnedState = JSON.parse(loadedState) as Partial<IPersistentState>;\n  } catch {\n    return null;\n  }\n\n  // All keys must exist before the state can be considered complete.\n  if (!returnedState.localeId || !returnedState.themeName || !returnedState.saveFormatVersion) {\n    return null;\n  }\n\n  return returnedState as IPersistentState;\n};\n","import { getActionGuid } from \"../redux/reduxTools\";\n\nexport const actions = {\n  setCustomizationApplied: getActionGuid(),\n  setUserConsentProvided: getActionGuid(),\n};\n\n/** Action creator to store whether the user has provided consent to using local storage. */\nexport const setUserConsentProvided = (consentProvided: boolean) => {\n  return {\n    consentProvided,\n    type: actions.setUserConsentProvided,\n  };\n};\n\n/** Action creator to store (lowercase) preferred locale id such as en-us. */\nexport const setCustomizationApplied = (isApplied: boolean) => {\n  return {\n    isApplied,\n    type: actions.setCustomizationApplied,\n  };\n};\n","import { combineReducers, Dispatch } from \"redux\";\nimport { actions, setCustomizationApplied, setUserConsentProvided } from \"./persistence.actions\";\n\n/**\n * True if the user accepts the storage policy. Until the user accepts, data that isn't essential\n * for the operation of the site and any data that might be combined together across the site and\n * its services to create personally identifying info cannot be saved or loaded.\n *\n * This defaults to true because there is nothing requiring consent yet.\n */\nconst userConsentProvided = (state = true, action: ReturnType<typeof setUserConsentProvided>) => {\n  if (action.type === actions.setUserConsentProvided) {\n    return action.consentProvided;\n  }\n\n  return state;\n};\n\n/** Sets whether the user has consented to the storage policy. */\nexport const dispatchSetUserConsentProvided = (dispatch: Dispatch) => (isConsentGiven: boolean) => {\n  dispatch(setUserConsentProvided(isConsentGiven));\n};\n\n/**\n * True if local storage customizations have been applied. An attempt to load should be made once\n * after the user has accepted the storage policy and changes to content.\n */\nconst customizationApplied = (state = false, action: ReturnType<typeof setCustomizationApplied>) => {\n  if (action.type === actions.setCustomizationApplied) {\n    return action.isApplied;\n  }\n\n  return state;\n};\n\n/** Sets the locale id in lowercase, such as en-us. */\nexport const dispatchSetCustomizationApplied = (dispatch: Dispatch) => (isCustomizationApplied: boolean) => {\n  dispatch(setCustomizationApplied(isCustomizationApplied));\n};\n\n// Combine reducers and typescript definition.\nexport interface IPersistenceState {\n  customizationApplied: boolean;\n  userConsentProvided: boolean;\n}\n\nexport const persistence = combineReducers({\n  customizationApplied,\n  userConsentProvided,\n});\n","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { commandBarDropdownStyle } from \"../../common/styles/controlStyles\";\nimport { IDropdownProps, IDropdownStyles } from \"office-ui-fabric-react/lib/components/Dropdown/Dropdown.types\";\nimport { Dropdown } from \"office-ui-fabric-react/lib/components/Dropdown/Dropdown\";\nimport { IRootState } from \"../../store\";\n\nconst mapStateToProps = (state: IRootState) => {\n  return {\n    theme: state.settings.theme,\n  };\n};\n\n/** Main props associated with the MenuBarDropdown. */\nexport interface CommandBarDropdownProps {\n  dropdown: IDropdownProps;\n}\n\ntype CombinedProps = ReturnType<typeof mapStateToProps> & CommandBarDropdownProps;\n\n/** Renders a theme-connected dropdown styled for inclusion in the main command bar. */\nclass CommandBarDropdownC extends React.Component<CommandBarDropdownProps> {\n  public render() {\n    const { styles, ...props } = (this.props as CombinedProps).dropdown;\n    const stylesTyped = styles as IDropdownStyles;\n\n    return (\n      <Dropdown {...props} styles={commandBarDropdownStyle((this.props as CombinedProps).theme.theme, stylesTyped)} />\n    );\n  }\n}\n\nexport const CommandBarDropdown = connect(mapStateToProps)(CommandBarDropdownC);\n","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { commandIds, invokeCommand } from \"../../common/commands/commands\";\nimport { getStrings } from \"../../common/localization/Localization\";\nimport { localizedStrings } from \"../../common/localization/LocalizedStrings\";\nimport { dispatchSetLocale, dispatchSetTheme } from \"../../common/settings/settings.reducers\";\nimport { loadFromLocalStorage, saveToLocalStorage } from \"../../common/storage/persistence\";\nimport { dispatchSetUserConsentProvided } from \"../../common/storage/persistence.reducers\";\nimport {\n  iconSpaceBeforeTextStyle,\n  commandBarItemStyle,\n  commandBarDropdownButtonStyle,\n  commandBarDropdownSeparatorStyle,\n  commandBarStyle,\n  hiddenAndInaccessible,\n} from \"../../common/styles/controlStyles\";\nimport { ISupportedTheme, themes } from \"../../common/themes\";\nimport { IRootState } from \"../../store\";\nimport { CommandBarDropdown } from \"./MenuBarDropdown\";\nimport { dispatchSetStory } from \"../../common/redux/viewedit.reducers\";\nimport { getTheme } from \"office-ui-fabric-react/lib/Styling\";\nimport { ICommandBarItemProps } from \"office-ui-fabric-react/lib/components/CommandBar/CommandBar.types\";\nimport { CommandBar } from \"office-ui-fabric-react/lib/components/CommandBar/CommandBar\";\nimport { IDropdownOption } from \"office-ui-fabric-react/lib/components/Dropdown/Dropdown.types\";\nimport { Icon } from \"office-ui-fabric-react/lib/components/Icon/Icon\";\n\n/**\n * Browsers require a click to invoke an open file dialog, so this invokes a click on a hidden\n * input element rendered as part of the main command bar. This enables seamless functionality.\n */\nexport function invokeOpenCommand() {\n  hiddenInputRef.current?.click();\n}\n\n/** Browsers require a click event on an input control, which is automatically done via this one. */\nconst hiddenInputRef = React.createRef<HTMLInputElement>();\n\nconst mapStateToProps = (state: IRootState) => {\n  return {\n    locale: state.settings.locale,\n    reduxState: state,\n    strings: getStrings(state.settings.locale),\n    themeName: state.settings.theme.localizedName,\n    userConsentProvided: state.persistence.userConsentProvided,\n    wholeTheme: getTheme(),\n  };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch) => {\n  return {\n    setConsent: dispatchSetUserConsentProvided(dispatch),\n    setLocale: dispatchSetLocale(dispatch),\n    setStory: dispatchSetStory(dispatch),\n    setTheme: dispatchSetTheme(dispatch),\n  };\n};\n\nexport type MainCommandBarOwnProps = {};\n\ntype CombinedProps = MainCommandBarOwnProps &\n  ReturnType<typeof mapStateToProps> &\n  ReturnType<typeof mapDispatchToProps>;\n\nexport class MenuBarC extends React.Component<MainCommandBarOwnProps> {\n  /** Applies all user setting stored in local storage, if consent was provided. */\n  public componentDidMount() {\n    if ((this.props as CombinedProps).userConsentProvided) {\n      this.applyLocalStorage();\n    }\n  }\n\n  public render() {\n    // File-related options.\n    const items: ICommandBarItemProps[] = [\n      {\n        className: commandBarItemStyle((this.props as CombinedProps).wholeTheme, true),\n        data: commandIds.mainMenuFileNew,\n        key: \"userSettingsCommandBarFileMenuNew\",\n        name: (this.props as CombinedProps).strings.MenuFileNew,\n        iconProps: { iconName: \"FabricNewFolder\" },\n        onClick: () => invokeCommand(commandIds.mainMenuFileNew),\n      },\n      {\n        className: commandBarItemStyle((this.props as CombinedProps).wholeTheme, true),\n        data: commandIds.mainMenuFileOpen,\n        key: \"userSettingsCommandBarFileMenuOpen\",\n        name: (this.props as CombinedProps).strings.MenuFileOpen,\n        iconProps: { iconName: \"OpenFolderHorizontal\" },\n        onClick: () => invokeCommand(commandIds.mainMenuFileOpen),\n      },\n      {\n        className: commandBarItemStyle((this.props as CombinedProps).wholeTheme),\n        data: commandIds.mainMenuFileSave,\n        key: \"userSettingsCommandBarFileMenuSave\",\n        name: (this.props as CombinedProps).strings.MenuFileSave,\n        iconProps: { iconName: \"Save\" },\n        onClick: () => invokeCommand(commandIds.mainMenuFileSave),\n      },\n    ];\n\n    // Theme and language options.\n    const farItems: ICommandBarItemProps[] = [\n      {\n        ariaLabel: (this.props as CombinedProps).strings.TipTheme,\n        key: \"userSettingsCommandBarChosenTheme\",\n        onRender: this.renderThemeDropdown,\n        buttonStyles: commandBarDropdownButtonStyle(),\n      },\n      {\n        ariaLabel: (this.props as CombinedProps).strings.TipLanguage,\n        key: \"userSettingsCommandBarChosenLocale\",\n        onRender: this.renderLocaleDropdown,\n      },\n    ];\n\n    /** Loads the given file to a string for parsing. */\n    const handleFile = async (ev: React.ChangeEvent<HTMLInputElement>) => {\n      const chosenFiles = ev.target.files;\n\n      if (chosenFiles) {\n        const fileReader = new FileReader();\n\n        fileReader.onloadend = () => {\n          const result = fileReader.result as string;\n          (this.props as CombinedProps).setStory(result);\n        };\n\n        fileReader.readAsText(chosenFiles[0]);\n      }\n    };\n\n    return (\n      <>\n        <input className={hiddenAndInaccessible} onChange={handleFile} ref={hiddenInputRef} type=\"file\" />\n        <CommandBar\n          ariaLabel={(this.props as CombinedProps).strings.TipNavigateCommandBar}\n          items={items}\n          farItems={farItems}\n          styles={commandBarStyle}\n        />\n      </>\n    );\n  }\n\n  /** Updates redux with content loaded from local storage. */\n  private applyLocalStorage = () => {\n    const state = loadFromLocalStorage();\n    if (state !== null) {\n      if (state.localeId in localizedStrings) {\n        (this.props as CombinedProps).setLocale(state.localeId);\n      }\n\n      if (themes[state.themeName] !== null) {\n        (this.props as CombinedProps).setTheme(themes[state.themeName]);\n      }\n    }\n  };\n\n  /** Generates a key for options in the locale dropdown menu. */\n  private getLocaleDropdownOptionKey = (localeId: string) => {\n    return `userSettingsLocaleOptions${localeId}`;\n  };\n\n  /** Renders the dropdown for the locale picker control. */\n  private renderLocaleDropdown = () => {\n    const options: IDropdownOption[] = [];\n\n    // Populates the available locales.\n    Object.keys(localizedStrings).forEach((localeOption: string) => {\n      options.push({\n        data: localeOption,\n        key: this.getLocaleDropdownOptionKey(localeOption),\n        text: localizedStrings[localeOption as keyof typeof localizedStrings].LanguageCodeName,\n      });\n    });\n\n    /** Switches all GUI to display in the user-chosen language. */\n    const updateChangedLocale = (event: React.FormEvent<HTMLDivElement>, option?: IDropdownOption) => {\n      if (option !== undefined) {\n        const localeId = option.data as keyof typeof localizedStrings;\n        (this.props as CombinedProps).setLocale(localeId).then(() => {\n          saveToLocalStorage((this.props as CombinedProps).reduxState);\n        });\n      }\n    };\n\n    /** Renders the locale dropdown and name of the currently-chosen language. */\n    const renderDropdownTitle = () => (\n      <>\n        <Icon iconName=\"LocaleLanguage\" styles={iconSpaceBeforeTextStyle} />\n        <span style={{ fontSize: `${(this.props as CombinedProps).wholeTheme.fonts.large}` }}>\n          {localizedStrings[(this.props as CombinedProps).locale].LanguageCodeName}\n        </span>\n      </>\n    );\n\n    return (\n      <CommandBarDropdown\n        dropdown={{\n          defaultSelectedKey: this.getLocaleDropdownOptionKey((this.props as CombinedProps).locale),\n          onRenderTitle: renderDropdownTitle,\n          options: options,\n          onChange: updateChangedLocale,\n        }}\n      />\n    );\n  };\n\n  /** Generates a key for options in the theme dropdown menu. */\n  private getThemeDropdownOptionKey = (themeName: string) => {\n    return `userSettingsThemeOptions${themeName}`;\n  };\n\n  /** Renders the dropdown for the theme picker control. */\n  private renderThemeDropdown = () => {\n    const options: IDropdownOption[] = [];\n\n    // Populates the available themes.\n    Object.keys(themes).forEach((themeKey: string) => {\n      const theme = themes[themeKey as keyof typeof themes];\n\n      options.push({\n        data: theme,\n        key: this.getThemeDropdownOptionKey(theme.localizedName),\n        text: theme.localizedName,\n      });\n    });\n\n    /** Switches all GUI to display with the chosen theme. */\n    const updateChangedTheme = (_: React.FormEvent<HTMLDivElement>, option?: IDropdownOption) => {\n      if (option !== undefined) {\n        const theme = option.data as ISupportedTheme;\n        (this.props as CombinedProps).setTheme(theme).then(() => {\n          saveToLocalStorage((this.props as CombinedProps).reduxState);\n        });\n      }\n    };\n\n    /** Renders the theme dropdown and name of the currently-chosen theme. */\n    const renderDropdownTitle = () => (\n      <span style={{ fontSize: `${(this.props as CombinedProps).wholeTheme.fonts.large}` }}>\n        {(this.props as CombinedProps).strings.ThemeDropdownText((this.props as CombinedProps).themeName)}\n      </span>\n    );\n\n    return (\n      <CommandBarDropdown\n        dropdown={{\n          defaultSelectedKey: this.getThemeDropdownOptionKey((this.props as CombinedProps).themeName),\n          onRenderTitle: renderDropdownTitle,\n          options: options,\n          onChange: updateChangedTheme,\n          styles: commandBarDropdownSeparatorStyle((this.props as CombinedProps).wholeTheme),\n        }}\n      />\n    );\n  };\n}\n\nexport const MenuBar = connect(mapStateToProps, mapDispatchToProps)(MenuBarC);\n","import { invokeOpenCommand } from \"../../gui/menu/MenuBar\";\r\nimport { IShortcut } from \"./shortcutManager\";\r\n\r\n/** A command is a set of functions executed when the command is invoked by identity. */\r\nexport interface ICommand {\r\n  enableWhileTyping?: boolean;\r\n  disabled?: boolean;\r\n  functionsToInvoke: ICommandFunction[];\r\n  guid: commandIds;\r\n  shortcuts: IShortcut[];\r\n}\r\n\r\n/** Contains the event object and/or arbitrary data passed to the called command. */\r\nexport interface ICommandFunctionData {\r\n  event?: React.SyntheticEvent;\r\n  data?: any;\r\n}\r\n\r\n/** A function that can be executed by a command. */\r\nexport interface ICommandFunction {\r\n  disabled?: boolean;\r\n  function: (data?: ICommandFunctionData) => void;\r\n}\r\n\r\n/**\r\n * Commands can be invoked by ID or keyboard shortcuts. Users can define shortcuts, making it\r\n * valuable to define frequent or important user actions as commands.\r\n */\r\nexport enum commandIds {\r\n  mainMenuFileNew = \"mainMenuFileNew\",\r\n  mainMenuFileOpen = \"mainMenuFileOpen\",\r\n  mainMenuFileSave = \"mainMenuFileSave\",\r\n}\r\n\r\n/** Prompts the user to save first, then starts a new project. */\r\nconst actionMainMenuFileNew: ICommandFunction = {\r\n  function: () => {\r\n    alert(\"Invoked file -> new.\"); //TODO\r\n  },\r\n};\r\n\r\n/** Prompts the user to save first, then opens the given file. */\r\nconst actionMainMenuFileOpen: ICommandFunction = {\r\n  function: () => {\r\n    invokeOpenCommand();\r\n  },\r\n};\r\n\r\n/** Saves all changes. Prompts for a save location if never before saved. */\r\nconst actionMainMenuFileSave: ICommandFunction = {\r\n  function: () => {\r\n    alert(\"Invoked file -> save.\"); //TODO\r\n  },\r\n};\r\n\r\nexport const commands: { [key in commandIds]: ICommand } = {\r\n  mainMenuFileNew: {\r\n    functionsToInvoke: [actionMainMenuFileNew],\r\n    guid: commandIds.mainMenuFileNew as commandIds,\r\n    shortcuts: [\r\n      {\r\n        originalSequence: [{ key: \"N\", usesShift: true }],\r\n      },\r\n    ],\r\n  },\r\n  mainMenuFileOpen: {\r\n    functionsToInvoke: [actionMainMenuFileOpen],\r\n    guid: commandIds.mainMenuFileOpen as commandIds,\r\n    shortcuts: [\r\n      {\r\n        originalSequence: [{ key: \"O\", usesShift: true }],\r\n      },\r\n    ],\r\n  },\r\n  mainMenuFileSave: {\r\n    functionsToInvoke: [actionMainMenuFileSave],\r\n    guid: commandIds.mainMenuFileSave as commandIds,\r\n    shortcuts: [\r\n      {\r\n        originalSequence: [{ key: \"S\", usesShift: true }],\r\n      },\r\n    ],\r\n  },\r\n};\r\n\r\n/** Invokes the command with the given ID. */\r\nexport const invokeCommand = (Id: commandIds, data?: ICommandFunctionData) => {\r\n  // Silently consume command invocations that aren't enabled while typing. They still consume keypresses.\r\n  if (\r\n    commands[Id].enableWhileTyping !== true &&\r\n    (document.activeElement?.nodeName.toLowerCase() === \"textarea\" ||\r\n      (document.activeElement?.nodeName.toLowerCase() === \"input\" &&\r\n        document.activeElement.getAttribute(\"type\") === \"text\"))\r\n  ) {\r\n    return;\r\n  }\r\n\r\n  if (commands[Id].disabled !== true) {\r\n    commands[Id].functionsToInvoke.forEach((func: ICommandFunction) => {\r\n      if (func.disabled !== true) {\r\n        func.function(data);\r\n      }\r\n    });\r\n  }\r\n};\r\n","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { idEditorInputfield } from \"../../common/identifiers\";\nimport { dispatchSaveAndRunStory, dispatchSetStory } from \"../../common/redux/viewedit.reducers\";\nimport { IRootState } from \"../../store\";\nimport { editorTextAreaStyle } from \"../../common/styles/controlStyles\";\nimport { PrimaryButton } from \"office-ui-fabric-react/lib/components/Button/PrimaryButton/PrimaryButton\";\n\nconst mapStateToProps = (state: IRootState) => {\n  return {\n    story: state.viewEdit.story,\n    theme: state.settings.theme,\n  };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch) => {\n  return {\n    saveAndRunStory: dispatchSaveAndRunStory(dispatch),\n    setStory: dispatchSetStory(dispatch),\n  };\n};\n\nexport type EditorViewOwnProps = {};\n\ntype CombinedProps = EditorViewOwnProps & ReturnType<typeof mapStateToProps> & ReturnType<typeof mapDispatchToProps>;\n\nexport class EditorViewC extends React.Component<EditorViewOwnProps> {\n  public componentDidUpdate(prevProps: EditorViewOwnProps) {\n    if ((this.props as CombinedProps).story !== (prevProps as CombinedProps).story) {\n      document.getElementById(idEditorInputfield)?.setAttribute(\"value\", (this.props as CombinedProps).story);\n    }\n  }\n\n  public render() {\n    return (\n      <>\n        <textarea\n          style={editorTextAreaStyle((this.props as CombinedProps).theme.theme)}\n          id={idEditorInputfield}\n          onBlur={this.updateStory}\n        />\n        <div style={{ display: \"flex\", flexDirection: \"row-reverse\" }}>\n          <PrimaryButton styles={{ root: { display: \"block\" } }} text={\"play\"} onClick={this.runStory} />\n        </div>\n      </>\n    ); // TODO: localize\n  }\n\n  private runStory = () => {\n    const currentStory = (document.getElementById(idEditorInputfield) as HTMLTextAreaElement).value;\n    (this.props as CombinedProps).saveAndRunStory(currentStory);\n  };\n\n  private updateStory = (ev: React.FocusEvent<HTMLTextAreaElement>) => {\n    if ((this.props as CombinedProps).story !== ev.currentTarget.value) {\n      (this.props as CombinedProps).setStory(ev.currentTarget.value);\n    }\n  };\n}\n\nexport const EditorView = connect(mapStateToProps, mapDispatchToProps)(EditorViewC);\n","/**\n * Contains text to execute if its conditions are met, with links to the parent and child nodes.\n */\nexport class StoryParseNode {\n  /** Contains a list of conditions to be met for text to be considered. */\n  public condition: string;\n\n  /** Contains text to be processed only if the conditions are met. */\n  public text: string;\n\n  /** References the parent node, if any. */\n  public parent: StoryParseNode | null;\n\n  /** References the child nodes, if any. */\n  public children: StoryParseNode[];\n\n  constructor() {\n    this.condition = \"\";\n    this.text = \"\";\n    this.parent = null;\n    this.children = [];\n  }\n}\n","import { StoryParseNode } from \"./storyParseNode\";\nimport { StoryInterpreterC } from \"./storyInterpreter\";\n\n// TODO: localize strings in this file.\n\nconst doubleSlashRegex = /\\/\\//g;\nconst ifRegex = /\\bif\\b/g;\nconst endIfRegex = /\\bendif\\b/g;\n\n/** Maps named pages to nodes. */\nexport interface IPageDictionary {\n  [key: string]: StoryParseNode;\n}\n\n/**\n * Returns whether the substring formed by the index and length is on the same line as an @ symbol.\n * Does not support nesting.\n */\nfunction isOption(text: string, index: number) {\n  let startOfLine = text.substring(0, index).lastIndexOf(\"\\n\");\n\n  if (startOfLine === -1) {\n    startOfLine = 0;\n  }\n\n  let endOfLine = text.substring(index).indexOf(\"\\n\");\n\n  if (endOfLine === -1) {\n    endOfLine = text.length - 1;\n  }\n\n  endOfLine += index;\n  const line = text.substring(startOfLine, endOfLine);\n\n  return line.includes(\"@\");\n}\n\n/**\n * Returns whether the substring formed by the index and length is in curly brackets in the given\n * text. Does not support nesting.\n */\nfunction isOutput(text: string, index: number) {\n  const beforeSubstring = text.substring(0, index);\n  const bracketOpenPos = beforeSubstring.lastIndexOf(\"{\");\n  const bracketClosePos = beforeSubstring.lastIndexOf(\"}\");\n\n  if (bracketOpenPos < bracketClosePos || bracketOpenPos === -1) {\n    return false;\n  }\n\n  return true;\n}\n\n/** Returns a dictionary containing a node tree for each fork. */\nexport function parseStory(story: string, interpreter: React.RefObject<StoryInterpreterC>, forkToLoad?: string) {\n  const entries: { [key: string]: string } = {};\n  const parsed: { [key: string]: StoryParseNode } = {};\n\n  const entryPositions: number[] = [];\n  const newlineSplitStory = story.split(\"\\n\");\n\n  if (newlineSplitStory.length === 0) {\n    interpreter.current?.setEntries({});\n\n    if (interpreter.current) {\n      interpreter.current.setErrorMessage(\"Parser: Story is blank. The story must not be blank to parse it.\");\n    }\n  }\n\n  // Finds fork header positions, normalizes line endings, and removes excess space.\n  for (let i = 0; i < newlineSplitStory.length; i++) {\n    newlineSplitStory[i] = newlineSplitStory[i].replace(\"\\r\", \"\").trim();\n\n    if (newlineSplitStory[i].startsWith(\"@\")) {\n      entryPositions.push(i);\n    }\n  }\n\n  // Interprets all text up to the first header as game options.\n  let header = \"\";\n\n  if (entryPositions.length > 0) {\n    for (let i = 0; i < entryPositions[0]; i++) {\n      header += newlineSplitStory[i] + \"\\n\";\n    }\n\n    interpreter.current?.processHeaderOptions(header);\n  }\n\n  // Splits entries into a dictionary.\n  for (let i = 0; i < entryPositions.length; i++) {\n    // Prevents unnamed entries.\n    if (newlineSplitStory[entryPositions[i]].length < 2) {\n      if (interpreter.current) {\n        interpreter.current.setErrorMessage(\n          \"Parser: Entry\" + newlineSplitStory[entryPositions[i]] + \"must be at least 1 character long.\"\n        );\n      }\n\n      continue;\n    }\n\n    // Stores the fork header name, content, and content by line.\n    let entryName = newlineSplitStory[entryPositions[i]].substring(1);\n    let entryList: string[] = [];\n    let entry = \"\";\n\n    // Associates forks with their content.\n    if (i === entryPositions.length - 1) {\n      entryList = newlineSplitStory.slice(entryPositions[i], newlineSplitStory.length);\n    } else {\n      entryList = newlineSplitStory.slice(entryPositions[i], entryPositions[i + 1]);\n    }\n\n    // Concatenates each line of text.\n    for (let j = 1; j < entryList.length; j++) {\n      entry += entryList[j] + \"\\n\";\n    }\n\n    entryName = entryName.replace(/\\s+/g, \"\").toLowerCase();\n\n    if (entries[entryName] !== undefined) {\n      if (interpreter.current) {\n        interpreter.current.setErrorMessage(`Parser: Entry called '${entryName}' already exists.`);\n      }\n    } else {\n      entries[entryName] = entry;\n    }\n  }\n\n  // Removes single-line comments from entries.\n  const entriesKeys = Object.keys(entries);\n  for (let i = 0; i < entriesKeys.length; i++) {\n    let isFinished: boolean;\n    let entry = entries[entriesKeys[i]];\n\n    do {\n      isFinished = true;\n\n      let match: RegExpExecArray | null = null;\n\n      // Determines if candidates are output text or commands.\n      while ((match = doubleSlashRegex.exec(entry)) !== null) {\n        const pos = match.index;\n\n        // Real comments are removed.\n        if (!isOutput(entry, pos) && !isOption(entry, pos)) {\n          entry = entry.slice(pos, entry.substring(pos).indexOf(\"\\n\"));\n\n          // Comment indices are invalidated. Search again as long as comments might exist (until\n          // all are found // instances are output text).\n          isFinished = false;\n          break;\n        }\n      }\n    } while (!isFinished);\n\n    // Sets the entry.\n    entries[entriesKeys[i]] = entry;\n  }\n\n  // Creates a parse tree.\n  for (let i = 0; i < entriesKeys.length; i++) {\n    const root = new StoryParseNode();\n    let node = root;\n    let depth = 0;\n\n    // The full entry.\n    const text = entries[entriesKeys[i]];\n\n    // Finds all if and endif words.\n    let ifMatches: RegExpExecArray[] = [];\n    let endIfMatches: RegExpExecArray[] = [];\n    let match: RegExpExecArray | null = null;\n    const ifs: number[] = [];\n    const endifs: number[] = [];\n\n    // Determines if candidates are output text or commands.\n    while ((match = ifRegex.exec(text)) !== null) {\n      ifMatches.push(match);\n    }\n\n    while ((match = endIfRegex.exec(text)) !== null) {\n      endIfMatches.push(match);\n    }\n\n    // Filters out if and endif words that are part of output text.\n    for (let j = 0; j < ifMatches.length; j++) {\n      if (!isOutput(text, ifMatches[j].index) && !isOption(text, ifMatches[j].index)) {\n        ifs.push(ifMatches[j].index);\n      }\n    }\n\n    for (let j = 0; j < endIfMatches.length; j++) {\n      if (!isOutput(text, endIfMatches[j].index) && !isOption(text, endIfMatches[j].index)) {\n        endifs.push(endIfMatches[j].index);\n      }\n    }\n\n    // Ensures the number of if and endif statements match.\n    if (ifs.length !== endifs.length && interpreter.current) {\n      interpreter.current.setErrorMessage(\n        `Parser: found ${ifs.length} if tokens, but ${endifs.length} ` +\n          \"endif tokens. Ifs and endifs must match in number.\"\n      );\n    }\n\n    // Creates a list of all if and endif statements by index, where ifs are encoded by 0 and endifs by 1.\n    let allMatches: { item1: number; item2: number }[] = [];\n\n    for (let j = 0; j < ifs.length; j++) {\n      allMatches.push({ item1: ifs[j], item2: 0 });\n    }\n\n    for (let j = 0; j < endifs.length; j++) {\n      allMatches.push({ item1: endifs[j], item2: 1 });\n    }\n\n    // Orders all ifs and endifs in ascending order by index.\n    allMatches = allMatches.sort((a, b) => (a.item1 > b.item1 ? 1 : -1));\n\n    // Iterates over all ifs and endifs to create a tree.\n    for (let j = 0; j < allMatches.length; j++) {\n      // The index, condition, and type (if, endif) of the match.\n      let elemBegin = allMatches[j].item1;\n      let elemType = allMatches[j].item2;\n      let cond = text.substring(elemBegin);\n      cond = cond.slice(0, cond.indexOf(\"\\n\"));\n\n      // The index and condition of the previous if.\n      let prevIfBegin = -1;\n      let prevIfCond = \"\";\n\n      for (let k = j - 1; k >= 0; k--) {\n        if (allMatches[k].item2 === 0) {\n          prevIfBegin = allMatches[k].item1;\n          prevIfCond = text.substring(prevIfBegin);\n          prevIfCond = prevIfCond.slice(0, prevIfCond.indexOf(\"\\n\"));\n          break;\n        }\n      }\n\n      // The index and condition of the previous endif.\n      let prevEndIfBegin = -1;\n      let prevEndIfCond = \"\";\n\n      for (let k = j - 1; k >= 0; k--) {\n        if (allMatches[k].item2 === 1) {\n          prevEndIfBegin = allMatches[k].item1;\n          prevEndIfCond = text.substring(prevEndIfBegin);\n          prevEndIfCond = prevEndIfCond.slice(0, prevEndIfCond.indexOf(\"\\n\"));\n          break;\n        }\n      }\n\n      // Uses the previous if/endif; whichever is closer.\n      let prevElemBegin = prevEndIfBegin > prevIfBegin ? prevEndIfBegin : prevIfBegin;\n      let prevElemCond = prevElemBegin === prevEndIfBegin ? prevEndIfCond : prevIfCond;\n\n      // Handles if keywords.\n      if (elemType === 0) {\n        // Adds text between matched keywords. If text was simply concatenated, it wouldn't preserve order.\n        if (j !== 0 && prevIfBegin !== -1) {\n          // From if to last if.\n          let textNode = new StoryParseNode();\n          textNode.parent = node;\n\n          // Determines if the length is negative.\n          const prevElemEnd = prevElemBegin + prevElemCond.length;\n\n          if (elemBegin - prevElemEnd < 0) {\n            if (interpreter.current) {\n              interpreter.current.setErrorMessage(\n                `Parser: In '${text.substring(prevElemBegin)}', cannot specify multiple if tokens on one line.`\n              );\n            }\n\n            continue;\n          }\n\n          textNode.text += text.substring(prevElemEnd, elemBegin);\n\n          if (!(textNode.children.length === 0 && textNode.condition.trim() === \"\" && textNode.text.trim() === \"\")) {\n            node.children.push(textNode);\n          }\n        } else if (elemBegin > 0) {\n          // From start of entry to if.\n          const textNode = new StoryParseNode();\n          textNode.parent = node;\n          textNode.text += text.substring(0, elemBegin);\n\n          if (!(textNode.children.length === 0 && textNode.condition.trim() === \"\" && textNode.text.trim() === \"\")) {\n            node.children.push(textNode);\n          }\n        }\n\n        // Creates a child node and sets its parent.\n        const newChild = new StoryParseNode();\n        newChild.parent = node;\n\n        // Adds the found if statement to the conditions list.\n        newChild.condition = cond;\n\n        // Adds the child node and moves node to point to it.\n        if (!(newChild.children.length === 0 && newChild.condition.trim() === \"\" && newChild.text.trim() === \"\")) {\n          node.children.push(newChild);\n        }\n\n        node = newChild;\n        depth++;\n      }\n\n      // Handles endif keywords.\n      else if (elemType === 1) {\n        // The parser always returns since it cannot continue.\n        if (depth < 0) {\n          interpreter.current?.setEntries({});\n\n          if (interpreter.current) {\n            interpreter.current.setErrorMessage(\n              \"Parser: an extra endif token was encountered (if/endif # \" + (j + 1) + \").\"\n            );\n          }\n\n          return;\n        }\n\n        // Adds text between matched keywords.\n        const textNode = new StoryParseNode();\n        textNode.parent = node;\n\n        // Determines if the length is negative.\n        const prevElemEnd = prevElemBegin + prevElemCond.length;\n        if (elemBegin - prevElemEnd < 0) {\n          if (interpreter.current) {\n            interpreter.current.setErrorMessage(\n              \"Parser: In '\" + text.substring(prevElemBegin) + \"', cannot specify multiple endif tokens on one line.\"\n            );\n          }\n\n          continue;\n        }\n\n        textNode.text += text.substring(prevElemEnd, elemBegin);\n\n        if (!(textNode.children.length === 0 && textNode.condition.trim() === \"\" && textNode.text.trim() === \"\")) {\n          node.children.push(textNode);\n        }\n\n        // Points to the node's parent if possible.\n        if (node.parent !== null) {\n          node = node.parent;\n        } else {\n          interpreter.current?.setEntries({});\n\n          if (interpreter.current) {\n            interpreter.current.setErrorMessage(\"Parser: an extra endif token was encountered (endif #\" + j + \").\");\n          }\n\n          return;\n        }\n      }\n    }\n\n    // Adds all text after last if/endif to the first node.\n    if (allMatches.length > 0) {\n      let lastElemBegin = allMatches[allMatches.length - 1].item1;\n      let lastCond = text.substring(lastElemBegin);\n      let lastCondLength = lastCond.indexOf(\"\\n\");\n\n      /**\n       * Since commands must be on their own lines, if there is no newline after the last command,\n       * it's the last line in the entry. This means there's nothing after it. So the last\n       * condition executes only if this is false.\n       */\n      if (lastCondLength !== -1) {\n        let textNode = new StoryParseNode();\n        textNode.parent = root;\n        textNode.text += text.substring(lastElemBegin + lastCondLength);\n\n        if (!(textNode.children.length === 0 && textNode.condition.trim() === \"\" && textNode.text.trim() === \"\")) {\n          root.children.push(textNode);\n        }\n      }\n    } else {\n      // Adds all text to the first node in the case that there were no ifs.\n      root.text += text;\n    }\n\n    // Adds the fully constructed entry.\n    parsed[entriesKeys[i]] = root;\n  }\n\n  interpreter.current?.setEntriesWithFork(parsed, forkToLoad ?? \"\");\n}\n","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { StoryInterpreterC, StoryInterpreter } from \"../../parse-story/storyInterpreter\";\nimport { parseStory } from \"../../parse-story/storyParser\";\nimport { IRootState } from \"../../store\";\n\nconst mapStateToProps = (state: IRootState) => {\n  return {\n    storyToParse: state.viewEdit.storyToParse,\n  };\n};\n\ntype RunnerViewOwnProps = {};\n\ntype CombinedProps = RunnerViewOwnProps & ReturnType<typeof mapStateToProps>;\n\nexport class RunnerViewC extends React.Component<RunnerViewOwnProps> {\n  private interpreterRef: React.RefObject<StoryInterpreterC>;\n\n  constructor(props: RunnerViewOwnProps) {\n    super(props);\n\n    this.interpreterRef = React.createRef<StoryInterpreterC>();\n  }\n\n  public componentDidUpdate() {\n    try {\n      parseStory((this.props as CombinedProps).storyToParse, this.interpreterRef);\n    } catch (ex) {\n      if (this.interpreterRef.current && typeof ex === \"string\") {\n        this.interpreterRef.current.setErrorMessage(ex);\n      } else if (this.interpreterRef.current && ex instanceof Error) {\n        this.interpreterRef.current.setErrorMessage(ex.message);\n      } else {\n        console.error(\"Reference to interpreter element was undefined. An additional error follows.\");\n        console.error(ex);\n      }\n    }\n  }\n\n  public render() {\n    return <StoryInterpreter ref={this.interpreterRef} />;\n  }\n}\n\nexport const RunnerView = connect(mapStateToProps)(RunnerViewC);\n","import * as React from \"react\";\nimport { idEditorWrapper, idRunnerWrapper } from \"../../common/identifiers\";\nimport { mainViewWrapperStyle, mainViewEditorStyle, mainViewRunnerStyle } from \"../../common/styles/controlStyles\";\nimport { connect } from \"react-redux\";\nimport { IRootState } from \"../../store\";\nimport { EditorView } from \"../editor/EditorView\";\nimport { MenuBar } from \"../menu/MenuBar\";\nimport { RunnerView } from \"../runner/RunnerView\";\n\nconst mapStateToProps = (state: IRootState) => {\n  return {\n    theme: state.settings.theme,\n  };\n};\n\nexport type RunnerEditorOwnProps = {};\n\ntype CombinedProps = RunnerEditorOwnProps & ReturnType<typeof mapStateToProps>;\n\nexport class RunnerEditorViewC extends React.Component<RunnerEditorOwnProps> {\n  public componentDidMount() {\n    document.body.style.margin = \"0px\";\n  }\n\n  public render() {\n    return (\n      <>\n        <MenuBar />\n        <div className={mainViewWrapperStyle}>\n          <div id={idEditorWrapper} className={mainViewEditorStyle}>\n            <EditorView />\n          </div>\n          <div id={idRunnerWrapper} style={mainViewRunnerStyle((this.props as CombinedProps).theme.theme) as object}>\n            <RunnerView />\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n\nexport const RunnerEditorView = connect(mapStateToProps)(RunnerEditorViewC);\n","import { applyMiddleware, combineReducers, createStore } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport { ISettingState, settings } from \"./common/settings/settings.reducers\";\nimport { IPersistenceState, persistence } from \"./common/storage/persistence.reducers\";\nimport { IViewEditState, viewEdit } from \"./common/redux/viewedit.reducers\";\n\n/** All reducers. */\nexport interface IRootState {\n  persistence: IPersistenceState;\n  settings: ISettingState;\n  viewEdit: IViewEditState;\n}\n\nconst rootReducer = combineReducers({\n  persistence,\n  settings,\n  viewEdit,\n});\n\n/** Provides global access to the static Redux store. */\nexport const store = createStore(rootReducer, undefined, applyMiddleware(thunk));\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { Provider } from \"react-redux\";\nimport { initializeIcons } from \"office-ui-fabric-react\";\nimport { Route, Switch } from \"react-router\";\nimport { HashRouter } from \"react-router-dom\";\nimport { listenForShortcuts } from \"./common/commands/shortcutManager\";\nimport { RunnerEditorView } from \"./gui/runner-editor/RunnerEditorView\";\nimport { store } from \"./store\";\n\ninitializeIcons(); // Ensures all icons are available.\nlistenForShortcuts(); // Hooks up global key listeners.\n\n// Renders based on virtual URL.\nconst routing = (\n  <Switch>\n    <Route path=\"/\" component={RunnerEditorView} />\n  </Switch>\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <HashRouter basename=\"/\">{routing}</HashRouter>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n","import { commandIds, commands, ICommand, invokeCommand } from \"./commands\";\n\n/** A sequence of consecutive keystrokes that define a shortcut. */\nexport interface IShortcut {\n  /** If defined, this represents a custom preferred shortcut defined by the user. */\n  customSequence?: IShortcutStep[];\n\n  disabled?: boolean;\n\n  /**\n   * Used only if no custom sequence is defined. This is used to clear user-defined shortcuts. An\n   * empty array signifies the shortcut was created entirely by the user.\n   */\n  originalSequence: IShortcutStep[];\n}\n\n/** A single key with optional modifier keys requirements. */\nexport interface IShortcutStep {\n  key: string;\n  usesAlt?: boolean;\n  usesCtrl?: boolean;\n  usesShift?: boolean;\n}\n\ninterface IMatchProgress {\n  shortcut: IShortcut;\n  step: number;\n}\n\n/** Returns a string representation of the provided shortcut. */\nexport const getKeyTip = (shortcut: IShortcutStep[]) => {\n  let shortcutString = \"\";\n\n  shortcut.forEach((step: IShortcutStep, index: number) => {\n    if (index !== 0) {\n      shortcutString += \", \";\n    }\n\n    if (step.usesCtrl === true) {\n      shortcutString += \"Ctrl + \";\n    }\n    if (step.usesShift === true) {\n      shortcutString += \"Shift + \";\n    }\n    if (step.usesAlt === true) {\n      shortcutString += \"Alt + \";\n    }\n\n    shortcutString += step.key.toUpperCase();\n  });\n\n  return shortcutString;\n};\n\n/** Returns a string representation of the first active shortcut for the given command. */\nexport const getFirstKeyTip = (command: ICommand) => {\n  if (command.shortcuts.length === 0) {\n    return \"\";\n  }\n\n  if (command.shortcuts[0].customSequence !== undefined) {\n    return getKeyTip(command.shortcuts[0].customSequence);\n  }\n\n  return getKeyTip(command.shortcuts[0].originalSequence);\n};\n\n/** Begins listening to key presses and invokes matching commands. */\nexport const listenForShortcuts = () => {\n  const commandKeys = Object.keys(commands) as Array<keyof typeof commands>;\n  const commandsWithMatchProgress: Partial<{ [key in commandIds]: IMatchProgress[] }> = {};\n\n  // Tracks progress towards executing a command.\n  commandKeys.forEach((key: commandIds) => {\n    commandsWithMatchProgress[key] = commands[key].shortcuts.map((shortcut: IShortcut) => ({\n      shortcut,\n      step: 0,\n    }));\n  });\n\n  window.addEventListener(\"keypress\", (ev: KeyboardEvent) => {\n    // For every shortcut on every command.\n    commandKeys.forEach((key: commandIds) => {\n      const commandProgress = commandsWithMatchProgress[key]!;\n\n      // tslint:disable:prefer-for-of Better performance with return.\n      for (let i = 0; i < commandProgress.length; i++) {\n        const progress = commandProgress[i];\n\n        if (progress.shortcut.disabled === true) {\n          continue;\n        }\n\n        // Which keyboard sequence is actually bound to the command.\n        const sequence =\n          progress.shortcut.customSequence !== undefined\n            ? progress.shortcut.customSequence\n            : progress.shortcut.originalSequence;\n\n        if (sequence.length === 0) {\n          continue;\n        }\n\n        // Resets progress towards executing a command if the pressed key is out of sequence.\n        if (\n          sequence[progress.step].key !== ev.key.toUpperCase() ||\n          Boolean(sequence[progress.step].usesAlt) !== ev.altKey ||\n          Boolean(sequence[progress.step].usesCtrl) !== ev.ctrlKey ||\n          Boolean(sequence[progress.step].usesShift) !== ev.shiftKey\n        ) {\n          progress.step = 0;\n        }\n\n        // Increments the sequence progress or executes the command and returns to avoid redundant\n        // execution.\n        else {\n          if (progress.step === sequence.length - 1) {\n            invokeCommand(key);\n            progress.step = 0;\n            return;\n          }\n\n          progress.step++;\n        }\n      }\n    });\n  });\n};\n","import { IToken } from \"./utils\";\n\n/** A bool token to store a bool literal. */\nexport class TokenBool implements IToken {\n  public strForm: string;\n  public value: boolean;\n\n  constructor(value: boolean) {\n    this.strForm = value.toString();\n    this.value = value;\n  }\n\n  /** Returns true if all properties of each token are the same. */\n  public equals(obj: TokenBool) {\n    return this.strForm === obj.strForm && this.value === obj.value;\n  }\n}\n","import { getStrings } from \"./localization/Localization\";\nimport { loadTheme, ITheme } from \"office-ui-fabric-react/lib/Styling\";\n\nexport interface ISupportedTheme {\n  localizedName: string;\n  theme: ITheme;\n}\n\nexport interface ISupportedThemes {\n  light: ISupportedTheme;\n  dark: ISupportedTheme;\n}\n\nconst strings = getStrings();\n\n/** Colors with associated themes. */\nexport const themes: ISupportedThemes = {\n  dark: {\n    localizedName: strings.ThemeDark,\n    theme: loadTheme({\n      palette: {\n        black: \"#ffffff\",\n        neutralDark: \"#ececec\",\n        neutralLight: \"#515151\",\n        neutralLighter: \"#222222\",\n        neutralLighterAlt: \"#090909\",\n        neutralPrimary: \"#dcdcdc\",\n        neutralPrimaryAlt: \"#bbbbbb\",\n        neutralQuaternary: \"#d0d0d0\",\n        neutralQuaternaryAlt: \"#dadada\",\n        neutralSecondary: \"#9f9f9f\",\n        neutralTertiary: \"#666666\",\n        neutralTertiaryAlt: \"#ffffff\",\n        themeDark: \"#ebebeb\",\n        themeDarkAlt: \"#dbdbdb\",\n        themeDarker: \"#ffffff\",\n        themeLight: \"#3f3f3f\",\n        themeLighter: \"#212121\",\n        themeLighterAlt: \"#000000\",\n        themePrimary: \"#bfbfbf\",\n        themeSecondary: \"#868686\",\n        themeTertiary: \"#5a5a5a\",\n        white: \"#000000\",\n      },\n    }),\n  },\n  light: {\n    localizedName: strings.ThemeLight,\n    theme: loadTheme({\n      palette: {\n        black: \"#000000\",\n        neutralDark: \"#131313\",\n        neutralLight: \"#aeaeae\",\n        neutralLighter: \"#dddddd\",\n        neutralLighterAlt: \"#f6f6f6\",\n        neutralPrimary: \"#232323\",\n        neutralPrimaryAlt: \"#444444\",\n        neutralQuaternary: \"#2f2f2f\",\n        neutralQuaternaryAlt: \"#252525\",\n        neutralSecondary: \"#606060\",\n        neutralTertiary: \"#999999\",\n        neutralTertiaryAlt: \"#000000\",\n        themeDark: \"#141414\",\n        themeDarkAlt: \"#242424\",\n        themeDarker: \"#000000\",\n        themeLight: \"#c0c0c0\",\n        themeLighter: \"#dedede\",\n        themeLighterAlt: \"#ffffff\",\n        themePrimary: \"#404040\",\n        themeSecondary: \"#797979\",\n        themeTertiary: \"#a5a5a5\",\n        white: \"#ffffff\",\n      },\n    }),\n  },\n};\n","/**\n * The values of entries in this file are guaranteed to remain the same so that they form a\n * reliable public API that enables browser plugins and other script modifications to work with\n * the editor & runner software. Do not change them.\n */\n\n/** Identifies the source input field for direct editing. */\nexport const idEditorInputfield = \"editor-inputfield\";\n\n/** Wraps the div that contains everything related to the editor. */\nexport const idEditorWrapper = \"editor-wrapper\";\n\n/** Wraps the content of the current page. */\nexport const idRunnerContent = \"runner-content\";\n\n/** Indentifies the textbox while playing the game, if available. */\nexport const idRunnerInputfield = \"runner-inputfield\";\n\n/** Wraps the log of all previous content (both player input and game output). */\nexport const idRunnerLog = \"runner-log\";\n\n/** Wraps the hyperlink options list. */\nexport const idRunnerOptions = \"runner-options\";\n\n/** Identifies the special restart option. */\nexport const idRunnerOptionRestart = \"runner-option-restart\";\n\n/** Wraps the div that contains everything related to the runner. */\nexport const idRunnerWrapper = \"runner-wrapper\";\n\n/** Identifies an element in the runner designated as representing player input. */\nexport const idRunnerInputElement = \"runner-input\";\n\n/** Identifies an element in the runner designated as representing an option. */\nexport const idRunnerOptionElement = \"runner-option\";\n\n/** Identifies an element in the runner designated as representing game output. */\nexport const idRunnerOutputElement = \"runner-output\";\n","import { IToken } from \"./utils\";\n\n/** A numeric token to store an identifer. */\nexport class TokenId implements IToken {\n  public strForm: string;\n  public value: number | string | boolean | null;\n\n  constructor(name: string, value: number | string | boolean | null) {\n    this.strForm = name;\n    this.value = value;\n  }\n\n  /** Returns true if all properties of each token are the same. */\n  public equals(obj: TokenId) {\n    return this.strForm === obj.strForm && this.value === obj.value;\n  }\n}\n","import { IToken, tokenEvalFunc } from \"./utils\";\n\n/** A symbolic token to store a general symbol. */\nexport class TokenFunc implements IToken {\n  public strForm: string;\n  public numArgs: number;\n  public function: tokenEvalFunc;\n\n  constructor(name: string, numberOfArgs: number, operation: tokenEvalFunc) {\n    this.strForm = name;\n    this.numArgs = numberOfArgs;\n    this.function = operation;\n  }\n\n  /** Returns true if all properties of each token are the same. */\n  public equals(obj: TokenFunc) {\n    return this.strForm === obj.strForm && this.numArgs === obj.numArgs && this.function === obj.function;\n  }\n}\n","let uniqueActionType = Number.MIN_SAFE_INTEGER;\n\n/**\n * Action types must be unique across all reducers.\n * This assigns a globally unique id every time it's called.\n */\nexport const getActionGuid = () => {\n  return (++uniqueActionType).toString();\n};\n","/** Represents a single token for evaluation. */\nexport interface IToken {\n  strForm: string;\n}\n\n/**\n * When this function is used, the input numbers can be accessed as an array of objects. As many as\n * provided by the number of arguments may be used.\n */\nexport type tokenEvalFunc = (tokens: IToken[]) => IToken | null;\n\n/** Matches an integer with optional negative sign in front. */\nexport const integerRegex = /^-*\\d+$/g;\n\n/** Matches a valid decimal number. */\nexport const numberRegex = /^-?(\\d+\\.?\\d*|\\d*\\.?\\d+)$/g;\n","import { getActionGuid } from \"./reduxTools\";\n\nexport const actions = {\n  rerenderStory: getActionGuid(),\n  saveAndRunStory: getActionGuid(),\n  updateStory: getActionGuid(),\n};\n\n/** Re-renders the visual state of the interpreter.  */\nexport const rerenderStory = {\n  type: actions.rerenderStory,\n};\n\n/** Runs the story and save as needed. */\nexport const saveAndRunStory = (story: string) => {\n  return {\n    story,\n    type: actions.saveAndRunStory,\n  };\n};\n\n/** Updates the contents of the story. */\nexport const updateStory = (story: string) => {\n  return {\n    story,\n    type: actions.updateStory,\n  };\n};\n","import { combineReducers, Dispatch } from \"redux\";\nimport { actions, updateStory, saveAndRunStory, rerenderStory } from \"./viewedit.actions\";\n\n/**\n * Contains the up-to-date text for the story, which is updated when loading a story, adding to\n * it with GUI controls, trying to run the story after editing the source, or blurring the textarea\n * after editing the source.\n */\nconst story = (state = \"\", action: ReturnType<typeof updateStory | typeof saveAndRunStory>) => {\n  if (action.type === actions.updateStory) {\n    return action.story;\n  }\n  if (action.type === actions.saveAndRunStory) {\n    return action.story;\n  }\n\n  return state;\n};\n\n/**\n * Contains the copy of the story from when it was last executed, which may be older than the\n * current story. Updating this causes the story to execute again.\n */\nconst storyToParse = (state = \"\", action: ReturnType<typeof saveAndRunStory>) => {\n  if (action.type === actions.saveAndRunStory) {\n    return action.story;\n  }\n\n  return state;\n};\n\n/** Uses a number to indicate that the runner should re-render. */\nconst storyRerenderToken = (state = 0, action: typeof rerenderStory) => {\n  if (action.type === actions.rerenderStory) {\n    return state + 1;\n  }\n\n  return state;\n};\n\n/** Sets the story that the user has typed. */\nexport const dispatchSetStory = (dispatch: Dispatch) => (story: string) => {\n  dispatch(updateStory(story));\n};\n\n/** Parses the story as currently written, updating the stored story to match the provided string. */\nexport const dispatchSaveAndRunStory = (dispatch: Dispatch) => (story: string) => {\n  dispatch(saveAndRunStory(story));\n};\n\n/** Causes the story to re-render. */\nexport const dispatchRerenderStory = (dispatch: Dispatch) => () => {\n  dispatch(rerenderStory);\n};\n\n// Combine reducers and typescript definition.\nexport interface IViewEditState {\n  story: string;\n  storyRerenderToken: string;\n  storyToParse: string;\n}\n\nexport const viewEdit = combineReducers({\n  story,\n  storyRerenderToken,\n  storyToParse,\n});\n","import { ILocalizedStringSets } from \"./Localization\";\n\n// tslint:disable:max-line-length It's actually more legible to keep strings on one line here.\n\n/** All strings localized in all locales. */\nexport const localizedStrings: ILocalizedStringSets = {\n  \"en-us\": {\n    ApplicationName: \"Joshua Tree\",\n    ApplicationNameAndVersion: (appName: string, appVersion: string) => `${appName} version ${appVersion}`,\n    LanguageCodeName: \"English (United States)\",\n    MenuFile: \"File\",\n    MenuFileNew: \"New\",\n    MenuFileOpen: \"Open\",\n    MenuFileSave: \"Save\",\n    ThemeDark: \"Dark\",\n    ThemeLight: \"Light\",\n    ThemeDropdownText: (themeName: string) => `${themeName} theme`,\n    TipLanguage: \"Language\",\n    TipNavigateCommandBar: \"Use left and right arrow keys to navigate between commands.\",\n    TipTheme: \"Theme\",\n  },\n};\n","import { IToken, numberRegex } from \"./utils\";\n\n/** A numeric token to store a numeric literal. */\nexport class TokenNum implements IToken {\n  public strForm: string;\n  public value: number;\n\n  constructor(value: string | number) {\n    if (typeof value === \"string\") {\n      this.strForm = value;\n\n      if (!numberRegex.test(value)) {\n        throw new Error(\"Parser: The expression '\" + value + \"' is not a valid number.\"); // TODO: localize.\n      }\n\n      this.value = parseFloat(value);\n    } else {\n      this.strForm = value.toString();\n      this.value = value;\n    }\n  }\n\n  /** Returns true if all properties of each token are the same. */\n  public equals(obj: TokenNum) {\n    return this.strForm === obj.strForm && this.value === obj.value;\n  }\n}\n","import { localizedStrings } from \"./LocalizedStrings\";\n\n/**\n * Gets the nearest supported locale from the browser using navigator.languages or\n * navigator.language. This is accurate for Firefox and Chrome. IE and Edge return the OS language\n * instead and only return the browser language from an Accept-Languages header. This is considered\n * good enough though. Defaults to en-US if the preferred locale isn't listed.\n */\nexport const getSupportedLocale = (): keyof ILocalizedStringSets => {\n  let defaultLocale = \"en-us\";\n\n  // This is an experimental feature at time of writing, so it may be undefined.\n  if (navigator.languages !== undefined) {\n    for (const lang of navigator.languages) {\n      const langParts = lang.toLowerCase().split(\"-\");\n      const language = langParts[0];\n      const region = langParts.length > 1 ? langParts[1] : \"\";\n\n      // If a language but not the dialect for a region is available, use it instead.\n      if (`${language}-${region}` in supportedLocales) {\n        defaultLocale = `${language}-${region}`;\n        break;\n      } else if (`${language}` in supportedLocales) {\n        defaultLocale = `${language}`;\n        break;\n      }\n    }\n  } else {\n    const language = navigator.language.toLowerCase();\n\n    if (language in supportedLocales) {\n      defaultLocale = language;\n    }\n  }\n\n  return supportedLocales[defaultLocale as keyof ISupportedLocales];\n};\n\n/** Returns the strings for the given locale, or the assumed locale if not provided. */\nexport const getStrings = (locale?: keyof ISupportedLocales): ILocalizedStrings => {\n  return localizedStrings[supportedLocales[locale || getSupportedLocale()] as keyof typeof localizedStrings];\n};\n\n/** All locales to be accepted as valid. */\nexport interface ISupportedLocales {\n  \"en\": keyof ILocalizedStringSets;\n  \"en-us\": keyof ILocalizedStringSets;\n}\n\n/** A list of valid locales as keys, and the locales they default to as values. */\nexport const supportedLocales: ISupportedLocales = {\n  \"en\": \"en-us\",\n  \"en-us\": \"en-us\",\n};\n\n/** All locales with direct support. */\nexport interface ILocalizedStringSets {\n  \"en-us\": ILocalizedStrings;\n}\n\n/** All strings to be localized per locale. */\nexport interface ILocalizedStrings {\n  ApplicationName: string;\n  ApplicationNameAndVersion: (appName: string, appVersion: string) => string;\n  LanguageCodeName: string;\n  MenuFile: string;\n  MenuFileNew: string;\n  MenuFileOpen: string;\n  MenuFileSave: string;\n  ThemeDark: string;\n  ThemeLight: string;\n  ThemeDropdownText: (themeName: string) => string;\n  TipLanguage: string;\n  TipNavigateCommandBar: string;\n  TipTheme: string;\n}\n","import { CSSProperties } from \"react\";\nimport { IButtonStyles } from \"office-ui-fabric-react/lib/components/Button/Button.types\";\nimport { ITheme, mergeStyles, IStyle } from \"office-ui-fabric-react/lib/Styling\";\nimport { IDropdownStyles } from \"office-ui-fabric-react/lib/components/Dropdown/Dropdown.types\";\nimport { ICommandBarStyles } from \"office-ui-fabric-react/lib/components/CommandBar/CommandBar.types\";\nimport { IIconStyles } from \"office-ui-fabric-react/lib/components/Icon/Icon.types\";\n\n/**\n * Returns a style for a dropdown in the command bar. If there are items to the right, renders a\n * thin border between.\n */\nexport const commandBarDropdownButtonStyle = (): IButtonStyles => {\n  return { root: { alignSelf: \"stretch\" } };\n};\n\n/**\n * Returns a style for a command bar dropdown that renders a border to the right of the item.\n */\nexport const commandBarDropdownSeparatorStyle = (theme: ITheme): Partial<IDropdownStyles> => {\n  return {\n    root: {\n      borderColor: theme.semanticColors.bodyText,\n      borderRightStyle: \"solid\",\n      borderWidth: \"1px\",\n    },\n  };\n};\n\n/** Returns a style for a dropdown in the command bar. */\nexport const commandBarDropdownStyle = (theme: ITheme, propStyles: IDropdownStyles): Partial<IDropdownStyles> => {\n  return {\n    caretDownWrapper: mergeStyles(\n      { alignSelf: \"center\", position: \"relative\", right: \"20px\", width: \"0px\" },\n      propStyles?.caretDownWrapper\n    ),\n    dropdown: mergeStyles(\n      {\n        display: \"flex\",\n        height: \"100%\",\n      },\n      propStyles?.dropdown\n    ),\n    dropdownItem: mergeStyles({ ...theme.fonts.large }, propStyles?.dropdownItem),\n    dropdownItemSelected: mergeStyles({ ...theme.fonts.large }, propStyles?.dropdownItemSelected),\n    root: mergeStyles({ alignSelf: \"stretch\" }, propStyles?.root),\n    title: mergeStyles(\n      {\n        height: \"100%\",\n        border: \"0\",\n        borderRadius: \"unset\",\n        display: \"flex\",\n        alignItems: \"center\",\n      },\n      propStyles?.title\n    ),\n  };\n};\n\n/**\n * Returns a style for a command bar item definition that increase button space. If there are\n * items to the right, renders a thin border between.\n */\nexport const commandBarItemStyle = (theme: ITheme, itemsOnRight?: boolean): string => {\n  if (itemsOnRight) {\n    return mergeStyles(theme.fonts.large, {\n      paddingLeft: \"12px\",\n      paddingRight: \"12px\",\n      borderColor: theme.semanticColors.bodyText,\n      borderRightStyle: \"solid\",\n      borderWidth: \"1px\",\n    });\n  }\n\n  return mergeStyles(theme.fonts.large, {\n    paddingLeft: \"12px\",\n    paddingRight: \"12px\",\n  });\n};\n\n/**\n * Returns a style for a command bar that tries to maximize the size of the items within it, for a\n * simplified appearance that is more mobile-friendly than the default style. Items within the\n * command bar should be styled to fill the command bar vertically, and take enough space to be\n * easy to interact with.\n */\nexport const commandBarStyle: ICommandBarStyles = {\n  root: {\n    alignItems: \"center\",\n    height: \"4vh\",\n    padding: \"0px\",\n  },\n  primarySet: {\n    alignSelf: \"stretch\",\n  },\n  secondarySet: {\n    alignSelf: \"stretch\",\n  },\n};\n\n/** Returns a style for the editor text area component. */\nexport const editorTextAreaStyle = (theme: ITheme): object => {\n  return {\n    color: theme.semanticColors.bodyText,\n    backgroundColor: theme.semanticColors.bodyStandoutBackground,\n    borderColor: theme.semanticColors.bodyText,\n    borderStyle: \"solid\",\n    borderWidth: \"1px\",\n    height: \"90vh\",\n    padding: 0,\n    resize: \"none\",\n    width: \"100%\",\n  };\n};\n\n/** Fonts to use in case other fonts are not available. */\nexport const fallbackFontStack = \"Calibri; Times New Roman; Courier New; sans-serif\";\n\n/** Display none. */\nexport const hiddenAndInaccessible = mergeStyles({\n  display: \"none\",\n});\n\n/** Separates an icon from text that follows it.  */\nexport const iconSpaceBeforeTextStyle: IIconStyles = {\n  root: {\n    marginRight: \"8px\",\n  },\n};\n\n/** Sets up the div containing the editor textarea. */\nexport const mainViewEditorStyle = mergeStyles({ height: \"90vh\", margin: \"0 4px 0 0\", width: \"50vw\" });\n\n/** Styles the runner to give it a border and make overflowing generated content scroll. */\nexport const mainViewRunnerStyle = (theme: ITheme): IStyle => {\n  return {\n    borderColor: theme.semanticColors.bodyText,\n    borderStyle: \"solid\",\n    borderWidth: \"1px\",\n    margin: \"0 0 0 4px\",\n    overflowY: \"scroll\",\n    width: \"50vw\",\n  };\n};\n\n/** Sets up the div containing the editor and runner so they stretch horizontally to full size. */\nexport const mainViewWrapperStyle = mergeStyles({ display: \"flex\", alignItems: \"stretch\" });\n\n/** Styles the input textbox of the runner. */\nexport const runnerInputTextboxStyle = (theme: ITheme): CSSProperties => {\n  return {\n    backgroundColor: theme.semanticColors.bodyBackground,\n    color: theme.semanticColors.bodyText,\n    alignSelf: \"stretch\",\n    flexShrink: 1,\n    fontSize: \"16px\",\n    height: \"32px\",\n  };\n};\n\n/** Styles the innermost div that contains all generated content in the runner. */\nexport const runnerOutputWrapperStyle = mergeStyles({ flexGrow: 1, margin: \"4px\" });\n\n/** Styles the div containing all controls associated to the runner so they display properly. */\nexport const runnerWrapperStyle = mergeStyles({ display: \"flex\", flexDirection: \"column\", height: \"90vh\" });\n\n/** The default style of echoed player input reminder text, which changes at runtime. */\nexport const runnerDefaultInputStyle = (theme: ITheme) => {\n  return {\n    color: theme.semanticColors.warningText,\n    fontFamily: fallbackFontStack,\n    fontSize: \"16px\",\n    fontWeight: 400,\n  };\n};\n\n/** The default style of options when not highlighted in the runner, which changes at runtime. */\nexport const runnerDefaultOptionsStyle = (theme: ITheme) => {\n  return {\n    color: theme.semanticColors.primaryButtonText,\n    fontFamily: fallbackFontStack,\n    fontSize: \"16px\",\n    fontWeight: 400,\n  };\n};\n\n/** The default style of options when highlighted in the runner, which changes at runtime. */\nexport const runnerDefaultOptionsHighlightStyle = (theme: ITheme) => {\n  return {\n    color: theme.semanticColors.primaryButtonTextHovered,\n  };\n};\n\n/** The default style of output in the runner, which changes at runtime. */\nexport const runnerDefaultOutputStyle = (theme: ITheme) => {\n  return {\n    color: theme.semanticColors.bodyText,\n    fontFamily: fallbackFontStack,\n    fontSize: theme.fonts.large.fontSize,\n    fontWeight: 400,\n  };\n};\n\n/** The default style of the runner background, which changes at runtime. */\nexport const runnerDefaultWrapperStyle = (theme: ITheme) => {\n  return {\n    backgroundColor: theme.semanticColors.bodyStandoutBackground,\n  };\n};\n"],"sourceRoot":""}