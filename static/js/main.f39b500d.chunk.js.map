{"version":3,"sources":["parse-story/storyInterpreter.tsx","common/random.ts","parse-expressions/Associativity.ts","parse-expressions/Placements.ts","parse-expressions/TokenOp.ts","parse-expressions/TokenSym.ts","parse-expressions/Parser.ts","common/redux/reduxTools.ts","common/settings/settings.actions.ts","common/settings/settings.reducers.ts","common/storage/persistence.ts","common/storage/persistence.actions.ts","common/storage/persistence.reducers.ts","gui/menu/MenuBarDropdown.tsx","gui/menu/MenuBar.tsx","common/commands/commands.ts","gui/editor/EditorView.tsx","parse-story/storyParseNode.ts","parse-story/storyParser.ts","gui/runner/RunnerView.tsx","gui/runner-editor/RunnerEditorView.tsx","common/redux/playerStorySettings.actions.ts","common/redux/playerStorySettings.reducers.ts","store.ts","index.tsx","common/commands/shortcutManager.ts","common/styles/controlStyles.ts","parse-expressions/TokenBool.ts","common/identifiers.ts","common/themes.ts","parse-expressions/TokenId.ts","parse-expressions/TokenFunc.ts","common/localization/Localization.ts","parse-expressions/utils.ts","common/redux/viewedit.actions.ts","common/redux/viewedit.reducers.ts","common/styles/interpreterStyles.ts","parse-expressions/TokenNum.ts","common/localization/LocalizedStrings.ts","common/redux/currentRunnerSettings.actions.ts","common/redux/currentRunnerSettings.reducers.ts","common/redux/authorStorySettings.actions.ts","common/redux/authorStorySettings.reducers.ts"],"names":["random","uniqueKeyCounter","Number","MIN_SAFE_INTEGER","whitespaceRegex","colorRegex","singleDigitRegex","escapeBraceRegex","escapeNoBraceRegex","exprParser","Parser","StoryInterpreterC","props","actions","content","contentCached","currentOptionStyles","currentOptionHighlightStyles","currentOutputStyles","entries","errorMessage","fork","log","logCached","options","optionsCached","stopEvaluation","textboxHidden","timers","variables","variablesPrev","getRestartLink","combinedProps","addOption","authorStorySettings","authorStoryStrings","restartLinkText","strings","RunnerRestart","restartGame","idRunnerOptionRestart","onTextboxKeyPress","ev","charCode","forEach","action","currentTarget","value","refreshInterpreter","entriesKeys","Object","keys","setFork","nextProps","newProps","authorStoryRunnerOptions","randomSeed","seed","Random","this","map","node","text","fromOption","prefix","inputOptionPrefixText","inputTextboxPrefixText","style","getTextStyle","theme","debugging","playerStorySettings","playerStoryInputStyles","authorStoryInputStyles","fallbackElementType","input","idRunnerInputElement","forkNameOrAction","key","inline","assign","linkAction","hideLog","logLimit","push","addInput","styleOptions","playerStoryOptionStyles","authorStoryOptionStyles","option","styleOptionsHighlight","playerStoryOptionHighlightStyles","authorStoryOptionHighlightStyles","optionHighlight","onClick","styles","root","border","display","fontSize","height","marginBottom","marginTop","paddingLeft","marginLeft","rootFocused","rootHovered","label","idRunnerOptionElement","styleOutput","playerStoryOutputStyles","authorStoryOutputStyles","output","idRunnerOutputElement","tree","updateLog","ref","clearTimeout","undefined","variablesKeys","i","length","preorderProcess","visitFork","refreshInterpreterGui","setErrorMessage","lines","split","line","words","j","trim","startsWith","dispatchSetTempStoryRunnerOptions","currentStorySettings","currentRunnerSettings","discreteInlineLinks","hideRestartLink","color","test","substring","colorDark","colorLight","dispatchSetAuthorStoryRunnerStyles","background","authorStoryRunnerStyles","type","numberRegex","number","parseFloat","toString","font","fallbackFontStack","refreshInterpreterGuiStyles","dispatchRerenderStory","restartOption","allOutput","id","idRunnerLog","idRunnerContent","idRunnerOptions","messageBarType","MessageBarType","error","textbox","autoComplete","name","idRunnerInputfield","onKeyPress","className","runnerWrapperStyle","runnerOutputWrapperStyle","forkToLoad","includes","forkName","loadFork","matchBraces","replace","str","textboxText","processIf","processText","children","condition","isNaN","isFinite","global","setTimeout","query","escapeText","toLowerCase","queryWords","containsWord","RegExp","endsWith","cleanedText","matches","optIncludeUnknowns","resetTokens","varValue","addIdentifier","TokenId","varName","varVal","addFunction","TokenFunc","tokens","TokenBool","result","eval","join","e","Error","message","textLeft","endOfLine","indexOf","displayName","indexOfAt","lbPos","rbPos","fontStyle","addOutput","TokenNum","n0","nextNumber","exprTwoSidedIndex","lhs","slice","rhs","resultVal","getTokens","some","o","strForm","lhsBool","tok","runner","document","getElementById","idRunnerWrapper","playerStoryRunnerStyles","themeType","ThemeTypes","Light","semanticColors","bodyBackground","React","StoryInterpreter","connect","state","renderTrigger","viewEdit","storyRerenderToken","getStrings","settings","locale","dispatch","forwardRef","mt","Array","N","mti","Date","getTime","init_genrand","s","s2","y","mag01","MATRIX_A","kk","M","UPPER_MASK","LOWER_MASK","range","_nextInt32","associativity","placements","TokenOp","opPlacement","precedence","format","operation","placement","assoc","prec","numArgs","function","both","obj","TokenSym","optRequireRightPars","optUnknownDefault","Fsin","operands","Math","sin","Fcos","cos","Ftan","tan","Frnd","round","Frnd2","n1","Add","left","Sub","Mlt","Div","Mod","Neg","right","Exp","pow","Fac","givenVal","Eq","NotEq","Gt","Gte","Lt","Lte","LogNot","LogAnd","LogOr","varFalse","varTrue","varPi","PI","lPar","rPar","argSep","evalNoPar","subExpression","func","operators","filter","subExpressionStr","args","argVals","subResult","immediateResult","opTokens","maxPrecedence","isRightAssociative","opToken","splice","maxPrecedence2","token","sort","a","b","expression","evalTokens","tokenize","tokensList","tokId","functions","rbrPos","subExpressionEnd","lbrPos","lastIndexOf","subExpressionBegin","expressionLHS","expressionRHS","subExpressionFunc","tokFunc","find","f","equals","list","delimiter","lists","currentList","longestMatch","shortestMatch","candidateBeforeDefer","val","combinedTokens","unknownTokenName","uniqueActionType","getActionGuid","setLocale","setTheme","localeId","dispatchSetTheme","supportedTheme","body","backgroundColor","dispatchSetLocale","combineReducers","getSupportedLocale","themes","Themes","DefaultLight","loadTheme","persistStateIdentifier","saveToLocalStorage","persistence","userConsentProvided","localizedName","newState","saveFormatVersion","localStorage","setItem","JSON","stringify","loadFromLocalStorage","loadedState","getItem","returnedState","parse","setCustomizationApplied","setUserConsentProvided","dispatchSetUserConsentProvided","isConsentGiven","consentProvided","customizationApplied","isApplied","CommandBarDropdownC","dropdown","stylesTyped","Dropdown","commandBarDropdownStyle","CommandBarDropdown","commandIds","hiddenInputRef","MenuBarC","applyLocalStorage","localizedStrings","getLocaleDropdownOptionKey","renderLocaleDropdown","localeOption","data","LanguageCodeName","defaultSelectedKey","onRenderTitle","Icon","iconName","iconSpaceBeforeTextStyle","wholeTheme","fonts","large","onChange","event","then","reduxState","getThemeDropdownOptionKey","themeName","renderThemeDropdown","themeKey","ThemeDropdownText","_","commandBarDropdownSeparatorStyle","items","commandBarItemStyle","mainMenuFileNew","MenuFileNew","iconProps","invokeCommand","mainMenuFileOpen","MenuFileOpen","mainMenuFileSave","MenuFileSave","farItems","ariaLabel","TipTheme","onRender","buttonStyles","commandBarDropdownButtonStyle","TipLanguage","handleFile","chosenFiles","target","files","fileReader","FileReader","onloadend","setStory","readAsText","hiddenAndInaccessible","CommandBar","TipNavigateCommandBar","commandBarStyle","MenuBar","getTheme","setConsent","dispatchSetStory","actionMainMenuFileOpen","current","click","invokeOpenCommand","actionMainMenuFileSave","alert","commands","functionsToInvoke","guid","shortcuts","originalSequence","usesShift","Id","enableWhileTyping","activeElement","nodeName","getAttribute","disabled","EditorViewC","runStory","currentStory","idEditorInputfield","saveAndRunStory","updateStory","story","prevProps","setAttribute","editorTextAreaStyle","onBlur","flexDirection","PrimaryButton","EditorPlay","EditorView","dispatchSaveAndRunStory","StoryParseNode","parent","doubleSlashRegex","ifRegex","endIfRegex","isOption","index","startOfLine","isOutput","beforeSubstring","bracketOpenPos","RunnerViewC","interpreterRef","interpreter","parsed","entryPositions","newlineSplitStory","setEntries","header","processHeaderOptions","entryName","entryList","entry","isFinished","match","exec","pos","depth","ifMatches","endIfMatches","ifs","endifs","allMatches","item1","item2","elemBegin","elemType","cond","prevIfBegin","prevIfCond","k","prevEndIfBegin","prevEndIfCond","prevElemBegin","prevElemCond","textNode","prevElemEnd","newChild","lastElemBegin","lastCondLength","setEntriesWithFork","parseStory","storyToParse","ex","console","RunnerView","storyReparseToken","RunnerEditorViewC","mainViewWrapperStyle","idEditorWrapper","mainViewEditorStyle","mainViewRunnerStyle","RunnerEditorView","setPlayerStoryInputStyles","setPlayerStoryLogSeparatorStyles","setPlayerStoryOptionStyles","setPlayerStoryOptionHighlightStyles","setPlayerStoryOutputStyles","setPlayerStoryRunnerOptions","setPlayerStoryRunnerStyles","playerStoryLogSeparatorStyles","playerStoryRunnerOptions","rootReducer","store","createStore","applyMiddleware","thunk","initializeIcons","commandKeys","commandsWithMatchProgress","shortcut","step","window","addEventListener","commandProgress","progress","sequence","customSequence","toUpperCase","Boolean","usesAlt","altKey","usesCtrl","ctrlKey","shiftKey","listenForShortcuts","routing","path","component","ReactDOM","render","alignSelf","borderColor","menuDivider","borderRightStyle","borderWidth","propStyles","caretDownWrapper","mergeStyles","position","width","dropdownItem","dropdownItemSelected","title","borderRadius","alignItems","itemsOnRight","paddingRight","padding","primarySet","secondarySet","bodyStandoutBackground","borderStyle","boxSizing","bodyText","resize","marginRight","margin","flexGrow","overflowY","paddingTop","ContrastDark","ThemeContrastDark","themeId","Dark","createTheme","palette","themePrimary","themeLighterAlt","themeLighter","themeLight","themeTertiary","themeSecondary","themeDarkAlt","themeDark","themeDarker","neutralLighterAlt","neutralLighter","neutralLight","neutralQuaternaryAlt","neutralQuaternary","neutralTertiaryAlt","neutralTertiary","neutralSecondary","neutralPrimaryAlt","neutralPrimary","neutralDark","black","white","ContrastLight","ThemeContrastLight","DeepSea","ThemeDeepSea","DefaultDark","ThemeDefaultDark","ThemeDefaultLight","EarthAndSky","ThemeEarthAndSky","Lucky","ThemeLucky","MidnightEarth","ThemeMidnightEarth","numberOfArgs","defaultLocale","navigator","languages","langParts","language","region","supportedLocales","rerenderStory","playerStyle","storyStyle","authorStyle","fallback","fallbackStyle","errorText","fontFamily","fontWeight","textDecoration","blue","blueDark","fallbackStyles","whiteSpace","ApplicationName","ApplicationNameAndVersion","appName","appVersion","MenuFile","clearAllTempSettings","setCurrentRunnerOptions","currentRunnerOptions","setAuthorStoryInputStyles","setAuthorStoryLogSeparatorStyles","setAuthorStoryOptionStyles","setAuthorStoryOptionHighlightStyles","setAuthorStoryOutputStyles","setAuthorStoryRunnerOptions","setAuthorStoryRunnerStyles","setAuthorStoryStrings","authorStoryLogSeparatorStyles"],"mappings":"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","file":"static/js/main.f39b500d.chunk.js","sourcesContent":["import * as React from \"react\";\nimport { StoryParseNode } from \"./storyParseNode\";\nimport { IPageDictionary } from \"./storyParser\";\nimport {\n  idRunnerContent,\n  idRunnerInputfield,\n  idRunnerLog,\n  idRunnerOptions,\n  idRunnerOptionRestart,\n  idRunnerWrapper,\n  idRunnerInputElement,\n  idRunnerOutputElement,\n  idRunnerOptionElement,\n} from \"../common/identifiers\";\nimport { IRootState } from \"../store\";\nimport { connect } from \"react-redux\";\nimport { dispatchRerenderStory } from \"../common/redux/viewedit.reducers\";\nimport { Dispatch } from \"redux\";\nimport { runnerWrapperStyle, runnerOutputWrapperStyle, fallbackFontStack } from \"../common/styles/controlStyles\";\nimport { ThemeTypes } from \"../common/themes\";\nimport { ActionButton } from \"office-ui-fabric-react/lib/components/Button/ActionButton/ActionButton\";\nimport { MessageBarType } from \"office-ui-fabric-react/lib/components/MessageBar/MessageBar.types\";\nimport { MessageBar } from \"office-ui-fabric-react/lib/components/MessageBar/MessageBar\";\nimport { numberRegex } from \"../parse-expressions/utils\";\nimport { Parser } from \"../parse-expressions/Parser\";\nimport { TokenBool } from \"../parse-expressions/TokenBool\";\nimport { TokenFunc } from \"../parse-expressions/TokenFunc\";\nimport { TokenId } from \"../parse-expressions/TokenId\";\nimport { TokenNum } from \"../parse-expressions/TokenNum\";\nimport { ITextStyle } from \"../common/redux/typedefs\";\nimport { dispatchSetTempStoryRunnerOptions } from \"../common/redux/currentRunnerSettings.reducers\";\nimport { dispatchSetAuthorStoryRunnerStyles } from \"../common/redux/authorStorySettings.reducers\";\nimport { Random } from \"../common/random\";\nimport { fallbackElementType, getTextStyle } from \"../common/styles/interpreterStyles\";\nimport { TextField } from \"office-ui-fabric-react/lib/components/TextField/TextField\";\nimport { getStrings } from \"../common/localization/Localization\";\n\n// TODO: localize strings in this file.\n\nlet uniqueKeyCounter = Number.MIN_SAFE_INTEGER;\n\nconst whitespaceRegex = /\\s+/gm;\nconst colorRegex = /^[0-9|a-f]+$/g;\nconst singleDigitRegex = /[0-9]/g;\nconst escapeBraceRegex = /\\\\at|\\\\lb|\\\\rb|\\\\n|\\\\s/g;\nconst escapeNoBraceRegex = /\\\\at|\\\\n|\\\\s/g;\n\n/** An expression parser used by the interpreter to resolve expressions for variable assignments. */\nconst exprParser = new Parser();\nlet random: Random | undefined;\n\n/** A dictionary of all variables in the current game. */\ninterface IVariables {\n  [key: string]: number | boolean | string;\n}\n\n/**\n * Returns an element that reads from the current state so it updates with theme changes. In being function-based, it's\n * only recomputed when the element is evaluated.\n */\ntype InterpreterNode = (props: CombinedProps) => JSX.Element;\n\nconst mapStateToProps = (state: IRootState) => {\n  return {\n    authorStorySettings: state.authorStorySettings,\n    currentStorySettings: state.currentRunnerSettings,\n    playerStorySettings: state.playerStorySettings,\n    renderTrigger: state.viewEdit.storyRerenderToken, // Needed to re-render after output/input/options change.\n    strings: getStrings(state.settings.locale),\n    theme: state.settings.theme,\n  };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch) => {\n  return {\n    dispatchRerenderStory: dispatchRerenderStory(dispatch),\n    dispatchSetAuthorStoryRunnerStyles: dispatchSetAuthorStoryRunnerStyles(dispatch),\n    dispatchSetTempStoryRunnerOptions: dispatchSetTempStoryRunnerOptions(dispatch),\n  };\n};\n\ntype StoryInterpreterOwnProps = {\n  debugging?: boolean;\n};\n\ntype CombinedProps = StoryInterpreterOwnProps &\n  ReturnType<typeof mapStateToProps> &\n  ReturnType<typeof mapDispatchToProps>;\n\nexport class StoryInterpreterC extends React.Component<StoryInterpreterOwnProps> {\n  /** Tracks actions so they can be removed when navigating other forks/files. */\n  private actions: ((text: string) => void)[] = [];\n\n  /** The content of the current page. */\n  private content: InterpreterNode[] = [];\n\n  /** The content of the current page after evaluating each item with current theme values. */\n  private contentCached: JSX.Element[] = [];\n\n  /** Story styling of options that are created. Styling precedence is player > story > author. */\n  private currentOptionStyles: ITextStyle = {};\n\n  /** Story styling of options when they are highlighted. Styling precedence is player > story > author. */\n  private currentOptionHighlightStyles: ITextStyle = {};\n\n  /** Story styling of output that gets created. Styling precedence is player > story > author. */\n  private currentOutputStyles: ITextStyle = {};\n\n  /** Stores all tree entries. */\n  private entries: IPageDictionary = {};\n\n  /** An optional error message that displays in a top banner when non-empty. */\n  private errorMessage = \"\";\n\n  /** Stores the current page by name. */\n  private fork = \"\";\n\n  /** Keeps a list of all previous content, if not disabled. */\n  private log: InterpreterNode[] = [];\n\n  /** Keeps a list of all previous content after evaluating each item with current theme values, if not disabled. */\n  private logCached: JSX.Element[] = [];\n\n  /** Hyperlink options to the next page. */\n  private options: InterpreterNode[] = [];\n\n  /** Hyperlink options to the next page, evaluated with current theme values. */\n  private optionsCached: JSX.Element[] = [];\n\n  /** Used to stop evaluation of the current fork entirely. */\n  private stopEvaluation = false;\n\n  /** Whether to display a textbox or not. It's displayed automatically when the user can enter text. */\n  private textboxHidden = true;\n\n  /** Tracked so they can be stopped when navigating other forks/files. */\n  private timers: NodeJS.Timeout[] = [];\n\n  /** Defines a place for generated variables to be stored and accessed. */\n  private variables: IVariables = {};\n\n  /** Stores a copy of all variables as they were just before visiting a new page. This is used when saving. */\n  private variablesPrev: IVariables = {};\n\n  /** The restart link for when a page is empty or the link is forcibly shown. */\n  private getRestartLink = () => {\n    const combinedProps = this.props as CombinedProps;\n\n    return this.addOption(\n      combinedProps.authorStorySettings.authorStoryStrings.restartLinkText || combinedProps.strings.RunnerRestart,\n      this.restartGame,\n      idRunnerOptionRestart\n    );\n  };\n\n  constructor(props: CombinedProps) {\n    super(props);\n    this.refreshInterpreter();\n  }\n\n  public shouldComponentUpdate(nextProps: Readonly<StoryInterpreterOwnProps>) {\n    const newProps = nextProps as CombinedProps;\n\n    // Update random if necessary.\n    if (!random || newProps.authorStorySettings.authorStoryRunnerOptions.randomSeed !== random.seed) {\n      random = new Random(newProps.authorStorySettings.authorStoryRunnerOptions.randomSeed);\n    }\n\n    // Recompute cached versions of all components.\n    this.contentCached = this.content.map((node: InterpreterNode) => node(newProps));\n    this.logCached = this.log.map((node: InterpreterNode) => node(newProps));\n    this.optionsCached = this.options.map((node: InterpreterNode) => node(newProps));\n\n    return true;\n  }\n\n  /**\n   * Creates and returns a text element styled to represent the player's input. It's prefixed according to whether it\n   * was created from a hyperlink or by typing.\n   */\n  public addInput(text: string, fromOption?: true) {\n    return (props: CombinedProps) => {\n      const prefix = fromOption\n        ? props.authorStorySettings.authorStoryStrings.inputOptionPrefixText || \"• \"\n        : props.authorStorySettings.authorStoryStrings.inputTextboxPrefixText || \"→ \";\n\n      return (\n        <p\n          key={`${idRunnerInputElement}-${uniqueKeyCounter++}`}\n          style={getTextStyle(\n            props.theme,\n            !props.debugging ? props.playerStorySettings.playerStoryInputStyles : {},\n            {}, // can't pass styles\n            props.authorStorySettings.authorStoryInputStyles,\n            fallbackElementType.input\n          )}\n        >\n          {prefix + text}\n        </p>\n      );\n    };\n  }\n\n  /**\n   * Creates and returns a hyperlink styled as an option. For forkNameOrAction, if a string is provided, it indicates\n   * the fork to go to. Passing a function can execute custom code instead.\n   */\n  public addOption(text: string, forkNameOrAction: string | (() => void), key?: string, inline?: true) {\n    const style = Object.assign({}, this.currentOptionStyles);\n\n    const combinedProps = this.props as CombinedProps;\n    const linkAction =\n      typeof forkNameOrAction === \"function\"\n        ? forkNameOrAction\n        : () => {\n            // When clicking the option, push player input to content if at least one item is logged.\n            if (\n              !combinedProps.authorStorySettings.authorStoryRunnerOptions.hideLog &&\n              (!combinedProps.authorStorySettings.authorStoryRunnerOptions.logLimit ||\n                combinedProps.authorStorySettings.authorStoryRunnerOptions.logLimit > 0)\n            ) {\n              this.content.push(this.addInput(text, true));\n            }\n\n            // Go to the fork (moves old content to logs as a side effect).\n            this.setFork(forkNameOrAction);\n          };\n\n    return (props: CombinedProps) => {\n      const styleOptions = getTextStyle(\n        props.theme,\n        !props.debugging ? props.playerStorySettings.playerStoryOptionStyles : {},\n        style,\n        props.authorStorySettings.authorStoryOptionStyles,\n        fallbackElementType.option\n      );\n\n      const styleOptionsHighlight = getTextStyle(\n        props.theme,\n        !props.debugging ? props.playerStorySettings.playerStoryOptionHighlightStyles : {},\n        style,\n        props.authorStorySettings.authorStoryOptionHighlightStyles,\n        fallbackElementType.optionHighlight\n      );\n\n      return (\n        <ActionButton\n          key={key || `${idRunnerOptionElement}-${uniqueKeyCounter++}`}\n          onClick={linkAction}\n          styles={{\n            root: {\n              ...(styleOptions as object),\n              border: \"none\",\n              display: inline ? \"inline\" : \"block\",\n              fontSize: \"16px\",\n              height: \"unset\",\n              marginBottom: inline ? \"0px\" : \"4px\",\n              marginTop: inline ? \"0px\" : \"4px\",\n              paddingLeft: \"0px\",\n              marginLeft: \"0px\",\n            },\n            rootFocused: { ...(styleOptionsHighlight as object) },\n            rootHovered: { ...(styleOptionsHighlight as object) },\n            label: {\n              marginLeft: \"0px\",\n            },\n          }}\n          text={text}\n        />\n      );\n    };\n  }\n\n  /** Creates and returns a text element styled as output text. */\n  public addOutput(text: string) {\n    const style = Object.assign({}, this.currentOutputStyles);\n\n    return (props: CombinedProps) => {\n      const styleOutput = getTextStyle(\n        props.theme,\n        !props.debugging ? props.playerStorySettings.playerStoryOutputStyles : {},\n        style,\n        props.authorStorySettings.authorStoryOutputStyles,\n        fallbackElementType.output\n      );\n\n      return (\n        <span key={`${idRunnerOutputElement}-${uniqueKeyCounter++}`} style={styleOutput}>\n          {text}\n        </span>\n      );\n    };\n  }\n\n  /** Loads the current progress from local storage if possible. */\n  public loadFile() {\n    // TODO: implement.\n  }\n\n  /** Loads an entry and pushes changes to the page, catching and displaying errors on the screen. */\n  public loadFork() {\n    this.updateLog();\n    this.content = [];\n    this.options = [];\n    this.textboxHidden = true;\n\n    // Clears all timers.\n    this.timers.forEach((ref: NodeJS.Timeout) => {\n      clearTimeout(ref);\n    });\n\n    this.timers = [];\n    this.actions = [];\n\n    // Sets up variables.\n    let tree: StoryParseNode | undefined;\n\n    // Gets the nodes to process, if possible.\n    tree = this.entries[this.fork];\n    if (tree === undefined) {\n      this.setErrorMessage(\"Interpreter: fork '\" + this.fork + \"' not found.\");\n      return;\n    }\n\n    // Records the previous state of all variables.\n    this.variablesPrev = {};\n    const variablesKeys = Object.keys(this.variables);\n\n    for (let i = 0; i < variablesKeys.length; i++) {\n      this.variablesPrev[variablesKeys[i]] = this.variables[variablesKeys[i]];\n    }\n\n    // Evaluates every node.\n    this.preorderProcess(tree, \"\");\n\n    // Exits if fork execution stops.\n    if (this.stopEvaluation) {\n      return;\n    }\n\n    // Ensures the fork is considered visited.\n    this.visitFork();\n    this.refreshInterpreterGui();\n  }\n\n  /** Parses a special set of options at the top of the file. */\n  public processHeaderOptions(text: string) {\n    const combinedProps = this.props as CombinedProps;\n\n    // Clears all old preferences.\n    this.refreshInterpreter();\n\n    let lines = text.split(\"\\n\");\n\n    for (let i = 0; i < lines.length; i++) {\n      // Gets the line and words on that line.\n      let line = lines[i];\n      let words = line.split(\" \");\n\n      // Gets all text after the option has been named.\n      let input = \"\";\n\n      for (let j = 1; j < words.length; j++) {\n        input += words[j] + \" \";\n      }\n\n      input = input.trim();\n\n      if (line.startsWith(\"link-style-text\")) {\n        combinedProps.dispatchSetTempStoryRunnerOptions({\n          ...combinedProps.currentStorySettings.currentRunnerSettings,\n          discreteInlineLinks: true,\n        });\n      } else if (line.startsWith(\"option-default-disable\")) {\n        combinedProps.dispatchSetTempStoryRunnerOptions({\n          ...combinedProps.currentStorySettings.currentRunnerSettings,\n          hideRestartLink: true,\n        });\n      } else if (\n        line.startsWith(\"option-color\") ||\n        line.startsWith(\"option-hover-color\") ||\n        line.startsWith(\"background-color\")\n      ) {\n        // Stores the color to be created.\n        let color = \"\";\n        if (!colorRegex.test(input)) {\n          this.setErrorMessage(\n            \"Interpreter: In the line '\" +\n              line +\n              \"', color must be given in hex format. It can only include numbers 1-9 and upper or lowercase a-f.\"\n          );\n        } else if (input.length !== 6 && input.length !== 3) {\n          this.setErrorMessage(\n            \"Interpreter: In the line '\" +\n              line +\n              \"', color must be given in hex format using 3 or 6 digits. For example, f00 or 8800f0.\"\n          );\n        } else if (input.length === 3 || input.length === 6) {\n          color = input.substring(0, input.length);\n        }\n\n        if (line.startsWith(\"option-color\")) {\n          this.currentOptionStyles.colorDark = color;\n          this.currentOptionStyles.colorLight = color;\n        } else if (line.startsWith(\"option-color-light\")) {\n          this.currentOptionStyles.colorLight = color;\n        } else if (line.startsWith(\"option-color-dark\")) {\n          this.currentOptionStyles.colorDark = color;\n        } else if (line.startsWith(\"option-hover-color\")) {\n          this.currentOptionHighlightStyles.colorDark = color;\n          this.currentOptionHighlightStyles.colorLight = color;\n        } else if (line.startsWith(\"option-hover-color-light\")) {\n          this.currentOptionHighlightStyles.colorLight = color;\n        } else if (line.startsWith(\"option-hover-color-dark\")) {\n          this.currentOptionHighlightStyles.colorDark = color;\n        } else if (line.startsWith(\"background-color\")) {\n          combinedProps.dispatchSetAuthorStoryRunnerStyles({\n            background: {\n              ...combinedProps.authorStorySettings.authorStoryRunnerStyles,\n              colorDark: color,\n              colorLight: color,\n              type: \"plain\",\n            },\n          });\n        } else if (line.startsWith(\"background-color-light\")) {\n          combinedProps.dispatchSetAuthorStoryRunnerStyles({\n            background: {\n              ...combinedProps.authorStorySettings.authorStoryRunnerStyles,\n              colorLight: color,\n              type: \"plain\",\n            },\n          });\n        } else if (line.startsWith(\"background-color-dark\")) {\n          combinedProps.dispatchSetAuthorStoryRunnerStyles({\n            background: {\n              ...combinedProps.authorStorySettings.authorStoryRunnerStyles,\n              colorDark: color,\n              type: \"plain\",\n            },\n          });\n        }\n      } else if (line.startsWith(\"output-font-size\") || line.startsWith(\"option-font-size\")) {\n        if (!numberRegex.test(input)) {\n          this.setErrorMessage(\"Interpreter: In line '\" + line + \"', a number must be specified after the option.\");\n          continue;\n        }\n\n        let number = parseFloat(input);\n\n        if (number <= 0) {\n          this.setErrorMessage(\"Interpreter: In line '\" + line + \"', numbers must be greater than zero.\");\n          continue;\n        }\n\n        if (line.startsWith(\"output-font-size\")) {\n          this.currentOutputStyles.fontSize = number.toString();\n        } else if (line.startsWith(\"option-font-size\")) {\n          this.currentOptionStyles.fontSize = number.toString();\n        }\n      } else if (line.startsWith(\"option-font\")) {\n        this.currentOptionStyles.font = `${input}; ${fallbackFontStack}`;\n      } else if (line.startsWith(\"output-font\")) {\n        this.currentOutputStyles.font = `${input}; ${fallbackFontStack}`;\n      }\n    }\n  }\n\n  /** Re-renders the interpreter and applies the chosen background color. */\n  public refreshInterpreterGui() {\n    this.refreshInterpreterGuiStyles();\n    (this.props as CombinedProps).dispatchRerenderStory();\n  }\n\n  /** Renders output. Conditionally renders logs, error message, and textbox. */\n  public render(): React.ReactNode {\n    this.refreshInterpreterGuiStyles();\n\n    const combinedProps = this.props as CombinedProps;\n\n    const restartOption =\n      this.options.length === 0 && !combinedProps.authorStorySettings.authorStoryRunnerOptions.hideRestartLink\n        ? [this.getRestartLink() as InterpreterNode]\n        : [];\n\n    const allOutput = [\n      <div key={idRunnerLog} id={idRunnerLog}>\n        {this.logCached}\n      </div>,\n      <div key={idRunnerContent} id={idRunnerContent}>\n        {this.contentCached}\n      </div>,\n      <div key={idRunnerOptions} id={idRunnerOptions} style={{ marginTop: \"24px\" }}>\n        {this.optionsCached}\n        {restartOption}\n      </div>,\n    ];\n\n    const errorMessage =\n      this.props.debugging && this.errorMessage !== \"\" ? (\n        <MessageBar messageBarType={MessageBarType.error}>{this.errorMessage}</MessageBar>\n      ) : undefined;\n\n    const textbox = !this.textboxHidden ? (\n      <TextField\n        autoComplete=\"nah\" // Required for browsers to not autocomplete with address.\n        name=\"textfield\" // Required for browsers to not autocomplete with prior entries.\n        id={idRunnerInputfield}\n        key={idRunnerInputfield}\n        onKeyPress={this.onTextboxKeyPress}\n        type=\"text\"\n      />\n    ) : undefined;\n\n    return (\n      <div className={runnerWrapperStyle}>\n        <div className={runnerOutputWrapperStyle}>{allOutput}</div>\n        {errorMessage}\n        {textbox}\n      </div>\n    );\n  }\n\n  /** Saves the current progress to local storage if possible. */\n  public saveFile() {\n    // TODO: implement.\n  }\n\n  /** For internal use. Sets the entries usually given by the parser. */\n  public setEntries(entries: IPageDictionary) {\n    this.entries = entries;\n  }\n\n  /** For internal use. Sets the entries usually given by the parser. If forkToLoad is an empty string, loads the first fork. */\n  public setEntriesWithFork(entries: IPageDictionary, forkToLoad: string) {\n    this.content = [];\n    this.log = [];\n    this.options = [];\n    this.entries = entries;\n    this.errorMessage = \"\";\n\n    const entriesKeys = Object.keys(this.entries);\n\n    if (entriesKeys.length === 0) {\n      this.setErrorMessage(\n        \"Interpreter: cannot play story. It contains no forks. Use @ at the beginning of a line to denote an fork.\"\n      );\n    } else {\n      if (forkToLoad !== \"\" && entriesKeys.includes(forkToLoad)) {\n        this.setFork(forkToLoad);\n      } else {\n        this.setFork(entriesKeys[0]);\n      }\n    }\n  }\n\n  /** Sets or clears an error message. */\n  public setErrorMessage(error: string | undefined) {\n    this.errorMessage = error ?? \"\";\n    this.refreshInterpreterGui();\n  }\n\n  /** For internal use. Sets the fork usually given by parsed entries. */\n  public setFork(forkName: string) {\n    this.fork = forkName;\n    this.stopEvaluation = false;\n\n    this.loadFork();\n  }\n\n  /** Escapes the given text for all supported escape sequences. */\n  private escapeText(text: string, matchBraces: boolean) {\n    if (matchBraces) {\n      return text.replace(escapeBraceRegex, (str: string) => {\n        switch (str) {\n          case \"\\\\at\":\n            return \"@\";\n          case \"\\\\n\":\n            return \"\\n\";\n          case \"\\\\s\":\n            return \"\\\\\";\n          case \"\\\\lb\":\n            return \"{\";\n          case \"\\\\rb\":\n            return \"}\";\n        }\n\n        return str;\n      });\n    }\n\n    return text.replace(escapeNoBraceRegex, (str: string) => {\n      switch (str) {\n        case \"\\\\at\":\n          return \"@\";\n        case \"\\\\n\":\n          return \"\\n\";\n        case \"\\\\s\":\n          return \"\\\\\";\n      }\n\n      return str;\n    });\n  }\n\n  /** Handles submission of text in the textbox. */\n  private onTextboxKeyPress = (ev: React.KeyboardEvent<HTMLInputElement>) => {\n    if (ev.charCode === 13) {\n      this.actions.forEach((action) => {\n        action(ev.currentTarget.value);\n      });\n\n      ev.currentTarget.value = \"\";\n    }\n  };\n\n  /**\n   * Crawls the given node structure in a depth-first search. If text is provided, it's used\n   * solely to evaluate 'if text is' and 'if text has' syntax. Otherwise, those nodes are set to be\n   * parsed the next time input is submitted through the textbox.\n   */\n  private preorderProcess(node: StoryParseNode, textboxText: string) {\n    // If the node's conditions are met, processes it and children.\n    if (this.processIf(node, textboxText)) {\n      this.processText(node);\n\n      for (let i = 0; i < node.children.length; i++) {\n        if (this.stopEvaluation) {\n          return;\n        }\n\n        this.preorderProcess(node.children[i], textboxText);\n      }\n    }\n  }\n\n  /**\n   * Interprets the contents of a node is its condition is met. If text is provided, it's used\n   * solely to evaluate 'if text is' and 'if text has' syntax. Otherwise, those nodes are set to be\n   * parsed the next time input is submitted through the textbox.\n   */\n  private processIf(node: StoryParseNode, textboxText: string): boolean {\n    const combinedProps = this.props as CombinedProps;\n\n    // If there are no conditions, consider it met.\n    if (node.condition.trim() === \"\") {\n      return true;\n    }\n\n    // Gets the condition without the word 'if'.\n    const condition = node.condition.substring(2).trim();\n    const words = condition.split(\" \");\n\n    // There should be at least one word after 'if'.\n    if (words.length === 0) {\n      this.setErrorMessage(\"The line if '\" + condition + \"' is incorrectly formatted.\");\n      return false; // Skips ifs with invalid syntax.\n    }\n\n    //#region Timers. Syntax: if timer is num\n    if (words.length > 1 && words[0] === \"timer\" && words[1] === \"is\") {\n      if (words.length < 2) {\n        this.setErrorMessage(\"The timer must be set with a time specified in seconds.\");\n        return false;\n      }\n\n      // The third word must be a number.\n      if (!numberRegex.test(words[2])) {\n        this.setErrorMessage(\"Interpreter: In line '\" + condition + \"', the third word must be numeric.\");\n        return false;\n      }\n\n      const number = parseFloat(words[2]);\n\n      if (isNaN(number) || !isFinite(number)) {\n        this.setErrorMessage(\"Interpreter: In line '\" + condition + \"', the time must be numeric and not too large.\");\n        return false;\n      }\n\n      // The number must be positive.\n      if (number <= 0) {\n        this.setErrorMessage(\"Interpreter: In line '\" + condition + \"', the time must be positive and non-zero.\");\n        return false;\n      }\n\n      // Creates a timer to delay the evaluation of everything in the current if-statement.\n      const ref = global.setTimeout(() => {\n        this.processText(node);\n\n        for (let i = 0; i < node.children.length; i++) {\n          this.preorderProcess(node.children[i], textboxText);\n        }\n      }, number * 1000);\n\n      this.timers.push(ref);\n\n      return false; // Delays execution of child nodes.\n    }\n    //#endregion\n\n    //#region Textbox. Syntax: if text (!)is/has/pick query\n    // Handles syntax: if text is query, if text has query, if text !is query, if text !has query, if text pick query\n    else if (\n      words.length > 1 &&\n      words[0] === \"text\" &&\n      (words[1] === \"is\" || words[1] === \"!is\" || words[1] === \"has\" || words[1] === \"!has\" || words[1] === \"pick\")\n    ) {\n      // Automatically shows the textbox.\n      this.textboxHidden = false;\n\n      let query = \"\"; // Contains all additional words.\n\n      // Concatenates all words after the command syntax.\n      for (let i = 2; i < words.length; i++) {\n        query += words[i] + \" \";\n      }\n\n      query = this.escapeText(query.toLowerCase().trim(), true);\n\n      if (query === \"\") {\n        this.setErrorMessage(\n          \"Interpreter: In the line 'if \" +\n            condition +\n            \"', at least one word to look for must be specified after 'pick'.\"\n        );\n      }\n\n      // The generated option adds to the submission event based on whether it's checking if the\n      // textbox input is/has the query.\n      if (words[1] === \"pick\") {\n        // Splits the query on commas if checking for containing.\n        const queryWords = query.split(\",\");\n\n        // Escapes commas as \\c\n        for (let i = 0; i < queryWords.length; i++) {\n          queryWords[i] = queryWords[i].replace(\"\\\\c\", \",\").trim();\n        }\n\n        if (textboxText === \"\") {\n          this.actions.push((text: string) => {\n            let containsWord = false;\n\n            // Ensures the text contains at least one word.\n            for (let i = 0; i < queryWords.length; i++) {\n              const matchWordRegex = new RegExp(\"\\\\b\" + queryWords[i] + \"\\\\b\");\n              if (matchWordRegex.test(text.toLowerCase().trim())) {\n                containsWord = true;\n              }\n            }\n\n            if (!containsWord) {\n              return;\n            }\n\n            // If still executing, conditions are met.\n            if (\n              !combinedProps.authorStorySettings.authorStoryRunnerOptions.hideLog &&\n              (!combinedProps.authorStorySettings.authorStoryRunnerOptions.logLimit ||\n                combinedProps.authorStorySettings.authorStoryRunnerOptions.logLimit > 0)\n            ) {\n              this.content.push(this.addInput(text));\n            }\n\n            this.processText(node);\n\n            for (let i = 0; i < node.children.length; i++) {\n              this.preorderProcess(node.children[i], text);\n            }\n\n            this.refreshInterpreterGui();\n          });\n        } else {\n          let containsWord = false;\n\n          // Ensures the text contains at least one word.\n          for (let i = 0; i < queryWords.length; i++) {\n            const matchWordRegex = new RegExp(\"\\\\b\" + queryWords[i] + \"\\\\b\");\n\n            if (matchWordRegex.test(textboxText.toLowerCase().trim())) {\n              containsWord = true;\n            }\n          }\n\n          if (!containsWord) {\n            return false;\n          }\n\n          // If still executing, conditions are met.\n          this.processText(node);\n\n          for (let i = 0; i < node.children.length; i++) {\n            this.preorderProcess(node.children[i], textboxText);\n          }\n        }\n      } else if (words[1].endsWith(\"is\")) {\n        if (textboxText === \"\") {\n          this.actions.push((text: string) => {\n            const cleanedText = text.toLowerCase().trim();\n\n            if ((words[1] === \"is\" && cleanedText === query) || (words[1] === \"!is\" && cleanedText !== query)) {\n              if (\n                !combinedProps.authorStorySettings.authorStoryRunnerOptions.hideLog &&\n                (!combinedProps.authorStorySettings.authorStoryRunnerOptions.logLimit ||\n                  combinedProps.authorStorySettings.authorStoryRunnerOptions.logLimit > 0)\n              ) {\n                this.content.push(this.addInput(text));\n              }\n\n              this.processText(node);\n\n              for (let i = 0; i < node.children.length; i++) {\n                this.preorderProcess(node.children[i], text);\n              }\n            }\n\n            this.refreshInterpreterGui();\n          });\n        } else {\n          if ((words[1] === \"is\" && textboxText === query) || (words[1] === \"!is\" && textboxText !== query)) {\n            this.processText(node);\n\n            for (let i = 0; i < node.children.length; i++) {\n              this.preorderProcess(node.children[i], textboxText);\n            }\n          }\n        }\n      } else if (words[1].endsWith(\"has\")) {\n        // Splits the query on commas if checking for containing.\n        const queryWords = query.split(\",\");\n\n        // Escapes commas as \\c.\n        for (let i = 0; i < queryWords.length; i++) {\n          queryWords[i] = queryWords[i].replace(\"\\\\c\", \",\").trim();\n        }\n\n        if (textboxText === \"\") {\n          this.actions.push((text: string) => {\n            // Ensures the text contains each word.\n            for (let i = 0; i < queryWords.length; i++) {\n              const matchWordRegex = new RegExp(\"\\\\b\" + queryWords[i] + \"\\\\b\");\n              const matches = matchWordRegex.test(text.toLowerCase().trim());\n\n              if ((words[1] === \"has\" && !matches) || (words[1] === \"!has\" && matches)) {\n                return;\n              }\n            }\n\n            // If still executing, conditions are met.\n            if (\n              !combinedProps.authorStorySettings.authorStoryRunnerOptions.hideLog &&\n              (!combinedProps.authorStorySettings.authorStoryRunnerOptions.logLimit ||\n                combinedProps.authorStorySettings.authorStoryRunnerOptions.logLimit > 0)\n            ) {\n              this.content.push(this.addInput(text));\n            }\n\n            this.processText(node);\n\n            for (let i = 0; i < node.children.length; i++) {\n              this.preorderProcess(node.children[i], text);\n            }\n\n            this.refreshInterpreterGui();\n          });\n        } else {\n          // Ensures the text contains each word.\n          for (let i = 0; i < queryWords.length; i++) {\n            const matchWordRegex = new RegExp(\"\\\\b\" + queryWords[i] + \"\\\\b\");\n            const matches = matchWordRegex.test(textboxText);\n\n            if ((words[1] === \"has\" && !matches) || (words[1] === \"!has\" && matches)) {\n              return false;\n            }\n          }\n\n          // If still executing, conditions are met.\n          this.processText(node);\n\n          for (let i = 0; i < node.children.length; i++) {\n            this.preorderProcess(node.children[i], textboxText);\n          }\n        }\n      }\n\n      return false; // Execution of child nodes is conditional.\n    }\n    //#endregion\n\n    //#region Truth tests. Syntax: if expr; expr must be true or false.\n    else {\n      // Unregisters previously-set variables and confirms options.\n      exprParser.optIncludeUnknowns = true;\n      exprParser.resetTokens();\n\n      const variablesKeys = Object.keys(this.variables);\n\n      // Supports syntax: if visited, if !visited\n      const varValue = this.variables[\"visited\" + this.fork] as number;\n      exprParser.addIdentifier(new TokenId(\"visited\", varValue));\n\n      // Registers all valid variables with the math parser.\n      for (let i = 0; i < variablesKeys.length; i++) {\n        const varName = variablesKeys[i];\n        const varVal = this.variables[variablesKeys[i]];\n\n        exprParser.addIdentifier(new TokenId(varName, varVal));\n      }\n\n      // Registers a function to check if a variable exists.\n      exprParser.addFunction(\n        new TokenFunc(\"exists\", 1, (tokens) => {\n          if (tokens[0] instanceof TokenBool) {\n            return tokens[0];\n          }\n\n          return new TokenBool(!(tokens[0] instanceof TokenId));\n        })\n      );\n\n      let result = \"\";\n      let resultVal = null;\n\n      // Attempts to compute the expression.\n      try {\n        result = exprParser.eval(words.join(\" \"));\n      } catch (e) {\n        if (e instanceof Error) {\n          this.setErrorMessage(e.message);\n        } else {\n          this.setErrorMessage(e);\n        }\n\n        return false;\n      }\n\n      // Parses the computed result as a bool.\n      if (result === \"true\" || result === \"false\") {\n        return result === \"true\";\n      } else {\n        this.setErrorMessage(\n          \"Interpreter: In the line 'if \" +\n            words.join(\" \") +\n            \"', the expression must be boolean (true or false), but was \" +\n            resultVal +\n            \" instead.\"\n        );\n\n        return false;\n      }\n    }\n  }\n\n  /** Interprets the node text to display output and evaluate commands. */\n  private processText(node: StoryParseNode) {\n    let textLeft = node.text;\n\n    // Processes all text until none is left.\n    while (textLeft.length > 0) {\n      // Gets the current line and its words.\n      let endOfLine = textLeft.indexOf(\"\\n\");\n      let line: string;\n\n      if (endOfLine >= 0) {\n        line = textLeft.substring(0, endOfLine);\n      } else {\n        line = textLeft;\n      }\n\n      let words = line.split(\" \");\n\n      //#region Handles empty lines if they appear.\n      // Removes excess lines.\n      if (line.trim() === \"\") {\n        // Deletes pointless whitespace.\n        textLeft = textLeft.substring(endOfLine + 1);\n      }\n      //#endregion\n\n      //#region Parse in-line options. Syntax: output@@forkname.\n      else if (line.includes(\"@@\")) {\n        let forkName = line\n          .substring(line.indexOf(\"@\") + 2)\n          .replace(whitespaceRegex, \"\")\n          .toLowerCase();\n\n        let displayName = this.escapeText(line.substring(0, line.indexOf(\"@\")).trim(), false);\n\n        // Handles having no hyperlink or display name.\n        if (forkName === \"\") {\n          this.setErrorMessage(\"Interpreter: there was no fork name given to option '\" + displayName + \"'.\");\n        } else if (displayName.trim() === \"\") {\n          this.setErrorMessage(\n            \"Interpreter: the option linking to '\" + forkName + \"' has no displayable text specified.\"\n          );\n        } else if (this.entries[forkName] === undefined) {\n          this.setErrorMessage(\n            \"Interpreter: the fork in the option '\" + displayName + \"@\" + forkName + \"' doesn't exist.\"\n          );\n        } else {\n          this.content.push(this.addOption(displayName, forkName, undefined, true));\n        }\n\n        // Deletes the line just processed.\n        textLeft = textLeft.substring(textLeft.indexOf(\"\\n\") + 1);\n      }\n      //#endregion\n\n      //#region Parse options. Syntax: output@forkname.\n      else if (line.includes(\"@\")) {\n        // Gets the fork name. Case and space insensitive.\n        const indexOfAt = line.indexOf(\"@\");\n        const forkName = line\n          .substring(indexOfAt + 1)\n          .replace(whitespaceRegex, \"\")\n          .toLowerCase();\n        const displayName = this.escapeText(line.substring(0, indexOfAt).trim(), false);\n\n        // Handles having no hyperlink or display name.\n        if (forkName === \"\") {\n          this.setErrorMessage(\"Interpreter: there was no fork name given to option '\" + displayName + \"'.\");\n        } else if (displayName.trim() === \"\") {\n          this.setErrorMessage(\n            \"Interpreter: the option linking to '\" + forkName + \"' has no displayable text specified.\"\n          );\n        } else {\n          this.options.push(this.addOption(displayName, forkName));\n        }\n\n        // Deletes the line just processed.\n        textLeft = textLeft.substring(textLeft.indexOf(\"\\n\") + 1);\n      }\n      //#endregion\n\n      //#region Print text. Syntax: {output text}.\n      // Parses output text and escape characters.\n      else if (line.includes(\"{\")) {\n        let lbPos = textLeft.indexOf(\"{\");\n        let rbPos = textLeft.indexOf(\"}\");\n        let output = textLeft.substring(lbPos, rbPos + 1);\n\n        if (rbPos < lbPos) {\n          this.setErrorMessage(\"Interpreter: In the line '\" + line + \"', right braces should follow left braces. \");\n\n          // Skips the unprocessable line.\n          textLeft = textLeft.substring(textLeft.indexOf(\"\\n\") + 1);\n\n          continue;\n        }\n\n        if (output.includes(\"***}\")) {\n          this.currentOutputStyles.fontStyle = \"ib\";\n        } else if (output.includes(\"**}\")) {\n          this.currentOutputStyles.fontStyle = \"b\";\n        } else if (output.includes(\"*}\")) {\n          this.currentOutputStyles.fontStyle = \"i\";\n        } else {\n          this.currentOutputStyles.fontStyle = undefined;\n        }\n\n        // create output\n        output = this.escapeText(\n          output.replace(\"{\", \"\").replace(\"***}\", \"\").replace(\"**}\", \"\").replace(\"*}\", \"\").replace(\"}\", \"\"),\n          true\n        );\n\n        // Generates the text\n        this.content.push(this.addOutput(output));\n\n        // Removes the processed text.\n        textLeft = textLeft.substring(0, lbPos) + textLeft.substring(rbPos + 1, textLeft.length);\n      }\n      //#endregion\n\n      //#region Set variables.\n      else if (textLeft.startsWith(\"set\")) {\n        // Unregisters previously-set variables.\n        exprParser.optIncludeUnknowns = false;\n        exprParser.resetTokens();\n\n        // Registers all valid variables with the math parser.\n        const variablesKeys = Object.keys(this.variables);\n        for (let i = 0; i < variablesKeys.length; i++) {\n          const varName = variablesKeys[i];\n          const varVal = this.variables[variablesKeys[i]];\n\n          if (typeof varVal === \"number\") {\n            exprParser.addIdentifier(new TokenId(varName, varVal));\n          } else if (typeof varVal === \"boolean\") {\n            exprParser.addIdentifier(new TokenId(varName, varVal));\n          }\n        }\n\n        // Registers a function to set a random number.\n        exprParser.addFunction(\n          new TokenFunc(\"random\", 1, (tokens) => {\n            if (tokens[0] instanceof TokenNum) {\n              const n0 = tokens[0] as TokenNum;\n\n              return new TokenNum(random!.nextNumber() * n0.value + 1);\n            }\n\n            return null;\n          })\n        );\n\n        // Gets the index to separate left and right-hand sides.\n        let exprTwoSidedIndex = words.indexOf(\"=\");\n\n        // Handles expressions with both LHS and RHS.\n        if (exprTwoSidedIndex !== -1) {\n          let lhs = words.slice(1, exprTwoSidedIndex);\n          let rhs = words.slice(exprTwoSidedIndex + 1);\n          let result = \"\";\n          let resultVal = null;\n\n          // If the left-hand side is a single word.\n          if (lhs.length === 1) {\n            // Attempts to compute the RHS expression.\n            try {\n              result = exprParser.eval(rhs.join(\" \"));\n            } catch (e) {\n              if (e instanceof Error) {\n                this.setErrorMessage(\"Interpreter: In the line '\" + line + \"', \" + e.message);\n              } else {\n                this.setErrorMessage(\"Interpreter: In the line '\" + line + \", \" + e);\n              }\n            }\n\n            // Parses the computed result as a bool.\n            if (result === \"true\" || result === \"false\") {\n              resultVal = result === \"true\";\n            }\n\n            // Parses the computed result as a number.\n            else {\n              if (numberRegex.test(result)) {\n                resultVal = parseFloat(result);\n              } else {\n                this.setErrorMessage(\n                  \"Interpreter: In the line '\" +\n                    line +\n                    \"', the expression \" +\n                    rhs.join(\" \") +\n                    \" should be a number, but \" +\n                    result +\n                    \" was computed instead.\"\n                );\n              }\n            }\n\n            // Sets or adds the new value as appropriate.\n            if (variablesKeys.includes(lhs[0])) {\n              this.variables[lhs[0]] = resultVal as number | boolean;\n            } else {\n              if (singleDigitRegex.test(lhs[0][0]) || exprParser.getTokens().some((o) => o.strForm === lhs[0])) {\n                this.setErrorMessage(\n                  \"Interpreter: In the line '\" +\n                    line +\n                    \"', the variable '\" +\n                    lhs[0] +\n                    \"' is a name used for math or is a number.\"\n                );\n              } else {\n                this.variables[lhs[0]] = resultVal as number | boolean;\n              }\n            }\n          } else {\n            this.setErrorMessage(\n              \"Interpreter: In the line '\" +\n                line +\n                \", the phrase \" +\n                lhs.join(\" \") +\n                \" must be a variable name without spaces.\"\n            );\n          }\n        }\n\n        // Handles shorthand expressions with only the LHS.\n        else {\n          let lhs = words.slice(1);\n          let result = \"\";\n          let resultVal = null;\n\n          if (lhs.length > 0) {\n            // Syntax: set name, set !name\n            if (lhs.length === 1) {\n              // Sets false boolean values.\n              if (lhs[0].startsWith(\"!\")) {\n                let lhsBool = lhs[0].substring(1);\n\n                if (variablesKeys.includes(lhsBool)) {\n                  this.variables[lhsBool] = false;\n                } else if (\n                  (lhs.length > 0 && singleDigitRegex.test(lhs[0][0])) ||\n                  exprParser.getTokens().some((tok) => tok.strForm === lhsBool)\n                ) {\n                  this.setErrorMessage(\n                    \"Interpreter: In the line '\" +\n                      line +\n                      \"', the variable '\" +\n                      lhsBool +\n                      \"' is a number or is used for math.\"\n                  );\n                } else {\n                  this.variables[lhsBool] = false;\n                }\n              }\n\n              // Sets true boolean values.\n              else {\n                if (variablesKeys.includes(lhs[0])) {\n                  this.variables[lhs[0]] = true;\n                } else if (\n                  (lhs.length > 0 && singleDigitRegex.test(lhs[0][0])) ||\n                  exprParser.getTokens().some((tok) => tok.strForm === lhs[0])\n                ) {\n                  this.setErrorMessage(\n                    \"Interpreter: In the line '\" +\n                      line +\n                      \"', the variable '\" +\n                      lhs[0] +\n                      \"' is a number or is used for math.\"\n                  );\n                } else {\n                  this.variables[lhs[0]] = true;\n                }\n              }\n            }\n\n            // Syntax: set EXPR, where EXPR is a math expression and not equation.\n            // This is computed as set name = EXPR.\n            else if (variablesKeys.includes(lhs[0])) {\n              // Attempts to compute the LHS expression.\n              try {\n                result = exprParser.eval(lhs.join(\" \"));\n              } catch (e) {\n                if (e instanceof Error) {\n                  this.setErrorMessage(\"Interpreter: In the line '\" + line + \"', \" + e.message);\n                } else {\n                  this.setErrorMessage(\"Interpreter: In the line '\" + line + \"', \" + e);\n                }\n              }\n\n              // Parses the computed result as a bool.\n              if (result === \"true\" || result === \"false\") {\n                resultVal = result === \"true\";\n              }\n\n              // Parses the computed result as a number.\n              else {\n                if (numberRegex.test(result)) {\n                  resultVal = parseFloat(result);\n                } else {\n                  this.setErrorMessage(\n                    \"Interpreter: In the line '\" +\n                      line +\n                      \"', the expression \" +\n                      lhs.join(\" \") +\n                      \" should be a number, but \" +\n                      result +\n                      \" was computed instead.\"\n                  );\n                }\n              }\n\n              this.variables[lhs[0]] = resultVal as number | boolean;\n            } else {\n              this.setErrorMessage(\n                \"Interpreter: In the line '\" + line + \"', the variable \" + lhs[0] + \" doesn't exist yet.\"\n              );\n            }\n          } else {\n            this.setErrorMessage(\n              \"Interpreter: In the line '\" +\n                line +\n                \"', you need to provide a variable name to set, using syntax like set a, set !a, or a mathematical expression.\"\n            );\n          }\n        }\n\n        // Deletes the line just processed.\n        if (endOfLine >= 0) {\n          textLeft = textLeft.substring(textLeft.indexOf(\"\\n\") + 1);\n        } else {\n          textLeft = \"\";\n        }\n      }\n      //#endregion\n\n      //#region Print variables. Syntax: get name.\n      // Syntax: get name.\n      else if (textLeft.startsWith(\"get\")) {\n        if (words.length === 2) {\n          if (this.variables[words[1]] !== undefined) {\n            this.content.push(this.addOutput(this.variables[words[1]].toString()));\n          } else {\n            this.setErrorMessage(\"Interpreter: In the line '\" + line + \"', variable \" + words[1] + \" does not exist.\");\n          }\n        } else {\n          this.setErrorMessage(\"Interpreter: In the line '\" + line + \"', only one word can follow 'get'.\");\n        }\n\n        // Deletes the line just processed.\n        if (endOfLine >= 0) {\n          textLeft = textLeft.substring(textLeft.indexOf(\"\\n\") + 1);\n        } else {\n          textLeft = \"\";\n        }\n      }\n      //#endregion\n\n      //#region Immediately jumps to another forks. Syntax: goto forkname.\n      // Handles syntax: goto forkname.\n      else if (textLeft.startsWith(\"goto\")) {\n        let forkName = line.substring(4).replace(whitespaceRegex, \"\").toLowerCase();\n\n        if (this.entries[forkName] !== undefined) {\n          // Ensures this page is considered visited, then executes the page being jumped to. When\n          // execution flow returns, this exits out of everything.\n          this.visitFork();\n          this.setFork(forkName);\n          this.stopEvaluation = true;\n          return;\n        } else {\n          this.setErrorMessage(\n            \"Interpreter: In the line '\" +\n              textLeft +\n              \"', cannot navigate to fork '\" +\n              forkName +\n              \"' because it does not exist.\"\n          );\n        }\n\n        // Deletes the line just processed.\n        if (endOfLine >= 0) {\n          textLeft = textLeft.substring(textLeft.indexOf(\"\\n\") + 1);\n        } else {\n          textLeft = \"\";\n        }\n      }\n      //#endregion\n\n      //#region Set text color. Syntax: color ffffff, color fff.\n      // Handles syntax: color ffffff (and other hex codes).\n      else if (textLeft.startsWith(\"color\")) {\n        let color = line.substring(5).trim().toLowerCase();\n        if (!colorRegex.test(color)) {\n          this.setErrorMessage(\n            \"Interpreter: In the line '\" +\n              line +\n              \"', color must be given in hex format. It can only include numbers 1-9 and upper or lowercase a-f.\"\n          );\n        } else if (color.length !== 6 && color.length !== 3) {\n          this.setErrorMessage(\n            \"Interpreter: In the line '\" +\n              line +\n              \"', color must be given in hex format using 3 or 6 digits. For example, f00 or 8800f0.\"\n          );\n        } else {\n          this.currentOutputStyles.colorDark = color;\n          this.currentOutputStyles.colorLight = color;\n        }\n\n        // Deletes the line just processed.\n        if (endOfLine >= 0) {\n          textLeft = textLeft.substring(textLeft.indexOf(\"\\n\") + 1);\n        } else {\n          textLeft = \"\";\n        }\n      }\n      //#endregion\n\n      // Anything left is an error.\n      else {\n        this.setErrorMessage(\n          \"Interpreter: In the line '\" +\n            line +\n            \"', unexpected symbols encountered. Ensure all output text is wrapped in single braces and there are no extra braces inside.\"\n        );\n\n        // Skips the unprocessable line.\n        textLeft = textLeft.substring(textLeft.indexOf(\"\\n\") + 1);\n      }\n    }\n  }\n\n  /** Initializes or resets the interpreter states. */\n  private refreshInterpreter() {\n    this.actions = [];\n    this.content = [];\n    this.currentOptionStyles = {};\n    this.currentOptionHighlightStyles = {};\n    this.currentOutputStyles = {};\n    this.errorMessage = \"\";\n    this.fork = \"\";\n    this.log = [];\n    this.options = [];\n    this.timers = [];\n    this.variables = {};\n    this.variablesPrev = {};\n\n    this.refreshInterpreterGuiStyles();\n  }\n\n  /** Initializes or resets the gui styles. */\n  private refreshInterpreterGuiStyles() {\n    const combinedProps = this.props as CombinedProps;\n\n    // Updates the background color of the runner.\n    const runner = document.getElementById(idRunnerWrapper);\n\n    if (runner) {\n      if (combinedProps.playerStorySettings.playerStoryRunnerStyles.background.type === \"plain\") {\n        runner.style[\"backgroundColor\"] =\n          combinedProps.theme.themeType === ThemeTypes.Light\n            ? combinedProps.playerStorySettings.playerStoryRunnerStyles.background.colorLight ||\n              combinedProps.theme.theme.semanticColors.bodyBackground\n            : combinedProps.playerStorySettings.playerStoryRunnerStyles.background.colorDark ||\n              combinedProps.theme.theme.semanticColors.bodyBackground;\n      } else if (combinedProps.authorStorySettings.authorStoryRunnerStyles.background.type === \"plain\") {\n        runner.style[\"backgroundColor\"] =\n          combinedProps.theme.themeType === ThemeTypes.Light\n            ? combinedProps.authorStorySettings.authorStoryRunnerStyles.background.colorLight ||\n              combinedProps.theme.theme.semanticColors.bodyBackground\n            : combinedProps.authorStorySettings.authorStoryRunnerStyles.background.colorDark ||\n              combinedProps.theme.theme.semanticColors.bodyBackground;\n      }\n    }\n  }\n\n  /** Called when a restart link is pressed or restart is invoked. */\n  private restartGame = () => {\n    this.refreshInterpreter();\n\n    const entriesKeys = Object.keys(this.entries);\n    this.setFork(entriesKeys[0]);\n  };\n\n  /** Empties the log or updates it, depending on interpreter options. */\n  private updateLog() {\n    const combinedProps = this.props as CombinedProps;\n\n    if (\n      combinedProps.authorStorySettings.authorStoryRunnerOptions.hideLog ||\n      combinedProps.authorStorySettings.authorStoryRunnerOptions.logLimit === 0\n    ) {\n      this.log = [];\n    } else {\n      this.log.push(...this.content);\n    }\n  }\n\n  /**\n   * Called when a fork is finished executing or is stopped so another fork can run, in which this\n   * should execute immediately.\n   */\n  private visitFork() {\n    // Automatically sets variables to indicate pages were visited.\n    if (this.variables[\"visited\" + this.fork] === undefined) {\n      this.variables[\"visited\" + this.fork] = true;\n    }\n  }\n}\n\nexport const StoryInterpreter = connect(mapStateToProps, mapDispatchToProps, undefined, {\n  forwardRef: true,\n})(StoryInterpreterC);\n","/**\n * Adapted by Benyl on StackOverflow at https://stackoverflow.com/a/32537932/7197632 based on the Mersenne Twister\n * algorithm at https://gist.github.com/banksean/300494. This is used because as of October 2020, there is no ECMA\n * standardized support for seeding a random number, and it's useful for debugging.\n */\nexport class Random {\n  static N = 624;\n  static M = 397;\n  static MATRIX_A = 0x9908b0df;\n  /* constant vector a */\n  static UPPER_MASK = 0x80000000;\n  /* most significant w-r bits */\n  static LOWER_MASK = 0x7fffffff;\n  /* least significant r bits */\n\n  mt = new Array(Random.N);\n  /* the array for the state vector */\n  mti = Random.N + 1;\n  /* mti==N+1 means mt[N] is not initialized */\n\n  /** The seed used when constructing the RNG. Read only. */\n  public readonly seed: number | null = null;\n\n  constructor(seed: number | null = null) {\n    if (seed == null) {\n      this.seed = new Date().getTime();\n    } else {\n      this.seed = seed;\n    }\n\n    this.init_genrand(this.seed);\n  }\n\n  private init_genrand(s: number) {\n    this.mt[0] = s >>> 0;\n    for (this.mti = 1; this.mti < Random.N; this.mti++) {\n      const s2 = this.mt[this.mti - 1] ^ (this.mt[this.mti - 1] >>> 30);\n      this.mt[this.mti] = ((((s2 & 0xffff0000) >>> 16) * 1812433253) << 16) + (s2 & 0x0000ffff) * 1812433253 + this.mti;\n      /* See Knuth TAOCP Vol2. 3rd Ed. P.106 for multiplier. */\n      /* In the previous versions, MSBs of the seed affect   */\n      /* only MSBs of the array mt[].                        */\n      /* 2002/01/09 modified by Makoto Matsumoto             */\n      this.mt[this.mti] >>>= 0;\n      /* for >32 bit machines */\n    }\n  }\n\n  /**\n   * generates a random number on [0,0xffffffff]-interval\n   * @private\n   */\n  private _nextInt32(): number {\n    var y: number;\n    var mag01 = [0x0, Random.MATRIX_A];\n    /* mag01[x] = x * MATRIX_A  for x=0,1 */\n\n    if (this.mti >= Random.N) {\n      /* generate N words at one time */\n      var kk: number;\n\n      if (this.mti === Random.N + 1)\n        /* if init_genrand() has not been called, */\n        this.init_genrand(5489);\n      /* a default initial seed is used */\n\n      for (kk = 0; kk < Random.N - Random.M; kk++) {\n        y = (this.mt[kk] & Random.UPPER_MASK) | (this.mt[kk + 1] & Random.LOWER_MASK);\n        this.mt[kk] = this.mt[kk + Random.M] ^ (y >>> 1) ^ mag01[y & 0x1];\n      }\n      for (; kk < Random.N - 1; kk++) {\n        y = (this.mt[kk] & Random.UPPER_MASK) | (this.mt[kk + 1] & Random.LOWER_MASK);\n        this.mt[kk] = this.mt[kk + (Random.M - Random.N)] ^ (y >>> 1) ^ mag01[y & 0x1];\n      }\n      y = (this.mt[Random.N - 1] & Random.UPPER_MASK) | (this.mt[0] & Random.LOWER_MASK);\n      this.mt[Random.N - 1] = this.mt[Random.M - 1] ^ (y >>> 1) ^ mag01[y & 0x1];\n\n      this.mti = 0;\n    }\n\n    y = this.mt[this.mti++];\n\n    /* Tempering */\n    y ^= y >>> 11;\n    y ^= (y << 7) & 0x9d2c5680;\n    y ^= (y << 15) & 0xefc60000;\n    y ^= y >>> 18;\n\n    return y >>> 0;\n  }\n\n  /**\n   * generates an int32 pseudo random number\n   * @param range: an optional [from, to] range, if not specified the result will be in range [0,0xffffffff]\n   * @return {number}\n   */\n  nextInt32(range: [number, number] | null = null): number {\n    var result = this._nextInt32();\n    if (range == null) {\n      return result;\n    }\n\n    return (result % (range[1] - range[0])) + range[0];\n  }\n\n  /**\n   * generates a random number on [0,0x7fffffff]-interval\n   */\n  nextInt31(): number {\n    return this._nextInt32() >>> 1;\n  }\n\n  /**\n   * generates a random number on [0,1]-real-interval\n   */\n  nextNumber(): number {\n    return this._nextInt32() * (1.0 / 4294967295.0);\n  }\n\n  /**\n   * generates a random number on [0,1) with 53-bit resolution\n   */\n  nextNumber53(): number {\n    var a = this._nextInt32() >>> 5,\n      b = this._nextInt32() >>> 6;\n    return (a * 67108864.0 + b) * (1.0 / 9007199254740992.0);\n  }\n}\n","/** Represents which direction to evaluate multiple homogenous operators in. */\nexport enum associativity {\n  /** Left associative operators compute a ~ b ~ c as (a ~ b) ~ c. */\n  left,\n\n  /** Right associative operators compute a ~ b ~ c as a ~ (b ~ c). */\n  right,\n}\n","/** Determines how operands interact with an operator token. */\nexport enum placements {\n  /** For unary tokens that use the preceding number, like negation. */\n  left,\n\n  /** For unary tokens that use the following number, like factorial. */\n  right,\n\n  /** For binary tokens. */\n  both,\n}\n","import { associativity } from \"./Associativity\";\nimport { placements } from \"./Placements\";\nimport { IToken, tokenEvalFunc } from \"./utils\";\n\n/** An operator token. */\nexport class TokenOp implements IToken {\n  public strForm: string;\n  public placement: placements;\n  public assoc: associativity;\n  public prec: number;\n  public numArgs: number;\n  public function: tokenEvalFunc;\n\n  constructor(\n    opPlacement: placements,\n    associativity: associativity,\n    precedence: number,\n    format: string,\n    operation: tokenEvalFunc\n  ) {\n    this.placement = opPlacement;\n    this.assoc = associativity;\n    this.prec = precedence;\n\n    if (opPlacement === placements.both) {\n      this.numArgs = 2;\n    } else {\n      this.numArgs = 1;\n    }\n\n    this.strForm = format;\n    this.function = operation;\n  }\n\n  /** Returns true if all properties of each token are the same. */\n  public equals(obj: TokenOp) {\n    return (\n      this.strForm === obj.strForm &&\n      this.placement === obj.placement &&\n      this.assoc === obj.assoc &&\n      this.prec === obj.prec &&\n      this.numArgs === obj.numArgs &&\n      this.function === obj.function\n    );\n  }\n}\n","import { IToken } from \"./utils\";\n\n/** A symbolic token to store a general symbol. */\nexport class TokenSym implements IToken {\n  public strForm: string;\n\n  constructor(name: string) {\n    this.strForm = name;\n  }\n\n  /** Returns true if all properties of each token are the same. */\n  public equals(obj: TokenSym) {\n    return this.strForm === obj.strForm;\n  }\n}\n","// TODO: localize all errors in this file.\n\nimport { associativity } from \"./Associativity\";\nimport { placements } from \"./Placements\";\nimport { TokenBool } from \"./TokenBool\";\nimport { TokenFunc } from \"./TokenFunc\";\nimport { TokenId } from \"./TokenId\";\nimport { TokenNum } from \"./TokenNum\";\nimport { TokenOp } from \"./TokenOp\";\nimport { TokenSym } from \"./TokenSym\";\nimport { IToken, numberRegex } from \"./utils\";\n\n/** Tokenizes mathematical expressions to evaluate or symbolically manipulate them. */\nexport class Parser {\n  /** If true, parentheses groups must always be balanced. False by default. */\n  public optRequireRightPars = false;\n\n  /** If true, tokens that aren't recognized will be added as unknown variables. True by default. */\n  public optIncludeUnknowns = true;\n\n  /**\n   * Null identifiers will be replaced with this token for evaluation, if specified. Else, an error\n   * will be thrown. Null by default.\n   */\n  public optUnknownDefault: IToken | null = null;\n\n  /** The sine function for radians. */\n  public Fsin = new TokenFunc(\"sin\", 1, (operands: IToken[]) => {\n    if (operands[0] instanceof TokenNum) {\n      const n0 = operands[0] as TokenNum;\n\n      return new TokenNum(Math.sin(n0.value));\n    }\n\n    return null;\n  });\n\n  /** The cosine function for radians. */\n  public Fcos = new TokenFunc(\"cos\", 1, (operands: IToken[]) => {\n    if (operands[0] instanceof TokenNum) {\n      const n0 = operands[0] as TokenNum;\n\n      return new TokenNum(Math.cos(n0.value));\n    }\n\n    return null;\n  });\n\n  /** The tangent function for radians. */\n  public Ftan = new TokenFunc(\"tan\", 1, (operands: IToken[]) => {\n    if (operands[0] instanceof TokenNum) {\n      const n0 = operands[0] as TokenNum;\n\n      return new TokenNum(Math.tan(n0.value));\n    }\n\n    return null;\n  });\n\n  /** Rounds a single number to the nearest integer. */\n  public Frnd = new TokenFunc(\"round\", 1, (operands: IToken[]) => {\n    if (operands[0] instanceof TokenNum) {\n      const n0 = operands[0] as TokenNum;\n\n      return new TokenNum(Math.round(n0.value));\n    }\n\n    return null;\n  });\n\n  /** Rounds a number to the nearest multiple of another. */\n  public Frnd2 = new TokenFunc(\"round\", 2, (operands: IToken[]) => {\n    if (operands[0] instanceof TokenNum && operands[1] instanceof TokenNum) {\n      const n0 = operands[0] as TokenNum;\n      const n1 = operands[1] as TokenNum;\n\n      return new TokenNum(Math.round(n0.value / n1.value) * n1.value);\n    }\n\n    return null;\n  });\n\n  /** The addition operator. */\n  public Add = new TokenOp(placements.both, associativity.left, 6, \"+\", (operands: IToken[]) => {\n    if (operands[0] instanceof TokenNum && operands[1] instanceof TokenNum) {\n      const n0 = operands[0] as TokenNum;\n      const n1 = operands[1] as TokenNum;\n\n      return new TokenNum(n0.value + n1.value);\n    }\n\n    return null;\n  });\n\n  /** The subtraction operator. */\n  public Sub = new TokenOp(placements.both, associativity.left, 6, \"-\", (operands: IToken[]) => {\n    if (operands[0] instanceof TokenNum && operands[1] instanceof TokenNum) {\n      const n0 = operands[0] as TokenNum;\n      const n1 = operands[1] as TokenNum;\n\n      return new TokenNum(n0.value - n1.value);\n    }\n\n    return null;\n  });\n\n  /** The multiplication operator. */\n  public Mlt = new TokenOp(placements.both, associativity.left, 7, \"*\", (operands: IToken[]) => {\n    if (operands[0] instanceof TokenNum && operands[1] instanceof TokenNum) {\n      const n0 = operands[0] as TokenNum;\n      const n1 = operands[1] as TokenNum;\n\n      return new TokenNum(n0.value * n1.value);\n    }\n\n    return null;\n  });\n\n  /** The division operator. */\n  public Div = new TokenOp(placements.both, associativity.left, 7, \"/\", (operands: IToken[]) => {\n    if (operands[0] instanceof TokenNum && operands[1] instanceof TokenNum) {\n      const n0 = operands[0] as TokenNum;\n      const n1 = operands[1] as TokenNum;\n\n      if (n1.value === 0) {\n        throw new Error(`Parser: The expression ${n0.strForm} / ${n1.strForm} causes division by zero.`);\n      }\n\n      return new TokenNum(n0.value / n1.value);\n    }\n\n    return null;\n  });\n\n  /** The modulus operator. */\n  public Mod = new TokenOp(placements.both, associativity.left, 7, \"%\", (operands: IToken[]) => {\n    if (operands[0] instanceof TokenNum && operands[1] instanceof TokenNum) {\n      const n0 = operands[0] as TokenNum;\n      const n1 = operands[1] as TokenNum;\n\n      if (n1.value === 0) {\n        throw new Error(`Parser: The expression ${n0.strForm} % ${n1.strForm} causes division by zero.`);\n      }\n\n      return new TokenNum(n0.value % n1.value);\n    }\n\n    return null;\n  });\n\n  /** The negation operator. */\n  public Neg = new TokenOp(placements.right, associativity.right, 8, \"-\", (operands: IToken[]) => {\n    if (operands[1] instanceof TokenNum) {\n      const n1 = operands[1] as TokenNum;\n      return new TokenNum(-n1.value);\n    }\n\n    return null;\n  });\n\n  /** The exponentiation operator. */\n  public Exp = new TokenOp(placements.both, associativity.right, 8, \"^\", (operands: IToken[]) => {\n    if (operands[0] instanceof TokenNum && operands[1] instanceof TokenNum) {\n      const n0 = operands[0] as TokenNum;\n      const n1 = operands[1] as TokenNum;\n\n      return new TokenNum(Math.pow(n0.value, n1.value));\n    }\n\n    return null;\n  });\n\n  /** The factorial operator. */\n  public Fac = new TokenOp(placements.left, associativity.left, 9, \"!\", (operands: IToken[]) => {\n    if (operands[0] instanceof TokenNum) {\n      const n0 = operands[0] as TokenNum;\n      let givenVal = n0.value;\n      let value = 1;\n\n      while (n0.value > 1) {\n        value *= givenVal--;\n      }\n\n      return new TokenNum(value);\n    }\n\n    return null;\n  });\n\n  /** The equality operator. */\n  public Eq = new TokenOp(placements.both, associativity.left, 4, \"=\", (operands: IToken[]) => {\n    if (operands[0] instanceof TokenNum && operands[1] instanceof TokenNum) {\n      const n0 = operands[0] as TokenNum;\n      const n1 = operands[1] as TokenNum;\n\n      return new TokenBool(n0.value === n1.value);\n    }\n\n    if (operands[0] instanceof TokenBool && operands[1] instanceof TokenBool) {\n      const n0 = operands[0] as TokenBool;\n      const n1 = operands[1] as TokenBool;\n\n      return new TokenBool(n0.value === n1.value);\n    }\n\n    return null;\n  });\n\n  /** The inequality operator. */\n  public NotEq = new TokenOp(placements.both, associativity.left, 4, \"!=\", (operands: IToken[]) => {\n    if (operands[0] instanceof TokenNum && operands[1] instanceof TokenNum) {\n      const n0 = operands[0] as TokenNum;\n      const n1 = operands[1] as TokenNum;\n\n      return new TokenBool(n0.value !== n1.value);\n    }\n\n    if (operands[0] instanceof TokenBool && operands[1] instanceof TokenBool) {\n      const n0 = operands[0] as TokenBool;\n      const n1 = operands[1] as TokenBool;\n\n      return new TokenBool(n0.value !== n1.value);\n    }\n\n    return null;\n  });\n\n  /** The greater-than operator. */\n  public Gt = new TokenOp(placements.both, associativity.left, 5, \">\", (operands: IToken[]) => {\n    if (operands[0] instanceof TokenNum && operands[1] instanceof TokenNum) {\n      const n0 = operands[0] as TokenNum;\n      const n1 = operands[1] as TokenNum;\n\n      return new TokenBool(n0.value > n1.value);\n    }\n\n    return null;\n  });\n\n  /** The greater-than-or-equal operator. */\n  public Gte = new TokenOp(placements.both, associativity.left, 5, \">=\", (operands: IToken[]) => {\n    if (operands[0] instanceof TokenNum && operands[1] instanceof TokenNum) {\n      const n0 = operands[0] as TokenNum;\n      const n1 = operands[1] as TokenNum;\n\n      return new TokenBool(n0.value >= n1.value);\n    }\n\n    return null;\n  });\n\n  /** The less-than operator. */\n  public Lt = new TokenOp(placements.both, associativity.left, 5, \"<\", (operands: IToken[]) => {\n    if (operands[0] instanceof TokenNum && operands[1] instanceof TokenNum) {\n      const n0 = operands[0] as TokenNum;\n      const n1 = operands[1] as TokenNum;\n\n      return new TokenBool(n0.value < n1.value);\n    }\n\n    return null;\n  });\n\n  /** The less-than-or-equal operator. */\n  public Lte = new TokenOp(placements.both, associativity.left, 5, \"<=\", (operands: IToken[]) => {\n    if (operands[0] instanceof TokenNum && operands[1] instanceof TokenNum) {\n      const n0 = operands[0] as TokenNum;\n      const n1 = operands[1] as TokenNum;\n\n      return new TokenBool(n0.value <= n1.value);\n    }\n\n    return null;\n  });\n\n  /** The logical not operator. */\n  public LogNot = new TokenOp(placements.right, associativity.left, 3, \"!\", (operands: IToken[]) => {\n    if (operands[1] instanceof TokenBool) {\n      const n1 = operands[1] as TokenBool;\n\n      return new TokenBool(!n1.value);\n    }\n\n    return null;\n  });\n\n  /** The logical and operator. */\n  public LogAnd = new TokenOp(placements.both, associativity.left, 1, \"&\", (operands: IToken[]) => {\n    if (operands[0] instanceof TokenBool && operands[1] instanceof TokenBool) {\n      const n0 = operands[0] as TokenBool;\n      const n1 = operands[1] as TokenBool;\n\n      return new TokenBool(n0.value && n1.value);\n    }\n\n    return null;\n  });\n\n  /** The logical or operator. */\n  public LogOr = new TokenOp(placements.both, associativity.left, 2, \"|\", (operands: IToken[]) => {\n    if (operands[0] instanceof TokenBool && operands[1] instanceof TokenBool) {\n      const n0 = operands[0] as TokenBool;\n      const n1 = operands[1] as TokenBool;\n\n      return new TokenBool(n0.value || n1.value);\n    }\n\n    return null;\n  });\n\n  /** Represents the literal boolean value of false. */\n  public varFalse = new TokenId(\"false\", false);\n\n  /** Represents the literal boolean value of true. */\n  public varTrue = new TokenId(\"true\", true);\n\n  /** The mathematical constant, Pi. */\n  public varPi = new TokenId(\"pi\", Math.PI);\n\n  /** Represents a left parenthesis. */\n  public lPar = new TokenSym(\"(\");\n\n  /** Represents a right parenthesis. */\n  public rPar = new TokenSym(\")\");\n\n  /** Represents a function argument separator. */\n  public argSep = new TokenSym(\",\");\n\n  // prettier-ignore\n  /** A list of all tokens to parse with. */\n  public tokens: IToken[] = [];\n\n  constructor() {\n    this.resetTokens();\n  }\n\n  /** Adds a string-lowercased copy of the function. */\n  public addFunction(token: TokenFunc) {\n    this.tokens.push(new TokenFunc(token.strForm.toLowerCase(), token.numArgs, token.function));\n    this.tokens = this.tokens.sort((a, b) => (a.strForm < b.strForm ? 1 : -1));\n  }\n\n  /** Adds a string-lowercased copy of the identifier. */\n  public addIdentifier(token: TokenId) {\n    this.tokens.push(new TokenId(token.strForm.toLowerCase(), token.value));\n    this.tokens = this.tokens.sort((a, b) => (a.strForm < b.strForm ? 1 : -1));\n  }\n\n  /** Adds a string-lowercased copy of the operator. */\n  public addOperator(token: TokenOp) {\n    this.tokens.push(\n      new TokenOp(token.placement, token.assoc, token.prec, token.strForm.toLowerCase(), token.function)\n    );\n\n    // Sorts tokens in reverse lexicographic order to support deferring.\n    this.tokens = this.tokens.sort((a, b) => (a.strForm < b.strForm ? 1 : -1));\n  }\n\n  /** Parses an expression with operators, functions, and identifiers. */\n  public eval(expression: string) {\n    return this.evalTokens(this.tokenize(expression));\n  }\n\n  /** Parses a pre-tokenized expression. Invalid tokenization may result in unanticipated errors. */\n  public evalTokens(tokensList: IToken[]) {\n    // Substitutes values for identifiers.\n    for (let i = 0; i < tokensList.length; i++) {\n      if (tokensList[i] instanceof TokenId) {\n        const tokId = tokensList[i] as TokenId;\n\n        // Inserts any known values for a token.\n        if (tokId.value !== null) {\n          if (typeof tokId.value === \"number\") {\n            tokensList[i] = new TokenNum(tokId.value);\n          } else if (typeof tokId.value === \"boolean\") {\n            tokensList[i] = new TokenBool(tokId.value);\n          }\n        }\n\n        // Replaces unknown identifiers with a value or fails.\n        else if (this.optUnknownDefault !== null) {\n          tokensList[i] = this.optUnknownDefault;\n        } else {\n          throw new Error(\"Parser: The identifier '\" + tokensList[i].strForm + \"' is unknown and can't be computed.\");\n        }\n      }\n    }\n\n    const functions = this.tokens.filter((token) => token instanceof TokenFunc) as TokenFunc[];\n\n    // Solves each parenthesis group from deepest depth outward.\n    while (true) {\n      // Finds the end of the nearest complete sub-expression.\n      let rbrPos = tokensList.indexOf(this.rPar) + 1;\n      let subExpressionEnd = rbrPos >= 1 ? rbrPos : tokensList.length;\n\n      // Finds the start of the nearest complete sub-expression.\n      let lbrPos = tokensList.slice(0, subExpressionEnd).lastIndexOf(this.lPar);\n      let subExpressionBegin = lbrPos >= 0 ? lbrPos : 0;\n\n      // Isolates the sub-expression.\n      let expressionLHS = tokensList.slice(0, subExpressionBegin);\n      let expressionRHS = tokensList.slice(subExpressionEnd, tokensList.length);\n      let subExpression = tokensList.slice(subExpressionBegin, subExpressionEnd);\n\n      // Includes functions and picks a proper overload.\n      let subExpressionFunc: TokenFunc | null = null;\n\n      if (expressionLHS[expressionLHS.length - 1] instanceof TokenFunc) {\n        const tokFunc = expressionLHS[expressionLHS.length - 1] as TokenFunc;\n        expressionLHS.splice(expressionLHS.length - 1, 1);\n\n        let numArgs = 1;\n\n        subExpression.forEach((tok) => {\n          if (tok === this.argSep) {\n            numArgs++;\n          }\n        });\n\n        subExpressionFunc = functions.find((f) => f.numArgs === numArgs && f.strForm === tokFunc.strForm) ?? null;\n      }\n\n      // Evaluates sub-expressions.\n      tokensList = expressionLHS;\n      tokensList.push(...this.evalNoPar(subExpression, subExpressionFunc));\n      tokensList.push(...expressionRHS);\n\n      // Returns when everything has been parsed.\n      if (expressionLHS.length === 0 && expressionRHS.length === 0) {\n        let result = \"\";\n\n        for (let i = 0; i < tokensList.length; i++) {\n          result += tokensList[i].strForm;\n        }\n\n        return result;\n      }\n    }\n  }\n\n  /**\n   * Parses a non-relational expression without parentheses with an optional argument to treat the\n   * expression as function arguments.\n   */\n  public evalNoPar = (subExpression: IToken[], func: TokenFunc | null): IToken[] => {\n    let operators = this.tokens.filter((tok) => tok instanceof TokenOp) as TokenOp[];\n    let result: IToken[] = [];\n\n    // Creates a string representation of the token list for errors.\n    let subExpressionStr = \"\";\n\n    for (let i = 0; i < subExpression.length; i++) {\n      subExpressionStr += subExpression[i].strForm;\n    }\n\n    // Strips () and catches empty expressions.\n    if (\n      this.optRequireRightPars &&\n      subExpression[0] === this.lPar &&\n      subExpression[subExpression.length - 1] !== this.rPar\n    ) {\n      throw new Error(\"Parser: The expression '\" + subExpressionStr + \"' is missing a right parenthesis at the end.\");\n    }\n\n    subExpression.filter((tok) => tok === this.lPar || tok === this.rPar);\n\n    if (subExpression.length === 0) {\n      throw new Error(\"Parser: an empty parenthesis group was provided; there is nothing to process within it.\");\n    }\n\n    // Parses each argument separately, then applies the function.\n    if (func !== null) {\n      let args = this.split(subExpression, this.argSep);\n      let argVals: IToken[] = [];\n\n      // Catches overloads with the wrong number of arguments.\n      if (func.numArgs !== args.length) {\n        throw new Error(\n          \"Parser: In expression '\" +\n            subExpressionStr +\n            \"', the number of arguments for \" +\n            func.strForm +\n            \" should be \" +\n            func.numArgs +\n            \", but \" +\n            args.length +\n            \" arguments were given.\"\n        );\n      }\n\n      // Simplifies each argument.\n      for (let i = 0; i < args.length; i++) {\n        const subResult = this.evalNoPar(args[i], null);\n\n        if (subResult[0] instanceof TokenNum || subResult[0] instanceof TokenBool) {\n          argVals[i] = subResult[0];\n        } else {\n          throw new Error(\n            \"Parser: In expression '\" +\n              subExpressionStr +\n              \"', a boolean argument was provided instead of a decimal value.\"\n          );\n        }\n      }\n\n      // Applies functions.\n      const immediateResult = func.function(argVals);\n      if (immediateResult === null) {\n        throw new Error(\n          \"Parser: In expression '\" + subExpressionStr + \"', arguments do not match parameter types used.\"\n        );\n      }\n\n      result.push(immediateResult);\n      return result;\n    }\n\n    // Minuses are binary by default; determines which ones are unary. If the first token is a\n    // minus, it's a negation.\n    if (subExpression[0] === this.Sub) {\n      subExpression[0] = this.Neg;\n    }\n\n    // Performs left-to-right modifications on the token list.\n    for (let i = 1; i < subExpression.length; i++) {\n      // A minus after a binary operator or negation is a negation.\n      if (\n        (subExpression[i] === this.Sub &&\n          subExpression[i - 1] instanceof TokenOp &&\n          ((subExpression[i - 1] as TokenOp).numArgs > 1 || subExpression[i - 1] === this.Neg)) ||\n        subExpression[i - 1] instanceof TokenFunc\n      ) {\n        subExpression[i] = this.Neg;\n      }\n    }\n\n    // Gets max precedence within sub-expression.\n    let opTokens = subExpression.filter((tok) => tok instanceof TokenOp) as TokenOp[];\n\n    let maxPrecedence = 0;\n    opTokens.forEach((tok: TokenOp) => {\n      if (tok.prec > maxPrecedence) {\n        maxPrecedence = tok.prec;\n      }\n    });\n\n    // Computes all operators with equal precedence.\n    while (maxPrecedence > 0) {\n      let isRightAssociative = operators.some((tok) => maxPrecedence === tok.prec && tok.assoc === associativity.right);\n\n      // Iterates through each token forwards or backwards.\n      let j = isRightAssociative ? subExpression.length - 1 : 0;\n\n      while ((isRightAssociative && j >= 0) || (!isRightAssociative && j < subExpression.length)) {\n        if (subExpression[j] instanceof TokenOp && (subExpression[j] as TokenOp).prec === maxPrecedence) {\n          let opToken = subExpression[j] as TokenOp;\n          let argVals: IToken[] = [subExpression[j - 1] ?? null, subExpression[j + 1] ?? null];\n          let result: IToken | null = null;\n\n          // Handles missing arguments.\n          if (argVals[0] === null && (opToken.placement === placements.both || opToken.placement === placements.left)) {\n            throw new Error(\n              \"Parser: In '\" +\n                subExpressionStr +\n                \"', the '\" +\n                subExpression[j].strForm +\n                \"' operator is missing a lefthand operand.\"\n            );\n          } else if (\n            argVals[1] === null &&\n            (opToken.placement === placements.both || opToken.placement === placements.right)\n          ) {\n            throw new Error(\n              \"Parser: In '\" +\n                subExpressionStr +\n                \"', the '\" +\n                subExpression[j].strForm +\n                \"' operator is missing a righthand operand.\"\n            );\n          }\n\n          // Applies each operator.\n          result = opToken.function(argVals);\n\n          // Removes affected tokens and inserts new value.\n          if (result === null) {\n            throw new Error(\"In expression '\" + subExpressionStr + \"', operand type(s) do not match operator.\");\n          } else {\n            subExpression[j] = result;\n          }\n\n          if (opToken.placement === placements.left) {\n            subExpression.splice(j - 1, 1);\n            j += isRightAssociative ? 0 : -1;\n          } else if (opToken.placement === placements.right) {\n            subExpression.splice(j + 1, 1);\n            j += isRightAssociative ? 1 : 0;\n          } else if (opToken.placement === placements.both) {\n            subExpression.splice(j + 1, 1);\n            subExpression.splice(j - 1, 1);\n            j += isRightAssociative ? 0 : -1;\n          }\n        }\n\n        // Moves to next token to evaluate.\n        if (isRightAssociative) {\n          j--;\n        } else {\n          j++;\n        }\n      }\n\n      // Gets new precedence within sub-expression.\n      opTokens = subExpression.filter((tok) => tok instanceof TokenOp) as TokenOp[];\n      let maxPrecedence2 = 0;\n\n      opTokens.forEach((tok: TokenOp) => {\n        if (tok.prec > maxPrecedence2) {\n          maxPrecedence2 = tok.prec;\n        }\n      });\n    }\n\n    // Returns the final value.\n    result.push(...subExpression);\n    return result;\n  };\n\n  /** Returns the list of all tokens in use. */\n  public getTokens() {\n    return this.tokens;\n  }\n\n  /**\n   * Removes the first match for the given token from the list of tokens, if it exists. Returns\n   * true if found, false otherwise.\n   */\n  public removeToken(token: IToken) {\n    for (let i = this.tokens.length; i > 0; i--) {\n      if ((token as TokenBool).equals((this.tokens as TokenBool[])[i])) {\n        this.tokens.splice(i, 1);\n\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /** Resets to the default token list and removes all user-added tokens. */\n  public resetTokens() {\n    //Sets the token list. Omits factorial.\n    //prettier-ignore\n    this.tokens = [\n      this.Exp, this.Neg, this.Mod, this.Div, this.Mlt, this.Sub, this.Add, this.LogNot, this.LogOr, this.LogAnd,\n      this.Eq, this.Gt, this.Gte, this.Lt, this.Lte, this.NotEq,\n      this.Fsin, this.Fcos, this.Ftan, this.Frnd, this.Frnd2,\n      this.varFalse, this.varTrue, this.varPi,\n      this.lPar, this.rPar, this.argSep\n    ];\n\n    //Sorts tokens in reverse lexicographic order to support deferring.\n    this.tokens = this.tokens.sort((a, b) => (a.strForm < b.strForm ? 1 : -1));\n  }\n\n  /**\n   * Returns all consecutive items between each matched delimiter item. For example, a list\n   * containing [0, 2, 1, 3, 1] delimited by 1 will return the lists [0, 2][3].\n   */\n  public split<T>(list: T[], delimiter: T): T[][] {\n    const lists: T[][] = [];\n    const currentList: T[] = [];\n\n    // Stores the running list and creates another for each delimiter.\n    for (let i = 0; i < list.length; i++) {\n      if (list[i] === delimiter) {\n        lists.push([...currentList]);\n      } else {\n        currentList.push(list[i]);\n      }\n    }\n\n    if (currentList.length > 0) {\n      lists.push(currentList);\n    }\n\n    return lists;\n  }\n\n  /** Converts the given string to tokens. */\n  public tokenize(expression: string): IToken[] {\n    const tokensList: IToken[] = [];\n    let token = \"\";\n\n    // Catches null or whitespace strings.\n    if (expression.trim() === \"\") {\n      throw new Error(\"Parser: No expression provided.\");\n    }\n\n    // Lowercases and removes whitespaces.\n    expression = expression.replace(/\\s/gm, \"\").toLowerCase();\n\n    // Builds a token list.\n    let longestMatch: IToken | null = null;\n    let shortestMatch: IToken | null = null;\n    let candidateBeforeDefer: IToken | null = null;\n\n    for (let i = 0; i < expression.length; i++) {\n      token += expression[i];\n\n      // Matches longer tokens and tokens of the same length.\n      longestMatch = this.tokens.filter((tok) => tok.strForm === token)[0];\n\n      // Defers when the token is longer.\n      if (i !== expression.length - 1 && longestMatch?.strForm.length > token.length) {\n        shortestMatch = this.tokens.filter((tok) => tok.strForm === token)[0];\n\n        // Stores valid matches as token matching is deferred.\n        if (shortestMatch?.strForm === token) {\n          candidateBeforeDefer = shortestMatch;\n\n          // Adds the token if at end rather than deferring.\n          if (i === expression.length - 1) {\n            tokensList.push(shortestMatch);\n            token = \"\";\n            candidateBeforeDefer = null;\n          }\n        }\n      }\n\n      // Matches when there are no longer candidates.\n      else if (longestMatch !== null && (i !== expression.length - 1 || longestMatch.strForm.length === token.length)) {\n        tokensList.push(longestMatch);\n        token = \"\";\n        candidateBeforeDefer = null;\n      } else {\n        // Backtracks to the last valid token.\n        if (candidateBeforeDefer !== null) {\n          i -= token.length - candidateBeforeDefer.strForm.length;\n          tokensList.push(candidateBeforeDefer);\n          token = \"\";\n          candidateBeforeDefer = null;\n        }\n\n        // Matches literals.\n        else if (numberRegex.test(token)) {\n          const val = parseFloat(token);\n\n          // Adds the numeric token at end of string or boundary.\n          if (i === expression.length - 1 || !numberRegex.test(token + expression[i + 1])) {\n            tokensList.push(new TokenNum(val));\n            token = \"\";\n          }\n        }\n\n        // Matches unknowns by-character if allowed.\n        else if (this.optIncludeUnknowns) {\n          tokensList.push(new TokenId(token[0].toString(), null));\n          i -= token.length - 1;\n          token = \"\";\n        } else {\n          throw new Error(\"Parser: token '\" + token + \"' is not a recognized symbol.\");\n        }\n      }\n    }\n\n    // Combines contiguous tokens. If the resulting token exists, uses it. Else, adds as unknown or\n    // throws an error.\n    let combinedTokens: IToken[] = [];\n    let unknownTokenName = \"\";\n\n    // Combines contiguous unknowns. Sets tokens to be subtraction rather than negation by default.\n    for (let i = 0; i < tokensList.length; i++) {\n      // Break and add while looking ahead.\n      if (\n        i === tokensList.length - 1 ||\n        tokensList[i + 1] instanceof TokenOp ||\n        tokensList[i + 1] instanceof TokenSym\n      ) {\n        if (unknownTokenName !== \"\") {\n          unknownTokenName += tokensList[i].strForm;\n\n          if (this.optIncludeUnknowns) {\n            combinedTokens.push(new TokenId(unknownTokenName, null));\n            unknownTokenName = \"\";\n            continue;\n          } else {\n            throw new Error(\"Parser: token '\" + unknownTokenName + \"' is not a recognized symbol.\");\n          }\n        }\n      }\n\n      // Append.\n      else if (!(tokensList[i] instanceof TokenOp || tokensList[i] instanceof TokenSym)) {\n        if (unknownTokenName !== \"\" || !(tokensList[i] instanceof TokenNum)) {\n          unknownTokenName += tokensList[i].strForm;\n          continue;\n        }\n      }\n\n      // Add other tokens, favoring subtraction over negation.\n      if (tokensList[i] === this.Neg) {\n        combinedTokens.push(this.Sub);\n      } else {\n        combinedTokens.push(tokensList[i]);\n      }\n    }\n\n    return combinedTokens;\n  }\n}\n","let uniqueActionType = Number.MIN_SAFE_INTEGER;\n\n/**\n * Action types must be unique across all reducers.\n * This assigns a globally unique id every time it's called.\n */\nexport const getActionGuid = () => {\n  return (++uniqueActionType).toString();\n};\n","import { ILocalizedStringSets } from \"../localization/Localization\";\nimport { getActionGuid } from \"../redux/reduxTools\";\nimport { ISupportedTheme } from \"../themes\";\n\nexport const actions = {\n  setLocale: getActionGuid(),\n  setTheme: getActionGuid(),\n};\n\n/** Action creator to store name of preferred color theme. */\nexport const setTheme = (theme: ISupportedTheme) => {\n  return {\n    theme,\n    type: actions.setTheme,\n  };\n};\n\n/** Action creator to store (lowercase) preferred locale id such as en-us. */\nexport const setLocale = (localeId: keyof ILocalizedStringSets) => {\n  return {\n    localeId,\n    type: actions.setLocale,\n  };\n};\n","import { combineReducers, Dispatch } from \"redux\";\nimport { getSupportedLocale, ILocalizedStringSets } from \"../localization/Localization\";\nimport { ISupportedTheme, Themes, themes } from \"../themes\";\nimport { actions, setLocale, setTheme } from \"./settings.actions\";\nimport { loadTheme } from \"office-ui-fabric-react/lib/Styling\";\n\n/** The user's preferred theme. An empty string here should mean the default theme is applied. */\nconst theme = (state: ISupportedTheme = themes[Themes.DefaultLight], action: ReturnType<typeof setTheme>) => {\n  if (action.type === actions.setTheme && state.theme !== action.theme.theme) {\n    loadTheme(action.theme.theme);\n    return action.theme;\n  }\n\n  return state;\n};\n\n/** Sets the full theme based on a partial theme and injects it to update components. */\nexport const dispatchSetTheme = (dispatch: Dispatch) => async (supportedTheme: ISupportedTheme) => {\n  document.body.style.backgroundColor = supportedTheme.theme.semanticColors.bodyBackground;\n  dispatch(setTheme(supportedTheme));\n};\n\n/** The user's preferred language. */\nconst locale = (state = getSupportedLocale(), action: ReturnType<typeof setLocale>) => {\n  if (action.type === actions.setLocale) {\n    return action.localeId;\n  }\n\n  return state;\n};\n\n/** Sets the locale id in lowercase, such as en-us. */\nexport const dispatchSetLocale = (dispatch: Dispatch) => async (localeId: keyof ILocalizedStringSets) => {\n  dispatch(setLocale(localeId));\n};\n\n// Combine reducers and typescript definition.\nexport interface ISettingState {\n  locale: keyof ILocalizedStringSets;\n  theme: ISupportedTheme;\n}\n\nexport const settings = combineReducers({\n  locale,\n  theme,\n});\n","import { IRootState } from \"../../store\";\nimport { ILocalizedStringSets } from \"../localization/Localization\";\nimport { Themes, themes } from \"../themes\";\n\nconst persistStateVersion = 1;\nconst persistStateIdentifier = \"JoshuaTree\";\n\n/** The object states to persist to local storage. */\nexport interface IPersistentState {\n  localeId: keyof ILocalizedStringSets;\n  saveFormatVersion: number;\n  theme: keyof typeof themes;\n}\n\n/**\n * Saves the given state to local storage. Users must accept the storage policy for data that\n * isn't essential to the service or anything that helps identify an individual.\n */\nexport const saveToLocalStorage = (state: IRootState) => {\n  if (!state.persistence.userConsentProvided) {\n    return;\n  }\n\n  let theme = Themes.DefaultLight;\n  const themeKeys = (Object.keys(themes) as unknown) as (keyof typeof themes)[];\n\n  themeKeys.forEach((key: Themes) => {\n    const candidateThemeName = themes[key].localizedName;\n    if (candidateThemeName === state.settings.theme.localizedName) {\n      theme = key;\n    }\n  });\n\n  const newState: IPersistentState = {\n    localeId: state.settings.locale,\n    saveFormatVersion: persistStateVersion,\n    theme: theme,\n  };\n\n  localStorage.setItem(persistStateIdentifier, JSON.stringify(newState));\n};\n\n/**\n * Loads the given state from local storage. Users must have accepted the storage policy for data\n * that isn't essential to the service or anything that helps identify an individual. Returns null\n * if a key isn't found. The state returned on success contains all keys, though their values\n * aren't checked for accuracy.\n */\nexport const loadFromLocalStorage = (): IPersistentState | null => {\n  const loadedState = localStorage.getItem(persistStateIdentifier);\n  if (loadedState === null) {\n    return null;\n  }\n\n  let returnedState: Partial<IPersistentState> = {};\n\n  try {\n    returnedState = JSON.parse(loadedState) as Partial<IPersistentState>;\n  } catch {\n    return null;\n  }\n\n  // All keys must exist before the state can be considered complete.\n  if (!returnedState.localeId || !returnedState.theme || !returnedState.saveFormatVersion) {\n    return null;\n  }\n\n  return returnedState as IPersistentState;\n};\n","import { getActionGuid } from \"../redux/reduxTools\";\n\nexport const actions = {\n  setCustomizationApplied: getActionGuid(),\n  setUserConsentProvided: getActionGuid(),\n};\n\n/** Action creator to store whether the user has provided consent to using local storage. */\nexport const setUserConsentProvided = (consentProvided: boolean) => {\n  return {\n    consentProvided,\n    type: actions.setUserConsentProvided,\n  };\n};\n\n/** Action creator to store (lowercase) preferred locale id such as en-us. */\nexport const setCustomizationApplied = (isApplied: boolean) => {\n  return {\n    isApplied,\n    type: actions.setCustomizationApplied,\n  };\n};\n","import { combineReducers, Dispatch } from \"redux\";\nimport { actions, setCustomizationApplied, setUserConsentProvided } from \"./persistence.actions\";\n\n/**\n * True if the user accepts the storage policy. Until the user accepts, data that isn't essential\n * for the operation of the site and any data that might be combined together across the site and\n * its services to create personally identifying info cannot be saved or loaded.\n *\n * This defaults to true because there is nothing requiring consent yet.\n */\nconst userConsentProvided = (state = true, action: ReturnType<typeof setUserConsentProvided>) => {\n  if (action.type === actions.setUserConsentProvided) {\n    return action.consentProvided;\n  }\n\n  return state;\n};\n\n/** Sets whether the user has consented to the storage policy. */\nexport const dispatchSetUserConsentProvided = (dispatch: Dispatch) => (isConsentGiven: boolean) => {\n  dispatch(setUserConsentProvided(isConsentGiven));\n};\n\n/**\n * True if local storage customizations have been applied. An attempt to load should be made once\n * after the user has accepted the storage policy and changes to content.\n */\nconst customizationApplied = (state = false, action: ReturnType<typeof setCustomizationApplied>) => {\n  if (action.type === actions.setCustomizationApplied) {\n    return action.isApplied;\n  }\n\n  return state;\n};\n\n/** Sets the locale id in lowercase, such as en-us. */\nexport const dispatchSetCustomizationApplied = (dispatch: Dispatch) => (isCustomizationApplied: boolean) => {\n  dispatch(setCustomizationApplied(isCustomizationApplied));\n};\n\n// Combine reducers and typescript definition.\nexport interface IPersistenceState {\n  customizationApplied: boolean;\n  userConsentProvided: boolean;\n}\n\nexport const persistence = combineReducers({\n  customizationApplied,\n  userConsentProvided,\n});\n","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { commandBarDropdownStyle } from \"../../common/styles/controlStyles\";\nimport { IDropdownProps, IDropdownStyles } from \"office-ui-fabric-react/lib/components/Dropdown/Dropdown.types\";\nimport { Dropdown } from \"office-ui-fabric-react/lib/components/Dropdown/Dropdown\";\nimport { IRootState } from \"../../store\";\n\nconst mapStateToProps = (state: IRootState) => {\n  return {\n    theme: state.settings.theme,\n  };\n};\n\n/** Main props associated with the MenuBarDropdown. */\nexport interface CommandBarDropdownProps {\n  dropdown: IDropdownProps;\n}\n\ntype CombinedProps = ReturnType<typeof mapStateToProps> & CommandBarDropdownProps;\n\n/** Renders a theme-connected dropdown styled for inclusion in the main command bar. */\nclass CommandBarDropdownC extends React.Component<CommandBarDropdownProps> {\n  public render() {\n    const { styles, ...props } = (this.props as CombinedProps).dropdown;\n    const stylesTyped = styles as IDropdownStyles;\n\n    return (\n      <Dropdown {...props} styles={commandBarDropdownStyle((this.props as CombinedProps).theme.theme, stylesTyped)} />\n    );\n  }\n}\n\nexport const CommandBarDropdown = connect(mapStateToProps)(CommandBarDropdownC);\n","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { commandIds, invokeCommand } from \"../../common/commands/commands\";\nimport { getStrings } from \"../../common/localization/Localization\";\nimport { localizedStrings } from \"../../common/localization/LocalizedStrings\";\nimport { dispatchSetLocale, dispatchSetTheme } from \"../../common/settings/settings.reducers\";\nimport { loadFromLocalStorage, saveToLocalStorage } from \"../../common/storage/persistence\";\nimport { dispatchSetUserConsentProvided } from \"../../common/storage/persistence.reducers\";\nimport {\n  iconSpaceBeforeTextStyle,\n  commandBarItemStyle,\n  commandBarDropdownButtonStyle,\n  commandBarDropdownSeparatorStyle,\n  commandBarStyle,\n  hiddenAndInaccessible,\n} from \"../../common/styles/controlStyles\";\nimport { ISupportedTheme, themes } from \"../../common/themes\";\nimport { IRootState } from \"../../store\";\nimport { CommandBarDropdown } from \"./MenuBarDropdown\";\nimport { dispatchSetStory } from \"../../common/redux/viewedit.reducers\";\nimport { getTheme } from \"office-ui-fabric-react/lib/Styling\";\nimport { ICommandBarItemProps } from \"office-ui-fabric-react/lib/components/CommandBar/CommandBar.types\";\nimport { CommandBar } from \"office-ui-fabric-react/lib/components/CommandBar/CommandBar\";\nimport { IDropdownOption } from \"office-ui-fabric-react/lib/components/Dropdown/Dropdown.types\";\nimport { Icon } from \"office-ui-fabric-react/lib/components/Icon/Icon\";\n\n/**\n * Browsers require a click to invoke an open file dialog, so this invokes a click on a hidden\n * input element rendered as part of the main command bar. This enables seamless functionality.\n */\nexport function invokeOpenCommand() {\n  hiddenInputRef.current?.click();\n}\n\n/** Browsers require a click event on an input control, which is automatically done via this one. */\nconst hiddenInputRef = React.createRef<HTMLInputElement>();\n\nconst mapStateToProps = (state: IRootState) => {\n  return {\n    locale: state.settings.locale,\n    reduxState: state,\n    strings: getStrings(state.settings.locale),\n    themeName: state.settings.theme.localizedName,\n    userConsentProvided: state.persistence.userConsentProvided,\n    wholeTheme: getTheme(),\n  };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch) => {\n  return {\n    setConsent: dispatchSetUserConsentProvided(dispatch),\n    setLocale: dispatchSetLocale(dispatch),\n    setStory: dispatchSetStory(dispatch),\n    setTheme: dispatchSetTheme(dispatch),\n  };\n};\n\nexport type MainCommandBarOwnProps = {};\n\ntype CombinedProps = MainCommandBarOwnProps &\n  ReturnType<typeof mapStateToProps> &\n  ReturnType<typeof mapDispatchToProps>;\n\nexport class MenuBarC extends React.Component<MainCommandBarOwnProps> {\n  /** Applies all user setting stored in local storage, if consent was provided. */\n  public componentDidMount() {\n    if ((this.props as CombinedProps).userConsentProvided) {\n      this.applyLocalStorage();\n    }\n  }\n\n  public render() {\n    // File-related options.\n    const items: ICommandBarItemProps[] = [\n      {\n        className: commandBarItemStyle((this.props as CombinedProps).wholeTheme, true),\n        data: commandIds.mainMenuFileNew,\n        key: \"userSettingsCommandBarFileMenuNew\",\n        name: (this.props as CombinedProps).strings.MenuFileNew,\n        iconProps: { iconName: \"FabricNewFolder\" },\n        onClick: () => invokeCommand(commandIds.mainMenuFileNew),\n      },\n      {\n        className: commandBarItemStyle((this.props as CombinedProps).wholeTheme, true),\n        data: commandIds.mainMenuFileOpen,\n        key: \"userSettingsCommandBarFileMenuOpen\",\n        name: (this.props as CombinedProps).strings.MenuFileOpen,\n        iconProps: { iconName: \"OpenFolderHorizontal\" },\n        onClick: () => invokeCommand(commandIds.mainMenuFileOpen),\n      },\n      {\n        className: commandBarItemStyle((this.props as CombinedProps).wholeTheme),\n        data: commandIds.mainMenuFileSave,\n        key: \"userSettingsCommandBarFileMenuSave\",\n        name: (this.props as CombinedProps).strings.MenuFileSave,\n        iconProps: { iconName: \"Save\" },\n        onClick: () => invokeCommand(commandIds.mainMenuFileSave),\n      },\n    ];\n\n    // Theme and language options.\n    const farItems: ICommandBarItemProps[] = [\n      {\n        ariaLabel: (this.props as CombinedProps).strings.TipTheme,\n        key: \"userSettingsCommandBarChosenTheme\",\n        onRender: this.renderThemeDropdown,\n        buttonStyles: commandBarDropdownButtonStyle(),\n      },\n      {\n        ariaLabel: (this.props as CombinedProps).strings.TipLanguage,\n        key: \"userSettingsCommandBarChosenLocale\",\n        onRender: this.renderLocaleDropdown,\n      },\n    ];\n\n    /** Loads the given file to a string for parsing. */\n    const handleFile = async (ev: React.ChangeEvent<HTMLInputElement>) => {\n      const chosenFiles = ev.target.files;\n\n      if (chosenFiles) {\n        const fileReader = new FileReader();\n\n        fileReader.onloadend = () => {\n          const result = fileReader.result as string;\n          (this.props as CombinedProps).setStory(result);\n        };\n\n        fileReader.readAsText(chosenFiles[0]);\n      }\n    };\n\n    return (\n      <>\n        <input className={hiddenAndInaccessible} onChange={handleFile} ref={hiddenInputRef} type=\"file\" />\n        <CommandBar\n          ariaLabel={(this.props as CombinedProps).strings.TipNavigateCommandBar}\n          items={items}\n          farItems={farItems}\n          styles={commandBarStyle}\n        />\n      </>\n    );\n  }\n\n  /** Updates redux with content loaded from local storage. */\n  private applyLocalStorage = () => {\n    const state = loadFromLocalStorage();\n    if (state !== null) {\n      if (state.localeId in localizedStrings) {\n        (this.props as CombinedProps).setLocale(state.localeId);\n      }\n\n      if (themes[state.theme] !== null) {\n        (this.props as CombinedProps).setTheme(themes[state.theme]);\n      }\n    }\n  };\n\n  /** Generates a key for options in the locale dropdown menu. */\n  private getLocaleDropdownOptionKey = (localeId: string) => {\n    return `userSettingsLocaleOptions${localeId}`;\n  };\n\n  /** Renders the dropdown for the locale picker control. */\n  private renderLocaleDropdown = () => {\n    const options: IDropdownOption[] = [];\n\n    // Populates the available locales.\n    Object.keys(localizedStrings).forEach((localeOption: string) => {\n      options.push({\n        data: localeOption,\n        key: this.getLocaleDropdownOptionKey(localeOption),\n        text: localizedStrings[localeOption as keyof typeof localizedStrings].LanguageCodeName,\n      });\n    });\n\n    /** Switches all GUI to display in the user-chosen language. */\n    const updateChangedLocale = (event: React.FormEvent<HTMLDivElement>, option?: IDropdownOption) => {\n      if (option !== undefined) {\n        const localeId = option.data as keyof typeof localizedStrings;\n        (this.props as CombinedProps).setLocale(localeId).then(() => {\n          saveToLocalStorage((this.props as CombinedProps).reduxState);\n        });\n      }\n    };\n\n    /** Renders the locale dropdown and name of the currently-chosen language. */\n    const renderDropdownTitle = () => (\n      <>\n        <Icon iconName=\"LocaleLanguage\" styles={iconSpaceBeforeTextStyle} />\n        <span style={{ fontSize: `${(this.props as CombinedProps).wholeTheme.fonts.large}` }}>\n          {localizedStrings[(this.props as CombinedProps).locale].LanguageCodeName}\n        </span>\n      </>\n    );\n\n    return (\n      <CommandBarDropdown\n        dropdown={{\n          defaultSelectedKey: this.getLocaleDropdownOptionKey((this.props as CombinedProps).locale),\n          onRenderTitle: renderDropdownTitle,\n          options: options,\n          onChange: updateChangedLocale,\n        }}\n      />\n    );\n  };\n\n  /** Generates a key for options in the theme dropdown menu. */\n  private getThemeDropdownOptionKey = (themeName: string) => {\n    return `userSettingsThemeOptions${themeName}`;\n  };\n\n  /** Renders the dropdown for the theme picker control. */\n  private renderThemeDropdown = () => {\n    const options: IDropdownOption[] = [];\n\n    // Populates the available themes.\n    Object.keys(themes).forEach((themeKey: string) => {\n      const theme = themes[(themeKey as unknown) as keyof typeof themes];\n\n      options.push({\n        data: theme,\n        key: this.getThemeDropdownOptionKey(theme.localizedName),\n        text: theme.localizedName,\n      });\n    });\n\n    /** Switches all GUI to display with the chosen theme. */\n    const updateChangedTheme = (_: React.FormEvent<HTMLDivElement>, option?: IDropdownOption) => {\n      if (option !== undefined) {\n        const theme = option.data as ISupportedTheme;\n        (this.props as CombinedProps).setTheme(theme).then(() => {\n          saveToLocalStorage((this.props as CombinedProps).reduxState);\n        });\n      }\n    };\n\n    /** Renders the theme dropdown and name of the currently-chosen theme. */\n    const renderDropdownTitle = () => (\n      <span style={{ fontSize: `${(this.props as CombinedProps).wholeTheme.fonts.large}` }}>\n        {(this.props as CombinedProps).strings.ThemeDropdownText((this.props as CombinedProps).themeName)}\n      </span>\n    );\n\n    return (\n      <CommandBarDropdown\n        dropdown={{\n          defaultSelectedKey: this.getThemeDropdownOptionKey((this.props as CombinedProps).themeName),\n          onRenderTitle: renderDropdownTitle,\n          options: options,\n          onChange: updateChangedTheme,\n          styles: commandBarDropdownSeparatorStyle((this.props as CombinedProps).wholeTheme),\n        }}\n      />\n    );\n  };\n}\n\nexport const MenuBar = connect(mapStateToProps, mapDispatchToProps)(MenuBarC);\n","import { invokeOpenCommand } from \"../../gui/menu/MenuBar\";\r\nimport { IShortcut } from \"./shortcutManager\";\r\n\r\n/** A command is a set of functions executed when the command is invoked by identity. */\r\nexport interface ICommand {\r\n  enableWhileTyping?: boolean;\r\n  disabled?: boolean;\r\n  functionsToInvoke: ICommandFunction[];\r\n  guid: commandIds;\r\n  shortcuts: IShortcut[];\r\n}\r\n\r\n/** Contains the event object and/or arbitrary data passed to the called command. */\r\nexport interface ICommandFunctionData {\r\n  event?: React.SyntheticEvent;\r\n  data?: any;\r\n}\r\n\r\n/** A function that can be executed by a command. */\r\nexport interface ICommandFunction {\r\n  disabled?: boolean;\r\n  function: (data?: ICommandFunctionData) => void;\r\n}\r\n\r\n/**\r\n * Commands can be invoked by ID or keyboard shortcuts. Users can define shortcuts, making it\r\n * valuable to define frequent or important user actions as commands.\r\n */\r\nexport enum commandIds {\r\n  mainMenuFileNew = \"mainMenuFileNew\",\r\n  mainMenuFileOpen = \"mainMenuFileOpen\",\r\n  mainMenuFileSave = \"mainMenuFileSave\",\r\n}\r\n\r\n/** Prompts the user to save first, then starts a new project. */\r\nconst actionMainMenuFileNew: ICommandFunction = {\r\n  function: () => {\r\n    alert(\"Invoked file -> new.\"); //TODO\r\n  },\r\n};\r\n\r\n/** Prompts the user to save first, then opens the given file. */\r\nconst actionMainMenuFileOpen: ICommandFunction = {\r\n  function: () => {\r\n    invokeOpenCommand();\r\n  },\r\n};\r\n\r\n/** Saves all changes. Prompts for a save location if never before saved. */\r\nconst actionMainMenuFileSave: ICommandFunction = {\r\n  function: () => {\r\n    alert(\"Invoked file -> save.\"); //TODO\r\n  },\r\n};\r\n\r\nexport const commands: { [key in commandIds]: ICommand } = {\r\n  mainMenuFileNew: {\r\n    functionsToInvoke: [actionMainMenuFileNew],\r\n    guid: commandIds.mainMenuFileNew as commandIds,\r\n    shortcuts: [\r\n      {\r\n        originalSequence: [{ key: \"N\", usesShift: true }],\r\n      },\r\n    ],\r\n  },\r\n  mainMenuFileOpen: {\r\n    functionsToInvoke: [actionMainMenuFileOpen],\r\n    guid: commandIds.mainMenuFileOpen as commandIds,\r\n    shortcuts: [\r\n      {\r\n        originalSequence: [{ key: \"O\", usesShift: true }],\r\n      },\r\n    ],\r\n  },\r\n  mainMenuFileSave: {\r\n    functionsToInvoke: [actionMainMenuFileSave],\r\n    guid: commandIds.mainMenuFileSave as commandIds,\r\n    shortcuts: [\r\n      {\r\n        originalSequence: [{ key: \"S\", usesShift: true }],\r\n      },\r\n    ],\r\n  },\r\n};\r\n\r\n/** Invokes the command with the given ID. */\r\nexport const invokeCommand = (Id: commandIds, data?: ICommandFunctionData) => {\r\n  // Silently consume command invocations that aren't enabled while typing. They still consume keypresses.\r\n  if (\r\n    commands[Id].enableWhileTyping !== true &&\r\n    (document.activeElement?.nodeName.toLowerCase() === \"textarea\" ||\r\n      (document.activeElement?.nodeName.toLowerCase() === \"input\" &&\r\n        document.activeElement.getAttribute(\"type\") === \"text\"))\r\n  ) {\r\n    return;\r\n  }\r\n\r\n  if (commands[Id].disabled !== true) {\r\n    commands[Id].functionsToInvoke.forEach((func: ICommandFunction) => {\r\n      if (func.disabled !== true) {\r\n        func.function(data);\r\n      }\r\n    });\r\n  }\r\n};\r\n","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { idEditorInputfield } from \"../../common/identifiers\";\nimport { dispatchSaveAndRunStory, dispatchSetStory } from \"../../common/redux/viewedit.reducers\";\nimport { IRootState } from \"../../store\";\nimport { editorTextAreaStyle } from \"../../common/styles/controlStyles\";\nimport { PrimaryButton } from \"office-ui-fabric-react/lib/components/Button/PrimaryButton/PrimaryButton\";\nimport { getStrings } from \"../../common/localization/Localization\";\n\nconst mapStateToProps = (state: IRootState) => {\n  return {\n    story: state.viewEdit.story,\n    strings: getStrings(state.settings.locale),\n    theme: state.settings.theme,\n  };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch) => {\n  return {\n    saveAndRunStory: dispatchSaveAndRunStory(dispatch),\n    setStory: dispatchSetStory(dispatch),\n  };\n};\n\nexport type EditorViewOwnProps = {};\n\ntype CombinedProps = EditorViewOwnProps & ReturnType<typeof mapStateToProps> & ReturnType<typeof mapDispatchToProps>;\n\nexport class EditorViewC extends React.Component<EditorViewOwnProps> {\n  public componentDidUpdate(prevProps: EditorViewOwnProps) {\n    if ((this.props as CombinedProps).story !== (prevProps as CombinedProps).story) {\n      document.getElementById(idEditorInputfield)?.setAttribute(\"value\", (this.props as CombinedProps).story);\n    }\n  }\n\n  public render() {\n    const combinedProps = this.props as CombinedProps;\n\n    return (\n      <>\n        <textarea\n          style={editorTextAreaStyle((this.props as CombinedProps).theme.theme)}\n          id={idEditorInputfield}\n          onBlur={this.updateStory}\n        />\n        <div style={{ display: \"flex\", flexDirection: \"row-reverse\" }}>\n          <PrimaryButton\n            styles={{ root: { display: \"block\" } }}\n            text={combinedProps.strings.EditorPlay}\n            onClick={this.runStory}\n          />\n        </div>\n      </>\n    );\n  }\n\n  private runStory = () => {\n    const currentStory = (document.getElementById(idEditorInputfield) as HTMLTextAreaElement).value;\n    (this.props as CombinedProps).saveAndRunStory(currentStory);\n  };\n\n  private updateStory = (ev: React.FocusEvent<HTMLTextAreaElement>) => {\n    if ((this.props as CombinedProps).story !== ev.currentTarget.value) {\n      (this.props as CombinedProps).setStory(ev.currentTarget.value);\n    }\n  };\n}\n\nexport const EditorView = connect(mapStateToProps, mapDispatchToProps)(EditorViewC);\n","/**\n * Contains text to execute if its conditions are met, with links to the parent and child nodes.\n */\nexport class StoryParseNode {\n  /** Contains a list of conditions to be met for text to be considered. */\n  public condition: string;\n\n  /** Contains text to be processed only if the conditions are met. */\n  public text: string;\n\n  /** References the parent node, if any. */\n  public parent: StoryParseNode | null;\n\n  /** References the child nodes, if any. */\n  public children: StoryParseNode[];\n\n  constructor() {\n    this.condition = \"\";\n    this.text = \"\";\n    this.parent = null;\n    this.children = [];\n  }\n}\n","import { StoryParseNode } from \"./storyParseNode\";\nimport { StoryInterpreterC } from \"./storyInterpreter\";\n\n// TODO: localize strings in this file.\n\nconst doubleSlashRegex = /\\/\\//g;\nconst ifRegex = /\\bif\\b/g;\nconst endIfRegex = /\\bendif\\b/g;\n\n/** Maps named pages to nodes. */\nexport interface IPageDictionary {\n  [key: string]: StoryParseNode;\n}\n\n/**\n * Returns whether the substring formed by the index and length is on the same line as an @ symbol.\n * Does not support nesting.\n */\nfunction isOption(text: string, index: number) {\n  let startOfLine = text.substring(0, index).lastIndexOf(\"\\n\");\n\n  if (startOfLine === -1) {\n    startOfLine = 0;\n  }\n\n  let endOfLine = text.substring(index).indexOf(\"\\n\");\n\n  if (endOfLine === -1) {\n    endOfLine = text.length - 1;\n  }\n\n  endOfLine += index;\n  const line = text.substring(startOfLine, endOfLine);\n\n  return line.includes(\"@\");\n}\n\n/**\n * Returns whether the substring formed by the index and length is in curly brackets in the given\n * text. Does not support nesting.\n */\nfunction isOutput(text: string, index: number) {\n  const beforeSubstring = text.substring(0, index);\n  const bracketOpenPos = beforeSubstring.lastIndexOf(\"{\");\n  const bracketClosePos = beforeSubstring.lastIndexOf(\"}\");\n\n  if (bracketOpenPos < bracketClosePos || bracketOpenPos === -1) {\n    return false;\n  }\n\n  return true;\n}\n\n/** Updates the passed-in interpreter with a node tree for each fork. */\nexport function parseStory(story: string, interpreter: React.RefObject<StoryInterpreterC>, forkToLoad?: string) {\n  const entries: { [key: string]: string } = {};\n  const parsed: { [key: string]: StoryParseNode } = {};\n\n  const entryPositions: number[] = [];\n  const newlineSplitStory = story.split(\"\\n\");\n\n  if (newlineSplitStory.length === 0) {\n    interpreter.current?.setEntries({});\n\n    if (interpreter.current) {\n      interpreter.current.setErrorMessage(\"Parser: Story is blank. The story must not be blank to parse it.\");\n    }\n  }\n\n  // Finds fork header positions, normalizes line endings, and removes excess space.\n  for (let i = 0; i < newlineSplitStory.length; i++) {\n    newlineSplitStory[i] = newlineSplitStory[i].replace(\"\\r\", \"\").trim();\n\n    if (newlineSplitStory[i].startsWith(\"@\")) {\n      entryPositions.push(i);\n    }\n  }\n\n  // Interprets all text up to the first header as game options.\n  let header = \"\";\n\n  if (entryPositions.length > 0) {\n    for (let i = 0; i < entryPositions[0]; i++) {\n      header += newlineSplitStory[i] + \"\\n\";\n    }\n\n    interpreter.current?.processHeaderOptions(header);\n  }\n\n  // Splits entries into a dictionary.\n  for (let i = 0; i < entryPositions.length; i++) {\n    // Prevents unnamed entries.\n    if (newlineSplitStory[entryPositions[i]].length < 2) {\n      if (interpreter.current) {\n        interpreter.current.setErrorMessage(\n          \"Parser: Entry\" + newlineSplitStory[entryPositions[i]] + \"must be at least 1 character long.\"\n        );\n      }\n\n      continue;\n    }\n\n    // Stores the fork header name, content, and content by line.\n    let entryName = newlineSplitStory[entryPositions[i]].substring(1);\n    let entryList: string[] = [];\n    let entry = \"\";\n\n    // Associates forks with their content.\n    if (i === entryPositions.length - 1) {\n      entryList = newlineSplitStory.slice(entryPositions[i], newlineSplitStory.length);\n    } else {\n      entryList = newlineSplitStory.slice(entryPositions[i], entryPositions[i + 1]);\n    }\n\n    // Concatenates each line of text.\n    for (let j = 1; j < entryList.length; j++) {\n      entry += entryList[j] + \"\\n\";\n    }\n\n    entryName = entryName.replace(/\\s+/g, \"\").toLowerCase();\n\n    if (entries[entryName] !== undefined) {\n      if (interpreter.current) {\n        interpreter.current.setErrorMessage(`Parser: Entry called '${entryName}' already exists.`);\n      }\n    } else {\n      entries[entryName] = entry;\n    }\n  }\n\n  // Removes single-line comments from entries.\n  const entriesKeys = Object.keys(entries);\n  for (let i = 0; i < entriesKeys.length; i++) {\n    let isFinished: boolean;\n    let entry = entries[entriesKeys[i]];\n\n    do {\n      isFinished = true;\n\n      let match: RegExpExecArray | null = null;\n\n      // Determines if candidates are output text or commands.\n      while ((match = doubleSlashRegex.exec(entry)) !== null) {\n        const pos = match.index;\n\n        // Real comments are removed.\n        if (!isOutput(entry, pos) && !isOption(entry, pos)) {\n          entry = entry.slice(pos, entry.substring(pos).indexOf(\"\\n\"));\n\n          // Comment indices are invalidated. Search again as long as comments might exist (until\n          // all are found // instances are output text).\n          isFinished = false;\n          break;\n        }\n      }\n    } while (!isFinished);\n\n    // Sets the entry.\n    entries[entriesKeys[i]] = entry;\n  }\n\n  // Creates a parse tree.\n  for (let i = 0; i < entriesKeys.length; i++) {\n    const root = new StoryParseNode();\n    let node = root;\n    let depth = 0;\n\n    // The full entry.\n    const text = entries[entriesKeys[i]];\n\n    // Finds all if and endif words.\n    let ifMatches: RegExpExecArray[] = [];\n    let endIfMatches: RegExpExecArray[] = [];\n    let match: RegExpExecArray | null = null;\n    const ifs: number[] = [];\n    const endifs: number[] = [];\n\n    // Determines if candidates are output text or commands.\n    while ((match = ifRegex.exec(text)) !== null) {\n      ifMatches.push(match);\n    }\n\n    while ((match = endIfRegex.exec(text)) !== null) {\n      endIfMatches.push(match);\n    }\n\n    // Filters out if and endif words that are part of output text.\n    for (let j = 0; j < ifMatches.length; j++) {\n      if (!isOutput(text, ifMatches[j].index) && !isOption(text, ifMatches[j].index)) {\n        ifs.push(ifMatches[j].index);\n      }\n    }\n\n    for (let j = 0; j < endIfMatches.length; j++) {\n      if (!isOutput(text, endIfMatches[j].index) && !isOption(text, endIfMatches[j].index)) {\n        endifs.push(endIfMatches[j].index);\n      }\n    }\n\n    // Ensures the number of if and endif statements match.\n    if (ifs.length !== endifs.length && interpreter.current) {\n      interpreter.current.setErrorMessage(\n        `Parser: found ${ifs.length} if tokens, but ${endifs.length} ` +\n          \"endif tokens. Ifs and endifs must match in number.\"\n      );\n    }\n\n    // Creates a list of all if and endif statements by index, where ifs are encoded by 0 and endifs by 1.\n    let allMatches: { item1: number; item2: number }[] = [];\n\n    for (let j = 0; j < ifs.length; j++) {\n      allMatches.push({ item1: ifs[j], item2: 0 });\n    }\n\n    for (let j = 0; j < endifs.length; j++) {\n      allMatches.push({ item1: endifs[j], item2: 1 });\n    }\n\n    // Orders all ifs and endifs in ascending order by index.\n    allMatches = allMatches.sort((a, b) => (a.item1 > b.item1 ? 1 : -1));\n\n    // Iterates over all ifs and endifs to create a tree.\n    for (let j = 0; j < allMatches.length; j++) {\n      // The index, condition, and type (if, endif) of the match.\n      let elemBegin = allMatches[j].item1;\n      let elemType = allMatches[j].item2;\n      let cond = text.substring(elemBegin);\n      cond = cond.slice(0, cond.indexOf(\"\\n\"));\n\n      // The index and condition of the previous if.\n      let prevIfBegin = -1;\n      let prevIfCond = \"\";\n\n      for (let k = j - 1; k >= 0; k--) {\n        if (allMatches[k].item2 === 0) {\n          prevIfBegin = allMatches[k].item1;\n          prevIfCond = text.substring(prevIfBegin);\n          prevIfCond = prevIfCond.slice(0, prevIfCond.indexOf(\"\\n\"));\n          break;\n        }\n      }\n\n      // The index and condition of the previous endif.\n      let prevEndIfBegin = -1;\n      let prevEndIfCond = \"\";\n\n      for (let k = j - 1; k >= 0; k--) {\n        if (allMatches[k].item2 === 1) {\n          prevEndIfBegin = allMatches[k].item1;\n          prevEndIfCond = text.substring(prevEndIfBegin);\n          prevEndIfCond = prevEndIfCond.slice(0, prevEndIfCond.indexOf(\"\\n\"));\n          break;\n        }\n      }\n\n      // Uses the previous if/endif; whichever is closer.\n      let prevElemBegin = prevEndIfBegin > prevIfBegin ? prevEndIfBegin : prevIfBegin;\n      let prevElemCond = prevElemBegin === prevEndIfBegin ? prevEndIfCond : prevIfCond;\n\n      // Handles if keywords.\n      if (elemType === 0) {\n        // Adds text between matched keywords. If text was simply concatenated, it wouldn't preserve order.\n        if (j !== 0 && prevIfBegin !== -1) {\n          // From if to last if.\n          let textNode = new StoryParseNode();\n          textNode.parent = node;\n\n          // Determines if the length is negative.\n          const prevElemEnd = prevElemBegin + prevElemCond.length;\n\n          if (elemBegin - prevElemEnd < 0) {\n            if (interpreter.current) {\n              interpreter.current.setErrorMessage(\n                `Parser: In '${text.substring(prevElemBegin)}', cannot specify multiple if tokens on one line.`\n              );\n            }\n\n            continue;\n          }\n\n          textNode.text += text.substring(prevElemEnd, elemBegin);\n\n          if (!(textNode.children.length === 0 && textNode.condition.trim() === \"\" && textNode.text.trim() === \"\")) {\n            node.children.push(textNode);\n          }\n        } else if (elemBegin > 0) {\n          // From start of entry to if.\n          const textNode = new StoryParseNode();\n          textNode.parent = node;\n          textNode.text += text.substring(0, elemBegin);\n\n          if (!(textNode.children.length === 0 && textNode.condition.trim() === \"\" && textNode.text.trim() === \"\")) {\n            node.children.push(textNode);\n          }\n        }\n\n        // Creates a child node and sets its parent.\n        const newChild = new StoryParseNode();\n        newChild.parent = node;\n\n        // Adds the found if statement to the conditions list.\n        newChild.condition = cond;\n\n        // Adds the child node and moves node to point to it.\n        if (!(newChild.children.length === 0 && newChild.condition.trim() === \"\" && newChild.text.trim() === \"\")) {\n          node.children.push(newChild);\n        }\n\n        node = newChild;\n        depth++;\n      }\n\n      // Handles endif keywords.\n      else if (elemType === 1) {\n        // The parser always returns since it cannot continue.\n        if (depth < 0) {\n          interpreter.current?.setEntries({});\n\n          if (interpreter.current) {\n            interpreter.current.setErrorMessage(\n              \"Parser: an extra endif token was encountered (if/endif # \" + (j + 1) + \").\"\n            );\n          }\n\n          return;\n        }\n\n        // Adds text between matched keywords.\n        const textNode = new StoryParseNode();\n        textNode.parent = node;\n\n        // Determines if the length is negative.\n        const prevElemEnd = prevElemBegin + prevElemCond.length;\n        if (elemBegin - prevElemEnd < 0) {\n          if (interpreter.current) {\n            interpreter.current.setErrorMessage(\n              \"Parser: In '\" + text.substring(prevElemBegin) + \"', cannot specify multiple endif tokens on one line.\"\n            );\n          }\n\n          continue;\n        }\n\n        textNode.text += text.substring(prevElemEnd, elemBegin);\n\n        if (!(textNode.children.length === 0 && textNode.condition.trim() === \"\" && textNode.text.trim() === \"\")) {\n          node.children.push(textNode);\n        }\n\n        // Points to the node's parent if possible.\n        if (node.parent !== null) {\n          node = node.parent;\n        } else {\n          interpreter.current?.setEntries({});\n\n          if (interpreter.current) {\n            interpreter.current.setErrorMessage(\"Parser: an extra endif token was encountered (endif #\" + j + \").\");\n          }\n\n          return;\n        }\n      }\n    }\n\n    // Adds all text after last if/endif to the first node.\n    if (allMatches.length > 0) {\n      let lastElemBegin = allMatches[allMatches.length - 1].item1;\n      let lastCond = text.substring(lastElemBegin);\n      let lastCondLength = lastCond.indexOf(\"\\n\");\n\n      /**\n       * Since commands must be on their own lines, if there is no newline after the last command,\n       * it's the last line in the entry. This means there's nothing after it. So the last\n       * condition executes only if this is false.\n       */\n      if (lastCondLength !== -1) {\n        let textNode = new StoryParseNode();\n        textNode.parent = root;\n        textNode.text += text.substring(lastElemBegin + lastCondLength);\n\n        if (!(textNode.children.length === 0 && textNode.condition.trim() === \"\" && textNode.text.trim() === \"\")) {\n          root.children.push(textNode);\n        }\n      }\n    } else {\n      // Adds all text to the first node in the case that there were no ifs.\n      root.text += text;\n    }\n\n    // Adds the fully constructed entry.\n    parsed[entriesKeys[i]] = root;\n  }\n\n  interpreter.current?.setEntriesWithFork(parsed, forkToLoad ?? \"\");\n}\n","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { StoryInterpreterC, StoryInterpreter } from \"../../parse-story/storyInterpreter\";\nimport { parseStory } from \"../../parse-story/storyParser\";\nimport { IRootState } from \"../../store\";\n\nconst mapStateToProps = (state: IRootState) => {\n  return {\n    renderTrigger: state.viewEdit.storyReparseToken, // Needed to re-render without story changing.\n    storyToParse: state.viewEdit.storyToParse,\n  };\n};\n\ntype RunnerViewOwnProps = {};\n\ntype CombinedProps = RunnerViewOwnProps & ReturnType<typeof mapStateToProps>;\n\nexport class RunnerViewC extends React.Component<RunnerViewOwnProps> {\n  private interpreterRef: React.RefObject<StoryInterpreterC>;\n\n  constructor(props: RunnerViewOwnProps) {\n    super(props);\n\n    this.interpreterRef = React.createRef<StoryInterpreterC>();\n  }\n\n  public componentDidUpdate() {\n    try {\n      parseStory((this.props as CombinedProps).storyToParse, this.interpreterRef);\n    } catch (ex) {\n      if (this.interpreterRef.current && typeof ex === \"string\") {\n        this.interpreterRef.current.setErrorMessage(ex);\n      } else if (this.interpreterRef.current && ex instanceof Error) {\n        this.interpreterRef.current.setErrorMessage(ex.message);\n      } else {\n        console.error(\"Reference to interpreter element was undefined. An additional error follows.\");\n        console.error(ex);\n      }\n    }\n  }\n\n  public render() {\n    return <StoryInterpreter ref={this.interpreterRef} />;\n  }\n}\n\nexport const RunnerView = connect(mapStateToProps)(RunnerViewC);\n","import * as React from \"react\";\nimport { idEditorWrapper, idRunnerWrapper } from \"../../common/identifiers\";\nimport { mainViewWrapperStyle, mainViewEditorStyle, mainViewRunnerStyle } from \"../../common/styles/controlStyles\";\nimport { connect } from \"react-redux\";\nimport { IRootState } from \"../../store\";\nimport { EditorView } from \"../editor/EditorView\";\nimport { MenuBar } from \"../menu/MenuBar\";\nimport { RunnerView } from \"../runner/RunnerView\";\n\nconst mapStateToProps = (state: IRootState) => {\n  return {\n    theme: state.settings.theme,\n  };\n};\n\nexport type RunnerEditorOwnProps = {};\n\ntype CombinedProps = RunnerEditorOwnProps & ReturnType<typeof mapStateToProps>;\n\nexport class RunnerEditorViewC extends React.Component<RunnerEditorOwnProps> {\n  public render() {\n    return (\n      <>\n        <MenuBar />\n        <div className={mainViewWrapperStyle}>\n          <div id={idEditorWrapper} className={mainViewEditorStyle}>\n            <EditorView />\n          </div>\n          <div id={idRunnerWrapper} style={mainViewRunnerStyle((this.props as CombinedProps).theme.theme) as object}>\n            <RunnerView />\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n\nexport const RunnerEditorView = connect(mapStateToProps)(RunnerEditorViewC);\n","import { getActionGuid } from \"./reduxTools\";\nimport { IRunnerLogSeparatorStyle, IRunnerStyle, IPlayerRunnerOptions, ITextStyle } from \"./typedefs\";\n\nexport const actions = {\n  setPlayerStoryInputStyles: getActionGuid(),\n  setPlayerStoryLogSeparatorStyles: getActionGuid(),\n  setPlayerStoryOptionStyles: getActionGuid(),\n  setPlayerStoryOptionHighlightStyles: getActionGuid(),\n  setPlayerStoryOutputStyles: getActionGuid(),\n  setPlayerStoryRunnerOptions: getActionGuid(),\n  setPlayerStoryRunnerStyles: getActionGuid(),\n};\n\n/**\n * Sets the player preferred styling for previous textbox input from the player. This is the final styling.\n * The order goes built-in defaults -> global story styling -> story style override -> player style override.\n */\nexport const setPlayerStoryInputStyles = (style: ITextStyle) => {\n  return {\n    type: actions.setPlayerStoryInputStyles,\n    style,\n  };\n};\n\n/*\n * Sets the player preferred styling for the log separator. This is the final styling. The order goes\n * built-in defaults -> global story styling -> player style override.\n */\nexport const setPlayerStoryLogSeparatorStyles = (style: IRunnerLogSeparatorStyle) => {\n  return {\n    type: actions.setPlayerStoryLogSeparatorStyles,\n    style,\n  };\n};\n\n/**\n * Sets the player preferred styling for hyperlinks in the story. This is the final styling. The order goes\n * built-in defaults -> global story styling -> story style override -> player style override.\n */\nexport const setPlayerStoryOptionStyles = (style: ITextStyle) => {\n  return {\n    type: actions.setPlayerStoryOptionStyles,\n    style,\n  };\n};\n\n/**\n * Sets the player preferred styling for hovered hyperlinks in the story. This is the final styling. The\n * order goes built-in defaults -> global story styling -> story style override -> player style override.\n */\nexport const setPlayerStoryOptionHighlightStyles = (style: ITextStyle) => {\n  return {\n    type: actions.setPlayerStoryOptionHighlightStyles,\n    style,\n  };\n};\n\n/**\n * Sets the player preferred styling for all text output from the story. This is the final styling. The\n * order goes built-in defaults -> global story styling -> story style override -> player style override.\n */\nexport const setPlayerStoryOutputStyles = (style: ITextStyle) => {\n  return {\n    type: actions.setPlayerStoryOutputStyles,\n    style,\n  };\n};\n\n/**\n * Sets story options such as logging behavior.\n */\nexport const setPlayerStoryRunnerOptions = (options: IPlayerRunnerOptions) => {\n  return {\n    type: actions.setPlayerStoryRunnerOptions,\n    options,\n  };\n};\n\n/**\n * Sets the player preferred styling for the runner itself. This is the final styling. The order goes\n * built-in defaults -> global story styling -> story style override -> player style override.\n */\nexport const setPlayerStoryRunnerStyles = (style: IRunnerStyle) => {\n  return {\n    type: actions.setPlayerStoryRunnerStyles,\n    style,\n  };\n};\n","import { combineReducers, Dispatch } from \"redux\";\nimport * as actions from \"./playerStorySettings.actions\";\nimport * as types from \"./typedefs\";\n\nconst playerStoryInputStyles = (state = {}, action: ReturnType<typeof actions.setPlayerStoryInputStyles>) => {\n  if (action.type === actions.actions.setPlayerStoryInputStyles) {\n    return action.style;\n  }\n\n  return state;\n};\n\nconst playerStoryLogSeparatorStyles = (\n  state = {},\n  action: ReturnType<typeof actions.setPlayerStoryLogSeparatorStyles>\n) => {\n  if (action.type === actions.actions.setPlayerStoryLogSeparatorStyles) {\n    return action.style;\n  }\n\n  return state;\n};\n\nconst playerStoryOptionStyles = (state = {}, action: ReturnType<typeof actions.setPlayerStoryOptionStyles>) => {\n  if (action.type === actions.actions.setPlayerStoryOptionStyles) {\n    return action.style;\n  }\n\n  return state;\n};\n\nconst playerStoryOptionHighlightStyles = (\n  state = {},\n  action: ReturnType<typeof actions.setPlayerStoryOptionHighlightStyles>\n) => {\n  if (action.type === actions.actions.setPlayerStoryOptionHighlightStyles) {\n    return action.style;\n  }\n\n  return state;\n};\n\nconst playerStoryOutputStyles = (state = {}, action: ReturnType<typeof actions.setPlayerStoryOutputStyles>) => {\n  if (action.type === actions.actions.setPlayerStoryOutputStyles) {\n    return action.style;\n  }\n\n  return state;\n};\n\nconst playerStoryRunnerOptions = (state = {}, action: ReturnType<typeof actions.setPlayerStoryRunnerOptions>) => {\n  if (action.type === actions.actions.setPlayerStoryRunnerOptions) {\n    return action.options;\n  }\n\n  return state;\n};\n\nconst playerStoryRunnerStyles = (\n  state = { background: { type: \"plain\" } },\n  action: ReturnType<typeof actions.setPlayerStoryRunnerStyles>\n) => {\n  if (action.type === actions.actions.setPlayerStoryRunnerStyles) {\n    return action.style;\n  }\n\n  return state;\n};\n\nexport const dispatchSetPlayerStoryInputStyles = (dispatch: Dispatch) => (style: types.ITextStyle) => {\n  dispatch(actions.setPlayerStoryInputStyles(style));\n};\n\nexport const dispatchSetPlayerStoryLogSeparatorStyles = (dispatch: Dispatch) => (\n  style: types.IRunnerLogSeparatorStyle\n) => {\n  dispatch(actions.setPlayerStoryLogSeparatorStyles(style));\n};\n\nexport const dispatchSetPlayerStoryOptionStyles = (dispatch: Dispatch) => (style: types.ITextStyle) => {\n  dispatch(actions.setPlayerStoryOptionStyles(style));\n};\n\nexport const dispatchSetPlayerStoryOptionHighlightStyles = (dispatch: Dispatch) => (style: types.ITextStyle) => {\n  dispatch(actions.setPlayerStoryOptionHighlightStyles(style));\n};\n\nexport const dispatchSetPlayerStoryOutputStyles = (dispatch: Dispatch) => (style: types.ITextStyle) => {\n  dispatch(actions.setPlayerStoryOutputStyles(style));\n};\n\nexport const dispatchSetPlayerStoryRunnerOptions = (dispatch: Dispatch) => (options: types.IPlayerRunnerOptions) => {\n  dispatch(actions.setPlayerStoryRunnerOptions(options));\n};\n\nexport const dispatchSetPlayerStoryRunnerStyles = (dispatch: Dispatch) => (style: types.IRunnerStyle) => {\n  dispatch(actions.setPlayerStoryRunnerStyles(style));\n};\n\n// Combine reducers and typescript definition.\nexport interface IPlayerStorySettingsState {\n  playerStoryInputStyles: types.ITextStyle;\n  playerStoryLogSeparatorStyles: types.IRunnerLogSeparatorStyle;\n  playerStoryOptionStyles: types.ITextStyle;\n  playerStoryOptionHighlightStyles: types.ITextStyle;\n  playerStoryOutputStyles: types.ITextStyle;\n  playerStoryRunnerOptions: types.IPlayerRunnerOptions;\n  playerStoryRunnerStyles: types.IRunnerStyle;\n}\n\nexport const playerStorySettings = combineReducers({\n  playerStoryInputStyles,\n  playerStoryLogSeparatorStyles,\n  playerStoryOptionStyles,\n  playerStoryOptionHighlightStyles,\n  playerStoryOutputStyles,\n  playerStoryRunnerOptions,\n  playerStoryRunnerStyles,\n});\n","import { applyMiddleware, combineReducers, createStore } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport { ISettingState, settings } from \"./common/settings/settings.reducers\";\nimport { IPersistenceState, persistence } from \"./common/storage/persistence.reducers\";\nimport { IViewEditState, viewEdit } from \"./common/redux/viewedit.reducers\";\nimport { IAuthorStorySettingsState, authorStorySettings } from \"./common/redux/authorStorySettings.reducers\";\nimport { IPlayerStorySettingsState, playerStorySettings } from \"./common/redux/playerStorySettings.reducers\";\nimport { ICurrentRunnerSettingsState, currentRunnerSettings } from \"./common/redux/currentRunnerSettings.reducers\";\n\n/** All reducers. */\nexport interface IRootState {\n  persistence: IPersistenceState;\n  settings: ISettingState;\n  viewEdit: IViewEditState;\n  authorStorySettings: IAuthorStorySettingsState;\n  currentRunnerSettings: ICurrentRunnerSettingsState;\n  playerStorySettings: IPlayerStorySettingsState;\n}\n\nconst rootReducer = combineReducers({\n  persistence,\n  settings,\n  viewEdit,\n  authorStorySettings,\n  currentRunnerSettings,\n  playerStorySettings,\n});\n\n/** Provides global access to the static Redux store. */\nexport const store = createStore(rootReducer, undefined, applyMiddleware(thunk));\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { Provider } from \"react-redux\";\nimport { initializeIcons, loadTheme } from \"office-ui-fabric-react\";\nimport { Route, Switch } from \"react-router\";\nimport { HashRouter } from \"react-router-dom\";\nimport { listenForShortcuts } from \"./common/commands/shortcutManager\";\nimport { RunnerEditorView } from \"./gui/runner-editor/RunnerEditorView\";\nimport { store } from \"./store\";\nimport { Themes, themes } from \"./common/themes\";\n\ninitializeIcons(); // Ensures all icons are available.\nlistenForShortcuts(); // Hooks up global key listeners.\nloadTheme(themes[Themes.DefaultLight].theme); // Applies the default light theme.\n\n// Renders based on virtual URL.\nconst routing = (\n  <Switch>\n    <Route path=\"/\" component={RunnerEditorView} />\n  </Switch>\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <HashRouter>{routing}</HashRouter>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n","import { commandIds, commands, ICommand, invokeCommand } from \"./commands\";\n\n/** A sequence of consecutive keystrokes that define a shortcut. */\nexport interface IShortcut {\n  /** If defined, this represents a custom preferred shortcut defined by the user. */\n  customSequence?: IShortcutStep[];\n\n  disabled?: boolean;\n\n  /**\n   * Used only if no custom sequence is defined. This is used to clear user-defined shortcuts. An\n   * empty array signifies the shortcut was created entirely by the user.\n   */\n  originalSequence: IShortcutStep[];\n}\n\n/** A single key with optional modifier keys requirements. */\nexport interface IShortcutStep {\n  key: string;\n  usesAlt?: boolean;\n  usesCtrl?: boolean;\n  usesShift?: boolean;\n}\n\ninterface IMatchProgress {\n  shortcut: IShortcut;\n  step: number;\n}\n\n/** Returns a string representation of the provided shortcut. */\nexport const getKeyTip = (shortcut: IShortcutStep[]) => {\n  let shortcutString = \"\";\n\n  shortcut.forEach((step: IShortcutStep, index: number) => {\n    if (index !== 0) {\n      shortcutString += \", \";\n    }\n\n    if (step.usesCtrl === true) {\n      shortcutString += \"Ctrl + \";\n    }\n    if (step.usesShift === true) {\n      shortcutString += \"Shift + \";\n    }\n    if (step.usesAlt === true) {\n      shortcutString += \"Alt + \";\n    }\n\n    shortcutString += step.key.toUpperCase();\n  });\n\n  return shortcutString;\n};\n\n/** Returns a string representation of the first active shortcut for the given command. */\nexport const getFirstKeyTip = (command: ICommand) => {\n  if (command.shortcuts.length === 0) {\n    return \"\";\n  }\n\n  if (command.shortcuts[0].customSequence !== undefined) {\n    return getKeyTip(command.shortcuts[0].customSequence);\n  }\n\n  return getKeyTip(command.shortcuts[0].originalSequence);\n};\n\n/** Begins listening to key presses and invokes matching commands. */\nexport const listenForShortcuts = () => {\n  const commandKeys = Object.keys(commands) as Array<keyof typeof commands>;\n  const commandsWithMatchProgress: Partial<{ [key in commandIds]: IMatchProgress[] }> = {};\n\n  // Tracks progress towards executing a command.\n  commandKeys.forEach((key: commandIds) => {\n    commandsWithMatchProgress[key] = commands[key].shortcuts.map((shortcut: IShortcut) => ({\n      shortcut,\n      step: 0,\n    }));\n  });\n\n  window.addEventListener(\"keypress\", (ev: KeyboardEvent) => {\n    // For every shortcut on every command.\n    commandKeys.forEach((key: commandIds) => {\n      const commandProgress = commandsWithMatchProgress[key]!;\n\n      // tslint:disable:prefer-for-of Better performance with return.\n      for (let i = 0; i < commandProgress.length; i++) {\n        const progress = commandProgress[i];\n\n        if (progress.shortcut.disabled === true) {\n          continue;\n        }\n\n        // Which keyboard sequence is actually bound to the command.\n        const sequence =\n          progress.shortcut.customSequence !== undefined\n            ? progress.shortcut.customSequence\n            : progress.shortcut.originalSequence;\n\n        if (sequence.length === 0) {\n          continue;\n        }\n\n        // Resets progress towards executing a command if the pressed key is out of sequence.\n        if (\n          sequence[progress.step].key !== ev.key.toUpperCase() ||\n          Boolean(sequence[progress.step].usesAlt) !== ev.altKey ||\n          Boolean(sequence[progress.step].usesCtrl) !== ev.ctrlKey ||\n          Boolean(sequence[progress.step].usesShift) !== ev.shiftKey\n        ) {\n          progress.step = 0;\n        }\n\n        // Increments the sequence progress or executes the command and returns to avoid redundant\n        // execution.\n        else {\n          if (progress.step === sequence.length - 1) {\n            invokeCommand(key);\n            progress.step = 0;\n            return;\n          }\n\n          progress.step++;\n        }\n      }\n    });\n  });\n};\n","import { IButtonStyles } from \"office-ui-fabric-react/lib/components/Button/Button.types\";\nimport { IStyle, ITheme, mergeStyles } from \"office-ui-fabric-react/lib/Styling\";\nimport { IDropdownStyles } from \"office-ui-fabric-react/lib/components/Dropdown/Dropdown.types\";\nimport { ICommandBarStyles } from \"office-ui-fabric-react/lib/components/CommandBar/CommandBar.types\";\nimport { IIconStyles } from \"office-ui-fabric-react/lib/components/Icon/Icon.types\";\n\n/**\n * Returns a style for a dropdown in the command bar. If there are items to the right, renders a\n * thin border between.\n */\nexport const commandBarDropdownButtonStyle = (): IButtonStyles => {\n  return { root: { alignSelf: \"stretch\" } };\n};\n\n/**\n * Returns a style for a command bar dropdown that renders a border to the right of the item.\n */\nexport const commandBarDropdownSeparatorStyle = (theme: ITheme): Partial<IDropdownStyles> => {\n  return {\n    root: {\n      borderColor: theme.semanticColors.menuDivider,\n      borderRightStyle: \"solid\",\n      borderWidth: \"1px\",\n    },\n  };\n};\n\n/** Returns a style for a dropdown in the command bar. */\nexport const commandBarDropdownStyle = (theme: ITheme, propStyles: IDropdownStyles): Partial<IDropdownStyles> => {\n  return {\n    caretDownWrapper: mergeStyles(\n      { alignSelf: \"center\", position: \"relative\", right: \"20px\", width: \"0px\" },\n      propStyles?.caretDownWrapper\n    ),\n    dropdown: mergeStyles(\n      {\n        display: \"flex\",\n        height: \"100%\",\n      },\n      propStyles?.dropdown\n    ),\n    dropdownItem: mergeStyles({ ...theme.fonts.large }, propStyles?.dropdownItem),\n    dropdownItemSelected: mergeStyles({ ...theme.fonts.large }, propStyles?.dropdownItemSelected),\n    root: mergeStyles({ alignSelf: \"stretch\" }, propStyles?.root),\n    title: mergeStyles(\n      {\n        height: \"100%\",\n        border: \"0\",\n        borderRadius: \"unset\",\n        display: \"flex\",\n        alignItems: \"center\",\n      },\n      propStyles?.title\n    ),\n  };\n};\n\n/**\n * Returns a style for a command bar item definition that increase button space. If there are\n * items to the right, renders a thin border between.\n */\nexport const commandBarItemStyle = (theme: ITheme, itemsOnRight?: boolean): string => {\n  if (itemsOnRight) {\n    return mergeStyles(theme.fonts.large, {\n      paddingLeft: \"12px\",\n      paddingRight: \"12px\",\n      borderColor: theme.semanticColors.menuDivider,\n      borderRightStyle: \"solid\",\n      borderWidth: \"1px\",\n    });\n  }\n\n  return mergeStyles(theme.fonts.large, {\n    paddingLeft: \"12px\",\n    paddingRight: \"12px\",\n  });\n};\n\n/**\n * Returns a style for a command bar that tries to maximize the size of the items within it, for a\n * simplified appearance that is more mobile-friendly than the default style. Items within the\n * command bar should be styled to fill the command bar vertically, and take enough space to be\n * easy to interact with.\n */\nexport const commandBarStyle: ICommandBarStyles = {\n  root: {\n    alignItems: \"center\",\n    height: \"4vh\",\n    padding: \"0px\",\n  },\n  primarySet: {\n    alignSelf: \"stretch\",\n  },\n  secondarySet: {\n    alignSelf: \"stretch\",\n  },\n};\n\n/** Returns a style for the editor text area component. */\nexport const editorTextAreaStyle = (theme: ITheme): React.CSSProperties => {\n  return {\n    backgroundColor: theme.semanticColors.bodyStandoutBackground,\n    borderStyle: \"solid\",\n    borderWidth: \"1px\",\n    boxSizing: \"border-box\",\n    color: theme.semanticColors.bodyText,\n    height: \"90vh\",\n    padding: \"0.25vh 0.25vw 0.25vh 0.25vw\",\n    resize: \"none\",\n    width: \"100%\",\n  };\n};\n\n/** Fonts to use in case other fonts are not available. */\nexport const fallbackFontStack = \"Calibri; Times New Roman; Courier New; sans-serif\";\n\n/** Display none. */\nexport const hiddenAndInaccessible = mergeStyles({\n  display: \"none\",\n});\n\n/** Separates an icon from text that follows it.  */\nexport const iconSpaceBeforeTextStyle: IIconStyles = {\n  root: {\n    marginRight: \"8px\",\n  },\n};\n\n/** Sets up the div containing the editor textarea. */\nexport const mainViewEditorStyle = mergeStyles({\n  boxSizing: \"border-box\",\n  height: \"90vh\",\n  margin: \"0 0.25vw 0 0\",\n  width: \"49.75vw\",\n});\n\n/** Styles the runner to give it a border and make overflowing generated content scroll. */\nexport const mainViewRunnerStyle = (theme: ITheme): IStyle => {\n  return {\n    borderColor: theme.semanticColors.menuDivider,\n    borderStyle: \"solid\",\n    borderWidth: \"1px\",\n    boxSizing: \"border-box\",\n    height: \"90vh\",\n    margin: \"0 0 0 0.25vw\",\n    width: \"49.75vw\",\n  };\n};\n\n/** Sets up the div containing the editor and runner so they stretch horizontally to full size. */\nexport const mainViewWrapperStyle = mergeStyles({ display: \"flex\", alignItems: \"stretch\", margin: \"4px\" });\n\n/** Styles the innermost div that contains all generated content in the runner. */\nexport const runnerOutputWrapperStyle = mergeStyles({\n  flexGrow: 1,\n  overflowY: \"auto\",\n  paddingLeft: \"0.5vw\",\n  paddingRight: \"0.5vw\",\n  paddingTop: \"0.5vw\",\n});\n\n/** Styles the div containing all controls associated to the runner so they display properly. */\nexport const runnerWrapperStyle = mergeStyles({ display: \"flex\", flexDirection: \"column\", height: \"90vh\" });\n","import { IToken } from \"./utils\";\n\n/** A bool token to store a bool literal. */\nexport class TokenBool implements IToken {\n  public strForm: string;\n  public value: boolean;\n\n  constructor(value: boolean) {\n    this.strForm = value.toString();\n    this.value = value;\n  }\n\n  /** Returns true if all properties of each token are the same. */\n  public equals(obj: TokenBool) {\n    return this.strForm === obj.strForm && this.value === obj.value;\n  }\n}\n","/**\n * The values of entries in this file are guaranteed to remain the same so that they form a\n * reliable public API that enables browser plugins and other script modifications to work with\n * the editor & runner software. Do not change them.\n */\n\n/** Identifies the source input field for direct editing. */\nexport const idEditorInputfield = \"editor-inputfield\";\n\n/** Wraps the div that contains everything related to the editor. */\nexport const idEditorWrapper = \"editor-wrapper\";\n\n/** Wraps the content of the current page. */\nexport const idRunnerContent = \"runner-content\";\n\n/** Indentifies the textbox while playing the game, if available. */\nexport const idRunnerInputfield = \"runner-inputfield\";\n\n/** Wraps the log of all previous content (both player input and game output). */\nexport const idRunnerLog = \"runner-log\";\n\n/** Wraps the hyperlink options list. */\nexport const idRunnerOptions = \"runner-options\";\n\n/** Identifies the special restart option. */\nexport const idRunnerOptionRestart = \"runner-option-restart\";\n\n/** Wraps the div that contains everything related to the runner. */\nexport const idRunnerWrapper = \"runner-wrapper\";\n\n/** Identifies an element in the runner designated as representing player input. */\nexport const idRunnerInputElement = \"runner-input\";\n\n/** Identifies an element in the runner designated as representing an option. */\nexport const idRunnerOptionElement = \"runner-option\";\n\n/** Identifies an element in the runner designated as representing game output. */\nexport const idRunnerOutputElement = \"runner-output\";\n","import { getStrings } from \"./localization/Localization\";\nimport { createTheme, ITheme } from \"office-ui-fabric-react/lib/Styling\";\n\nexport enum ThemeTypes {\n  Light,\n  Dark,\n}\n\n/** All existing themes. The theme dropdown menu populates items in the given order, so don't change it. */\nexport enum Themes {\n  DefaultLight = 0,\n  EarthAndSky = 1,\n  Lucky = 2,\n  ContrastLight = 3,\n  DefaultDark = 4,\n  DeepSea = 5,\n  MidnightEarth = 6,\n  ContrastDark = 7,\n}\n\nexport interface ISupportedTheme {\n  localizedName: string;\n  theme: ITheme;\n  themeId: Themes;\n  themeType: ThemeTypes;\n}\n\nconst strings = getStrings();\n\n/** Colors with associated themes. Note: items here are displayed in the order given below for the themes dropdown. */\nexport const themes: { [key in Themes]: ISupportedTheme } = {\n  [Themes.ContrastDark]: {\n    localizedName: strings.ThemeContrastDark,\n    themeId: Themes.ContrastDark,\n    themeType: ThemeTypes.Dark,\n    theme: createTheme({\n      palette: {\n        themePrimary: \"#ffea00\",\n        themeLighterAlt: \"#0a0900\",\n        themeLighter: \"#292500\",\n        themeLight: \"#4d4600\",\n        themeTertiary: \"#998c00\",\n        themeSecondary: \"#e0ce00\",\n        themeDarkAlt: \"#ffec19\",\n        themeDark: \"#ffef3d\",\n        themeDarker: \"#fff370\",\n        neutralLighterAlt: \"#0b0b0b\",\n        neutralLighter: \"#151515\",\n        neutralLight: \"#252525\",\n        neutralQuaternaryAlt: \"#2f2f2f\",\n        neutralQuaternary: \"#373737\",\n        neutralTertiaryAlt: \"#595959\",\n        neutralTertiary: \"#c8c8c8\",\n        neutralSecondary: \"#d0d0d0\",\n        neutralPrimaryAlt: \"#dadada\",\n        neutralPrimary: \"#ffffff\",\n        neutralDark: \"#f4f4f4\",\n        black: \"#f8f8f8\",\n        white: \"#000000\",\n      },\n    }),\n  },\n  [Themes.ContrastLight]: {\n    localizedName: strings.ThemeContrastLight,\n    themeId: Themes.ContrastLight,\n    themeType: ThemeTypes.Light,\n    theme: createTheme({\n      palette: {\n        themePrimary: \"#000080\",\n        themeLighterAlt: \"#f0f0fa\",\n        themeLighter: \"#c5c5eb\",\n        themeLight: \"#9898d9\",\n        themeTertiary: \"#4747b3\",\n        themeSecondary: \"#11118f\",\n        themeDarkAlt: \"#000073\",\n        themeDark: \"#000061\",\n        themeDarker: \"#000047\",\n        neutralLighterAlt: \"#f8f8f8\",\n        neutralLighter: \"#f4f4f4\",\n        neutralLight: \"#eaeaea\",\n        neutralQuaternaryAlt: \"#dadada\",\n        neutralQuaternary: \"#d0d0d0\",\n        neutralTertiaryAlt: \"#c8c8c8\",\n        neutralTertiary: \"#595754\",\n        neutralSecondary: \"#373534\",\n        neutralPrimaryAlt: \"#2f2d2c\",\n        neutralPrimary: \"#000000\",\n        neutralDark: \"#151413\",\n        black: \"#0b0b0a\",\n        white: \"#ffffff\",\n      },\n    }),\n  },\n  [Themes.DeepSea]: {\n    localizedName: strings.ThemeDeepSea,\n    themeId: Themes.DeepSea,\n    themeType: ThemeTypes.Dark,\n    theme: createTheme({\n      palette: {\n        themePrimary: \"#e8a63c\",\n        themeLighterAlt: \"#090702\",\n        themeLighter: \"#251b0a\",\n        themeLight: \"#463212\",\n        themeTertiary: \"#8b6424\",\n        themeSecondary: \"#cc9235\",\n        themeDarkAlt: \"#eaaf4e\",\n        themeDark: \"#eeba68\",\n        themeDarker: \"#f2cc8e\",\n        neutralLighterAlt: \"#02132b\",\n        neutralLighter: \"#041833\",\n        neutralLight: \"#092141\",\n        neutralQuaternaryAlt: \"#0e274a\",\n        neutralQuaternary: \"#122c51\",\n        neutralTertiaryAlt: \"#27456f\",\n        neutralTertiary: \"#e8f6f6\",\n        neutralSecondary: \"#ebf8f7\",\n        neutralPrimaryAlt: \"#eff9f9\",\n        neutralPrimary: \"#dcf2f1\",\n        neutralDark: \"#f7fcfc\",\n        black: \"#fbfdfd\",\n        white: \"#000e21\",\n      },\n    }),\n  },\n  [Themes.DefaultDark]: {\n    localizedName: strings.ThemeDefaultDark,\n    themeId: Themes.DefaultDark,\n    themeType: ThemeTypes.Dark,\n    theme: createTheme({\n      palette: {\n        themePrimary: \"#00c8ff\",\n        themeLighterAlt: \"#00080a\",\n        themeLighter: \"#002029\",\n        themeLight: \"#003c4d\",\n        themeTertiary: \"#007899\",\n        themeSecondary: \"#00b0e0\",\n        themeDarkAlt: \"#19cdff\",\n        themeDark: \"#3dd5ff\",\n        themeDarker: \"#70e0ff\",\n        neutralLighterAlt: \"#323130\",\n        neutralLighter: \"#31302f\",\n        neutralLight: \"#2f2e2d\",\n        neutralQuaternaryAlt: \"#2c2b2a\",\n        neutralQuaternary: \"#2a2928\",\n        neutralTertiaryAlt: \"#282726\",\n        neutralTertiary: \"#c8c8c8\",\n        neutralSecondary: \"#d0d0d0\",\n        neutralPrimaryAlt: \"#dadada\",\n        neutralPrimary: \"#ffffff\",\n        neutralDark: \"#f4f4f4\",\n        black: \"#f8f8f8\",\n        white: \"#323130\",\n      },\n    }),\n  },\n  [Themes.DefaultLight]: {\n    localizedName: strings.ThemeDefaultLight,\n    themeId: Themes.DefaultLight,\n    themeType: ThemeTypes.Light,\n    theme: createTheme({\n      palette: {\n        themePrimary: \"#0078d4\",\n        themeLighterAlt: \"#eff6fc\",\n        themeLighter: \"#deecf9\",\n        themeLight: \"#c7e0f4\",\n        themeTertiary: \"#71afe5\",\n        themeSecondary: \"#2b88d8\",\n        themeDarkAlt: \"#106ebe\",\n        themeDark: \"#005a9e\",\n        themeDarker: \"#004578\",\n        neutralLighterAlt: \"#faf9f8\",\n        neutralLighter: \"#f3f2f1\",\n        neutralLight: \"#edebe9\",\n        neutralQuaternaryAlt: \"#e1dfdd\",\n        neutralQuaternary: \"#d0d0d0\",\n        neutralTertiaryAlt: \"#c8c6c4\",\n        neutralTertiary: \"#a19f9d\",\n        neutralSecondary: \"#605e5c\",\n        neutralPrimaryAlt: \"#3b3a39\",\n        neutralPrimary: \"#323130\",\n        neutralDark: \"#201f1e\",\n        black: \"#000000\",\n        white: \"#ffffff\",\n      },\n    }),\n  },\n  [Themes.EarthAndSky]: {\n    localizedName: strings.ThemeEarthAndSky,\n    themeId: Themes.EarthAndSky,\n    themeType: ThemeTypes.Light,\n    theme: createTheme({\n      palette: {\n        themePrimary: \"#8f4700\",\n        themeLighterAlt: \"#fbf6f0\",\n        themeLighter: \"#eddac7\",\n        themeLight: \"#ddbc9b\",\n        themeTertiary: \"#bc834b\",\n        themeSecondary: \"#9c5813\",\n        themeDarkAlt: \"#814000\",\n        themeDark: \"#6d3600\",\n        themeDarker: \"#502800\",\n        neutralLighterAlt: \"#e9f6f8\",\n        neutralLighter: \"#e5f2f4\",\n        neutralLight: \"#dce8ea\",\n        neutralQuaternaryAlt: \"#cdd8da\",\n        neutralQuaternary: \"#c4cfd0\",\n        neutralTertiaryAlt: \"#bcc7c8\",\n        neutralTertiary: \"#a19f9d\",\n        neutralSecondary: \"#605e5c\",\n        neutralPrimaryAlt: \"#3b3a39\",\n        neutralPrimary: \"#323130\",\n        neutralDark: \"#201f1e\",\n        black: \"#000000\",\n        white: \"#f0fdff\",\n      },\n    }),\n  },\n  [Themes.Lucky]: {\n    localizedName: strings.ThemeLucky,\n    themeId: Themes.Lucky,\n    themeType: ThemeTypes.Light,\n    theme: createTheme({\n      palette: {\n        themePrimary: \"#00570e\",\n        themeLighterAlt: \"#cfebd3\",\n        themeLighter: \"#a7d8af\",\n        themeLight: \"#83c68e\",\n        themeTertiary: \"#63b370\",\n        themeSecondary: \"#47a156\",\n        themeDarkAlt: \"#2f8e3f\",\n        themeDark: \"#1b7c2b\",\n        themeDarker: \"#0c691b\",\n        neutralLighterAlt: \"#f3f3f3\",\n        neutralLighter: \"#efefef\",\n        neutralLight: \"#e5e5e5\",\n        neutralQuaternaryAlt: \"#d6d6d6\",\n        neutralQuaternary: \"#cccccc\",\n        neutralTertiaryAlt: \"#c4c4c4\",\n        neutralTertiary: \"#a19f9d\",\n        neutralSecondary: \"#605e5c\",\n        neutralPrimaryAlt: \"#3b3a39\",\n        neutralPrimary: \"#323130\",\n        neutralDark: \"#201f1e\",\n        black: \"#000000\",\n        white: \"#fafafa\",\n      },\n    }),\n  },\n  [Themes.MidnightEarth]: {\n    localizedName: strings.ThemeMidnightEarth,\n    themeId: Themes.MidnightEarth,\n    themeType: ThemeTypes.Dark,\n    theme: createTheme({\n      palette: {\n        themePrimary: \"#d1ad7d\",\n        themeLighterAlt: \"#080705\",\n        themeLighter: \"#211c14\",\n        themeLight: \"#3f3426\",\n        themeTertiary: \"#7d684b\",\n        themeSecondary: \"#b8986e\",\n        themeDarkAlt: \"#d6b489\",\n        themeDark: \"#dcbf99\",\n        themeDarker: \"#e5cfb2\",\n        neutralLighterAlt: \"#0b0b0b\",\n        neutralLighter: \"#151515\",\n        neutralLight: \"#252525\",\n        neutralQuaternaryAlt: \"#2f2f2f\",\n        neutralQuaternary: \"#373737\",\n        neutralTertiaryAlt: \"#595959\",\n        neutralTertiary: \"#e0e0e0\",\n        neutralSecondary: \"#e5e5e5\",\n        neutralPrimaryAlt: \"#eaeaea\",\n        neutralPrimary: \"#d1d1d1\",\n        neutralDark: \"#f4f4f4\",\n        black: \"#f9f9f9\",\n        white: \"#000000\",\n      },\n    }),\n  },\n};\n","import { IToken } from \"./utils\";\n\n/** A numeric token to store an identifer. */\nexport class TokenId implements IToken {\n  public strForm: string;\n  public value: number | string | boolean | null;\n\n  constructor(name: string, value: number | string | boolean | null) {\n    this.strForm = name;\n    this.value = value;\n  }\n\n  /** Returns true if all properties of each token are the same. */\n  public equals(obj: TokenId) {\n    return this.strForm === obj.strForm && this.value === obj.value;\n  }\n}\n","import { IToken, tokenEvalFunc } from \"./utils\";\n\n/** A symbolic token to store a general symbol. */\nexport class TokenFunc implements IToken {\n  public strForm: string;\n  public numArgs: number;\n  public function: tokenEvalFunc;\n\n  constructor(name: string, numberOfArgs: number, operation: tokenEvalFunc) {\n    this.strForm = name;\n    this.numArgs = numberOfArgs;\n    this.function = operation;\n  }\n\n  /** Returns true if all properties of each token are the same. */\n  public equals(obj: TokenFunc) {\n    return this.strForm === obj.strForm && this.numArgs === obj.numArgs && this.function === obj.function;\n  }\n}\n","import { localizedStrings } from \"./LocalizedStrings\";\n\n/**\n * Gets the nearest supported locale from the browser using navigator.languages or\n * navigator.language. This is accurate for Firefox and Chrome. IE and Edge return the OS language\n * instead and only return the browser language from an Accept-Languages header. This is considered\n * good enough though. Defaults to en-US if the preferred locale isn't listed.\n */\nexport const getSupportedLocale = (): keyof ILocalizedStringSets => {\n  let defaultLocale = \"en-us\";\n\n  // This is an experimental feature at time of writing, so it may be undefined.\n  if (navigator.languages !== undefined) {\n    for (const lang of navigator.languages) {\n      const langParts = lang.toLowerCase().split(\"-\");\n      const language = langParts[0];\n      const region = langParts.length > 1 ? langParts[1] : \"\";\n\n      // If a language but not the dialect for a region is available, use it instead.\n      if (`${language}-${region}` in supportedLocales) {\n        defaultLocale = `${language}-${region}`;\n        break;\n      } else if (`${language}` in supportedLocales) {\n        defaultLocale = `${language}`;\n        break;\n      }\n    }\n  } else {\n    const language = navigator.language.toLowerCase();\n\n    if (language in supportedLocales) {\n      defaultLocale = language;\n    }\n  }\n\n  return supportedLocales[defaultLocale as keyof ISupportedLocales];\n};\n\n/** Returns the strings for the given locale, or the assumed locale if not provided. */\nexport const getStrings = (locale?: keyof ISupportedLocales): ILocalizedStrings => {\n  return localizedStrings[supportedLocales[locale || getSupportedLocale()] as keyof typeof localizedStrings];\n};\n\n/** All locales to be accepted as valid. */\nexport interface ISupportedLocales {\n  \"en\": keyof ILocalizedStringSets;\n  \"en-us\": keyof ILocalizedStringSets;\n}\n\n/** A list of valid locales as keys, and the locales they default to as values. */\nexport const supportedLocales: ISupportedLocales = {\n  \"en\": \"en-us\",\n  \"en-us\": \"en-us\",\n};\n\n/** All locales with direct support. */\nexport interface ILocalizedStringSets {\n  \"en-us\": ILocalizedStrings;\n}\n\n/** All strings to be localized per locale. */\nexport interface ILocalizedStrings {\n  ApplicationName: string;\n  ApplicationNameAndVersion: (appName: string, appVersion: string) => string;\n  EditorPlay: string;\n  LanguageCodeName: string;\n  MenuFile: string;\n  MenuFileNew: string;\n  MenuFileOpen: string;\n  MenuFileSave: string;\n  RunnerRestart: string;\n  ThemeContrastDark: string;\n  ThemeContrastLight: string;\n  ThemeDefaultDark: string;\n  ThemeDefaultLight: string;\n  ThemeDeepSea: string;\n  ThemeEarthAndSky: string;\n  ThemeLucky: string;\n  ThemeMidnightEarth: string;\n  ThemeDropdownText: (themeName: string) => string;\n  TipLanguage: string;\n  TipNavigateCommandBar: string;\n  TipTheme: string;\n}\n","/** Represents a single token for evaluation. */\nexport interface IToken {\n  strForm: string;\n}\n\n/**\n * When this function is used, the input numbers can be accessed as an array of objects. As many as\n * provided by the number of arguments may be used.\n */\nexport type tokenEvalFunc = (tokens: IToken[]) => IToken | null;\n\n/** Matches an integer with optional negative sign in front. */\nexport const integerRegex = /^-*\\d+$/g;\n\n/** Matches a valid decimal number. */\nexport const numberRegex = /^-?(\\d+\\.?\\d*|\\d*\\.?\\d+)$/g;\n","import { getActionGuid } from \"./reduxTools\";\n\nexport const actions = {\n  rerenderStory: getActionGuid(),\n  saveAndRunStory: getActionGuid(),\n  updateStory: getActionGuid(),\n};\n\n/** Re-renders the visual state of the interpreter.  */\nexport const rerenderStory = {\n  type: actions.rerenderStory,\n};\n\n/** Runs the story and save as needed. */\nexport const saveAndRunStory = (story: string) => {\n  return {\n    story,\n    type: actions.saveAndRunStory,\n  };\n};\n\n/** Updates the contents of the story. */\nexport const updateStory = (story: string) => {\n  return {\n    story,\n    type: actions.updateStory,\n  };\n};\n","import { combineReducers, Dispatch } from \"redux\";\nimport { actions, updateStory, saveAndRunStory, rerenderStory } from \"./viewedit.actions\";\n\n/**\n * Contains the up-to-date text for the story, which is updated when loading a story, adding to\n * it with GUI controls, trying to run the story after editing the source, or blurring the textarea\n * after editing the source.\n */\nconst story = (state = \"\", action: ReturnType<typeof updateStory | typeof saveAndRunStory>) => {\n  if (action.type === actions.updateStory) {\n    return action.story;\n  }\n  if (action.type === actions.saveAndRunStory) {\n    return action.story;\n  }\n\n  return state;\n};\n\n/**\n * Contains the copy of the story from when it was last executed, which may be older than the\n * current story. Updating this causes the story to execute again.\n */\nconst storyToParse = (state = \"\", action: ReturnType<typeof saveAndRunStory>) => {\n  if (action.type === actions.saveAndRunStory) {\n    return action.story;\n  }\n\n  return state;\n};\n\n/**\n * Uses a number to indicate that the story should be parsed again. Necessary because there is no good way to pass the\n * action from the editor to runner, and restarting without the story text changing is a common operation.\n */\nconst storyReparseToken = (state = 0, action: ReturnType<typeof saveAndRunStory>) => {\n  if (action.type === actions.saveAndRunStory) {\n    return state + 1;\n  }\n\n  return state;\n};\n\n/**\n * Uses a number to indicate that the runner should re-render. The alternative is to re-render any time output, input,\n * and logs change, which gets up to 20-30 re-renders per new page. Instead, increment this when the page is done.\n */\nconst storyRerenderToken = (state = 0, action: typeof rerenderStory) => {\n  if (action.type === actions.rerenderStory) {\n    return state + 1;\n  }\n\n  return state;\n};\n\n/** Sets the story that the user has typed. */\nexport const dispatchSetStory = (dispatch: Dispatch) => (story: string) => {\n  dispatch(updateStory(story));\n};\n\n/** Parses the story as currently written, updating the stored story to match the provided string. */\nexport const dispatchSaveAndRunStory = (dispatch: Dispatch) => (story: string) => {\n  dispatch(saveAndRunStory(story));\n};\n\n/** Causes the story to re-render. */\nexport const dispatchRerenderStory = (dispatch: Dispatch) => () => {\n  dispatch(rerenderStory);\n};\n\n// Combine reducers and typescript definition.\nexport interface IViewEditState {\n  story: string;\n  storyReparseToken: number;\n  storyRerenderToken: number;\n  storyToParse: string;\n}\n\nexport const viewEdit = combineReducers({\n  story,\n  storyReparseToken,\n  storyRerenderToken,\n  storyToParse,\n});\n","import { ITextStyle } from \"../redux/typedefs\";\r\nimport { ISupportedTheme, ThemeTypes } from \"../themes\";\r\nimport { fallbackFontStack } from \"./controlStyles\";\r\n\r\n/** Declaring the element type allows the interpreter to select the right fallback styles. */\r\nexport enum fallbackElementType {\r\n  input,\r\n  option,\r\n  optionHighlight,\r\n  output,\r\n}\r\n\r\n/**\r\n * The inherent styles used for different elements, if no other style is applied.\r\n * Note that the redundant casting below is necessary as of TS 4.0.3 due to type resolution problems.\r\n */\r\nconst fallbackStyles = (theme: ISupportedTheme) => {\r\n  return {\r\n    [fallbackElementType.input]: {\r\n      color: theme.theme.semanticColors.errorText,\r\n      fontFamily: fallbackFontStack,\r\n      fontSize: \"1.2 rem\",\r\n      fontStyle: \"normal\" as \"normal\",\r\n      fontWeight: \"normal\" as \"normal\",\r\n      textDecoration: \"inherit\" as \"inherit\",\r\n    },\r\n    [fallbackElementType.option]: {\r\n      color: theme.theme.palette.blue,\r\n      fontFamily: fallbackFontStack,\r\n      fontSize: \"1.2 rem\",\r\n      fontStyle: \"normal\" as \"normal\",\r\n      fontWeight: \"normal\" as \"normal\",\r\n      textDecoration: \"underline\" as \"underline\",\r\n    },\r\n    [fallbackElementType.optionHighlight]: {\r\n      color: theme.theme.palette.blueDark,\r\n      fontFamily: fallbackFontStack,\r\n      fontSize: \"1.2 rem\",\r\n      fontStyle: \"normal\" as \"normal\",\r\n      fontWeight: \"normal\" as \"normal\",\r\n      textDecoration: \"underline\" as \"underline\",\r\n    },\r\n    [fallbackElementType.output]: {\r\n      color: theme.theme.semanticColors.bodyText,\r\n      fontFamily: fallbackFontStack,\r\n      fontSize: \"1.2 rem\",\r\n      fontStyle: \"normal\" as \"normal\",\r\n      fontWeight: \"normal\" as \"normal\",\r\n      textDecoration: \"inherit\" as \"inherit\",\r\n    },\r\n  };\r\n};\r\n\r\n/**\r\n * Applies text styles to determine font family, size, bold/italic/underline, and color. Players can set their own\r\n * style overrides (playerStyle). The author can set styles within the game that deviate from the normal styling\r\n * (storyStyle), and set a global default style for the story (authorStyle). When editing a story, playerStyle should\r\n * be left empty. PlayerStyle overrides storyStyle, which overrides authorStyle. Overrides work per attribute, and\r\n * fall down to the next style if not met, or a natural default if none are met.\r\n *\r\n * Light colors are used in lightMode and dark colors in darkMode, as defined by the theming.\r\n *\r\n * @param playerStyle Styles that a player has set to override all styles in stories they read, if set.\r\n * @param storyStyle Specific one-off styling within the story.\r\n * @param authorStyle Styles that an author has set as the default text styling.\r\n */\r\nexport const getTextStyle = (\r\n  theme: ISupportedTheme,\r\n  playerStyle: ITextStyle,\r\n  storyStyle: ITextStyle,\r\n  authorStyle: ITextStyle,\r\n  fallback: fallbackElementType\r\n): React.CSSProperties => {\r\n  const fallbackStyle = fallbackStyles(theme)[fallback];\r\n\r\n  const color =\r\n    theme.themeType === ThemeTypes.Light\r\n      ? playerStyle.colorLight || storyStyle.colorLight || authorStyle.colorLight || fallbackStyle.color\r\n      : playerStyle.colorDark || storyStyle.colorDark || authorStyle.colorDark || fallbackStyle.color;\r\n\r\n  const fontFamily = playerStyle.font || storyStyle.font || authorStyle.font || fallbackStyle.fontFamily;\r\n  const fontSize = playerStyle.fontSize || storyStyle.fontSize || authorStyle.fontSize || fallbackStyle.fontSize;\r\n\r\n  let fontStyle: \"italic\" | \"normal\" = \"normal\";\r\n  let fontWeight: \"bold\" | \"normal\" = \"normal\";\r\n  let textDecoration: \"underline\" | \"inherit\" = \"inherit\";\r\n\r\n  if (playerStyle.fontStyle) {\r\n    fontStyle = playerStyle.fontStyle.includes(\"i\") ? \"italic\" : fallbackStyle.fontStyle;\r\n  } else if (storyStyle.fontStyle) {\r\n    fontStyle = storyStyle.fontStyle.includes(\"i\") ? \"italic\" : fallbackStyle.fontStyle;\r\n  } else if (authorStyle.fontStyle) {\r\n    fontStyle = authorStyle.fontStyle.includes(\"i\") ? \"italic\" : fallbackStyle.fontStyle;\r\n  }\r\n\r\n  if (playerStyle.fontStyle) {\r\n    fontWeight = playerStyle.fontStyle.includes(\"b\") ? \"bold\" : fallbackStyle.fontWeight;\r\n  } else if (storyStyle.fontStyle) {\r\n    fontWeight = storyStyle.fontStyle.includes(\"b\") ? \"bold\" : fallbackStyle.fontWeight;\r\n  } else if (authorStyle.fontStyle) {\r\n    fontWeight = authorStyle.fontStyle.includes(\"b\") ? \"bold\" : fallbackStyle.fontWeight;\r\n  }\r\n\r\n  if (playerStyle.fontStyle) {\r\n    textDecoration = playerStyle.fontStyle.includes(\"u\") ? \"underline\" : fallbackStyle.textDecoration;\r\n  } else if (storyStyle.fontStyle) {\r\n    textDecoration = storyStyle.fontStyle.includes(\"u\") ? \"underline\" : fallbackStyle.textDecoration;\r\n  } else if (authorStyle.fontStyle) {\r\n    textDecoration = authorStyle.fontStyle.includes(\"u\") ? \"underline\" : fallbackStyle.textDecoration;\r\n  }\r\n\r\n  return {\r\n    color,\r\n    fontFamily,\r\n    fontSize,\r\n    fontStyle,\r\n    fontWeight,\r\n    textDecoration,\r\n    whiteSpace: \"pre-wrap\", // respects newlines and multiple whitespace.\r\n  };\r\n};\r\n","import { IToken, numberRegex } from \"./utils\";\n\n/** A numeric token to store a numeric literal. */\nexport class TokenNum implements IToken {\n  public strForm: string;\n  public value: number;\n\n  constructor(value: string | number) {\n    if (typeof value === \"string\") {\n      this.strForm = value;\n\n      if (!numberRegex.test(value)) {\n        throw new Error(\"Parser: The expression '\" + value + \"' is not a valid number.\"); // TODO: localize.\n      }\n\n      this.value = parseFloat(value);\n    } else {\n      this.strForm = value.toString();\n      this.value = value;\n    }\n  }\n\n  /** Returns true if all properties of each token are the same. */\n  public equals(obj: TokenNum) {\n    return this.strForm === obj.strForm && this.value === obj.value;\n  }\n}\n","import { ILocalizedStringSets } from \"./Localization\";\n\n// tslint:disable:max-line-length It's actually more legible to keep strings on one line here.\n\n/** All strings localized in all locales. */\nexport const localizedStrings: ILocalizedStringSets = {\n  \"en-us\": {\n    ApplicationName: \"Joshua Tree\",\n    ApplicationNameAndVersion: (appName: string, appVersion: string) => `${appName} version ${appVersion}`,\n    LanguageCodeName: \"English (United States)\",\n    MenuFile: \"File\",\n    MenuFileNew: \"New\",\n    MenuFileOpen: \"Open\",\n    MenuFileSave: \"Save\",\n    RunnerRestart: \"Restart\",\n    ThemeContrastDark: \"🌑 Contrast Dark\",\n    ThemeContrastLight: \"☀️ Contrast Light\",\n    ThemeDefaultDark: \"🌑 Default Dark\",\n    ThemeDefaultLight: \"☀️ Default Light\",\n    ThemeDeepSea: \"🌑 Deep Sea\",\n    ThemeEarthAndSky: \"☀️ Earth and Sky\",\n    ThemeLucky: \"☀️ Lucky\",\n    ThemeMidnightEarth: \"🌑 Midnight Earth\",\n    ThemeDropdownText: (themeName: string) => `${themeName} theme`,\n    TipLanguage: \"Language\",\n    TipNavigateCommandBar: \"Use left and right arrow keys to navigate between commands.\",\n    TipTheme: \"Theme\",\n\n    EditorPlay: \"Play\",\n  },\n};\n","import { getActionGuid } from \"./reduxTools\";\nimport { IAuthorRunnerOptions } from \"./typedefs\";\n\nexport const actions = {\n  clearAllTempSettings: getActionGuid(),\n  setCurrentRunnerOptions: getActionGuid(),\n};\n\n/** Resets all temp settings to minimal defaults. */\nexport const clearAllTempSettings = {\n  type: actions.clearAllTempSettings,\n};\n\n/**\n * Sets story options such as logging behavior.\n */\nexport const setCurrentRunnerOptions = (options: IAuthorRunnerOptions) => {\n  return {\n    type: actions.setCurrentRunnerOptions,\n    options,\n  };\n};\n","import { combineReducers, Dispatch } from \"redux\";\nimport * as actions from \"./currentRunnerSettings.actions\";\nimport * as types from \"./typedefs\";\n\nconst currentRunnerOptions = (state = {}, action: ReturnType<typeof actions.setCurrentRunnerOptions>) => {\n  if (action.type === actions.actions.setCurrentRunnerOptions) {\n    return action.options;\n  }\n  if (action.type === actions.actions.clearAllTempSettings) {\n    return {};\n  }\n\n  return state;\n};\n\nexport const dispatchClearAllTempSettings = (dispatch: Dispatch) => {\n  dispatch(actions.clearAllTempSettings);\n};\n\nexport const dispatchSetTempStoryRunnerOptions = (dispatch: Dispatch) => (options: types.IAuthorRunnerOptions) => {\n  dispatch(actions.setCurrentRunnerOptions(options));\n};\n\n// Combine reducers and typescript definition.\nexport interface ICurrentRunnerSettingsState {\n  currentRunnerSettings: types.IAuthorRunnerOptions;\n}\n\nexport const currentRunnerSettings = combineReducers({\n  currentRunnerOptions,\n});\n","import { getActionGuid } from \"./reduxTools\";\nimport {\n  IRunnerLogSeparatorStyle,\n  IRunnerStyle,\n  IAuthorRunnerOptions,\n  ITextStyle,\n  IAuthorRunnerStrings,\n} from \"./typedefs\";\n\nexport const actions = {\n  setAuthorStoryInputStyles: getActionGuid(),\n  setAuthorStoryLogSeparatorStyles: getActionGuid(),\n  setAuthorStoryOptionStyles: getActionGuid(),\n  setAuthorStoryOptionHighlightStyles: getActionGuid(),\n  setAuthorStoryOutputStyles: getActionGuid(),\n  setAuthorStoryRunnerOptions: getActionGuid(),\n  setAuthorStoryRunnerStyles: getActionGuid(),\n  setAuthorStoryStrings: getActionGuid(),\n};\n\n/**\n * Sets the global story styling for previous textbox input from the player. This isn't necessarily the final styling.\n * The order goes built-in defaults -> global story styling -> story style override -> player style override.\n */\nexport const setAuthorStoryInputStyles = (style: ITextStyle) => {\n  return {\n    type: actions.setAuthorStoryInputStyles,\n    style,\n  };\n};\n\n/*\n * Sets the global story styling for the log separator. This isn't necessarily the final styling. The order goes\n * built-in defaults -> global story styling -> player style override.\n */\nexport const setAuthorStoryLogSeparatorStyles = (style: IRunnerLogSeparatorStyle) => {\n  return {\n    type: actions.setAuthorStoryLogSeparatorStyles,\n    style,\n  };\n};\n\n/**\n * Sets the global story styling for hyperlinks in the story. This isn't necessarily the final styling. The order goes\n * built-in defaults -> global story styling -> story style override -> player style override.\n */\nexport const setAuthorStoryOptionStyles = (style: ITextStyle) => {\n  return {\n    type: actions.setAuthorStoryOptionStyles,\n    style,\n  };\n};\n\n/**\n * Sets the global story styling for hovered hyperlinks in the story. This isn't necessarily the final styling. The\n * order goes built-in defaults -> global story styling -> story style override -> player style override.\n */\nexport const setAuthorStoryOptionHighlightStyles = (style: ITextStyle) => {\n  return {\n    type: actions.setAuthorStoryOptionHighlightStyles,\n    style,\n  };\n};\n\n/**\n * Sets the global story styling for all text output from the story. This isn't necessarily the final styling. The\n * order goes built-in defaults -> global story styling -> story style override -> player style override.\n */\nexport const setAuthorStoryOutputStyles = (style: ITextStyle) => {\n  return {\n    type: actions.setAuthorStoryOutputStyles,\n    style,\n  };\n};\n\n/**\n * Sets story options such as logging behavior.\n */\nexport const setAuthorStoryRunnerOptions = (options: IAuthorRunnerOptions) => {\n  return {\n    type: actions.setAuthorStoryRunnerOptions,\n    options,\n  };\n};\n\n/**\n * Sets the global story styling for the runner itself. This isn't necessarily the final styling. The order goes\n * built-in defaults -> global story styling -> story style override -> player style override.\n */\nexport const setAuthorStoryRunnerStyles = (style: IRunnerStyle) => {\n  return {\n    type: actions.setAuthorStoryRunnerStyles,\n    style,\n  };\n};\n\n/**\n * Overrides special built-in strings relevant to the story.\n */\nexport const setAuthorStoryStrings = (strings: IAuthorRunnerStrings) => {\n  return {\n    type: actions.setAuthorStoryStrings,\n    strings,\n  };\n};\n","import { combineReducers, Dispatch } from \"redux\";\nimport * as actions from \"./authorStorySettings.actions\";\nimport * as types from \"./typedefs\";\n\nconst authorStoryInputStyles = (state = {}, action: ReturnType<typeof actions.setAuthorStoryInputStyles>) => {\n  if (action.type === actions.actions.setAuthorStoryInputStyles) {\n    return action.style;\n  }\n\n  return state;\n};\n\nconst authorStoryLogSeparatorStyles = (\n  state = {},\n  action: ReturnType<typeof actions.setAuthorStoryLogSeparatorStyles>\n) => {\n  if (action.type === actions.actions.setAuthorStoryLogSeparatorStyles) {\n    return action.style;\n  }\n\n  return state;\n};\n\nconst authorStoryOptionStyles = (state = {}, action: ReturnType<typeof actions.setAuthorStoryOptionStyles>) => {\n  if (action.type === actions.actions.setAuthorStoryOptionStyles) {\n    return action.style;\n  }\n\n  return state;\n};\n\nconst authorStoryOptionHighlightStyles = (\n  state = {},\n  action: ReturnType<typeof actions.setAuthorStoryOptionHighlightStyles>\n) => {\n  if (action.type === actions.actions.setAuthorStoryOptionHighlightStyles) {\n    return action.style;\n  }\n\n  return state;\n};\n\nconst authorStoryOutputStyles = (state = {}, action: ReturnType<typeof actions.setAuthorStoryOutputStyles>) => {\n  if (action.type === actions.actions.setAuthorStoryOutputStyles) {\n    return action.style;\n  }\n\n  return state;\n};\n\nconst authorStoryRunnerOptions = (state = {}, action: ReturnType<typeof actions.setAuthorStoryRunnerOptions>) => {\n  if (action.type === actions.actions.setAuthorStoryRunnerOptions) {\n    return action.options;\n  }\n\n  return state;\n};\n\nconst authorStoryRunnerStyles = (\n  state = { background: { type: \"plain\" } },\n  action: ReturnType<typeof actions.setAuthorStoryRunnerStyles>\n) => {\n  if (action.type === actions.actions.setAuthorStoryRunnerStyles) {\n    return action.style;\n  }\n\n  return state;\n};\n\nconst authorStoryStrings = (state = {}, action: ReturnType<typeof actions.setAuthorStoryStrings>) => {\n  if (action.type === actions.actions.setAuthorStoryStrings) {\n    return action.strings;\n  }\n\n  return state;\n};\n\nexport const dispatchSetAuthorStoryInputStyles = (dispatch: Dispatch) => (style: types.ITextStyle) => {\n  dispatch(actions.setAuthorStoryInputStyles(style));\n};\n\nexport const dispatchSetAuthorStoryLogSeparatorStyles = (dispatch: Dispatch) => (\n  style: types.IRunnerLogSeparatorStyle\n) => {\n  dispatch(actions.setAuthorStoryLogSeparatorStyles(style));\n};\n\nexport const dispatchSetAuthorStoryOptionStyles = (dispatch: Dispatch) => (style: types.ITextStyle) => {\n  dispatch(actions.setAuthorStoryOptionStyles(style));\n};\n\nexport const dispatchSetAuthorStoryOptionHighlightStyles = (dispatch: Dispatch) => (style: types.ITextStyle) => {\n  dispatch(actions.setAuthorStoryOptionHighlightStyles(style));\n};\n\nexport const dispatchSetAuthorStoryOutputStyles = (dispatch: Dispatch) => (style: types.ITextStyle) => {\n  dispatch(actions.setAuthorStoryOutputStyles(style));\n};\n\nexport const dispatchSetAuthorStoryRunnerOptions = (dispatch: Dispatch) => (options: types.IAuthorRunnerOptions) => {\n  dispatch(actions.setAuthorStoryRunnerOptions(options));\n};\n\nexport const dispatchSetAuthorStoryRunnerStyles = (dispatch: Dispatch) => (style: types.IRunnerStyle) => {\n  dispatch(actions.setAuthorStoryRunnerStyles(style));\n};\n\nexport const dispatchSetAuthorStoryStrings = (dispatch: Dispatch) => (strings: types.IAuthorRunnerStrings) => {\n  dispatch(actions.setAuthorStoryStrings(strings));\n};\n\n// Combine reducers and typescript definition.\nexport interface IAuthorStorySettingsState {\n  authorStoryInputStyles: types.ITextStyle;\n  authorStoryLogSeparatorStyles: types.IRunnerLogSeparatorStyle;\n  authorStoryOptionStyles: types.ITextStyle;\n  authorStoryOptionHighlightStyles: types.ITextStyle;\n  authorStoryOutputStyles: types.ITextStyle;\n  authorStoryRunnerOptions: types.IAuthorRunnerOptions;\n  authorStoryRunnerStyles: types.IRunnerStyle;\n  authorStoryStrings: types.IAuthorRunnerStrings;\n}\n\nexport const authorStorySettings = combineReducers({\n  authorStoryInputStyles,\n  authorStoryLogSeparatorStyles,\n  authorStoryOptionStyles,\n  authorStoryOptionHighlightStyles,\n  authorStoryOutputStyles,\n  authorStoryRunnerOptions,\n  authorStoryRunnerStyles,\n  authorStoryStrings,\n});\n"],"sourceRoot":""}