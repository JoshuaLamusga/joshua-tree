{"version":3,"sources":["common/styles/controlStyles.ts","parse-story/storyInterpreter.tsx","common/random.ts","parse-expressions/Associativity.ts","parse-expressions/Placements.ts","parse-expressions/TokenOp.ts","parse-expressions/TokenSym.ts","parse-expressions/Parser.ts","common/redux/viewedit.actions.ts","common/redux/reduxTools.ts","gui/welcome/Welcome.tsx","gui/editor/EditorView.tsx","parse-story/storyParseNode.ts","parse-story/storyParser.ts","gui/runner/RunnerView.tsx","gui/runner-editor/RunnerEditorView.tsx","common/settings/settings.actions.ts","common/settings/settings.reducers.ts","common/storage/LocalStorageSaveHandler.tsx","gui/menu/MenuBarDropdown.tsx","gui/menu/CommonMenuItems.tsx","gui/menu/MenuBar.tsx","gui/editor/EditorMenuItems.ts","gui/runner/RunnerMenuItems.ts","common/routing/Routing.tsx","gui/OpenFileHandler.tsx","common/commands/CommandHandler.tsx","common/storage/persistence.actions.ts","common/storage/persistence.reducers.ts","common/redux/playerStorySettings.actions.ts","common/redux/playerStorySettings.reducers.ts","store.ts","index.tsx","common/commands/shortcutManager.ts","parse-expressions/TokenBool.ts","common/themes.ts","common/identifiers.ts","parse-expressions/TokenId.ts","parse-expressions/TokenFunc.ts","common/localization/Localization.ts","common/redux/viewedit.reducers.ts","parse-expressions/utils.ts","common/styles/interpreterStyles.ts","parse-expressions/TokenNum.ts","common/localization/LocalizedStrings.ts","common/redux/currentRunnerSettings.actions.ts","common/redux/currentRunnerSettings.reducers.ts","common/redux/authorStorySettings.actions.ts","common/redux/authorStorySettings.reducers.ts"],"names":["commandBarDropdownButtonStyle","root","alignSelf","commandBarDropdownSeparatorStyle","theme","borderColor","semanticColors","menuDivider","borderRightStyle","borderWidth","commandBarDropdownStyle","propStyles","caretDownWrapper","mergeStyles","position","right","width","dropdown","display","height","dropdownItem","fonts","large","dropdownItemSelected","title","border","borderRadius","alignItems","commandBarItemStyle","itemsOnRight","paddingLeft","paddingRight","commandBarStyle","padding","primarySet","secondarySet","editorTextAreaStyle","backgroundColor","bodyStandoutBackground","borderStyle","boxSizing","color","bodyText","resize","fallbackFontStack","hiddenAndInaccessible","iconSpaceBeforeTextStyle","marginRight","mainViewEditorStyle","margin","mainViewRunnerStyle","mainViewWrapperStyle","runnerOutputWrapperStyle","flexGrow","overflowY","paddingTop","runnerWrapperStyle","flexDirection","welcomeButtonStyle","random","uniqueKeyCounter","Number","MIN_SAFE_INTEGER","whitespaceRegex","colorRegex","singleDigitRegex","escapeBraceRegex","escapeNoBraceRegex","exprParser","Parser","StoryInterpreterC","props","actions","content","contentCached","currentOptionStyles","currentOptionHighlightStyles","currentOutputStyles","entries","errorMessage","fork","log","logCached","options","optionsCached","stopEvaluation","textboxHidden","timers","variables","variablesPrev","getRestartLink","combinedProps","addOption","authorStorySettings","authorStoryStrings","restartLinkText","strings","RunnerRestart","restartGame","idRunnerOptionRestart","onTextboxKeyPress","ev","charCode","forEach","action","currentTarget","value","refreshInterpreter","entriesKeys","Object","keys","setFork","nextProps","newProps","authorStoryRunnerOptions","randomSeed","seed","Random","this","map","node","text","fromOption","prefix","inputOptionPrefixText","inputTextboxPrefixText","style","getTextStyle","debugging","playerStorySettings","playerStoryInputStyles","authorStoryInputStyles","fallbackElementType","input","idRunnerInputElement","forkNameOrAction","key","inline","assign","linkAction","hideLog","logLimit","push","addInput","styleOptions","playerStoryOptionStyles","authorStoryOptionStyles","option","styleOptionsHighlight","playerStoryOptionHighlightStyles","authorStoryOptionHighlightStyles","optionHighlight","onClick","styles","fontSize","marginBottom","marginTop","marginLeft","rootFocused","rootHovered","label","idRunnerOptionElement","styleOutput","playerStoryOutputStyles","authorStoryOutputStyles","output","idRunnerOutputElement","tree","updateLog","ref","clearTimeout","undefined","variablesKeys","i","length","preorderProcess","visitFork","refreshInterpreterGui","setErrorMessage","lines","split","line","words","j","trim","startsWith","dispatchSetTempStoryRunnerOptions","currentStorySettings","currentRunnerSettings","discreteInlineLinks","hideRestartLink","test","substring","colorDark","colorLight","dispatchSetAuthorStoryRunnerStyles","background","authorStoryRunnerStyles","type","numberRegex","number","parseFloat","toString","font","refreshInterpreterGuiStyles","dispatchRerenderStory","restartOption","allOutput","id","idRunnerLog","idRunnerContent","idRunnerOptions","messageBarType","MessageBarType","error","textbox","autoComplete","name","idRunnerInputfield","onKeyPress","className","forkToLoad","includes","forkName","loadFork","matchBraces","replace","str","textboxText","processIf","processText","children","condition","isNaN","isFinite","global","setTimeout","query","escapeText","toLowerCase","queryWords","containsWord","RegExp","endsWith","cleanedText","matches","optIncludeUnknowns","resetTokens","varValue","addIdentifier","TokenId","varName","varVal","addFunction","TokenFunc","tokens","TokenBool","result","eval","join","e","Error","message","textLeft","endOfLine","indexOf","displayName","indexOfAt","lbPos","rbPos","fontStyle","addOutput","TokenNum","n0","nextNumber","exprTwoSidedIndex","lhs","slice","rhs","resultVal","getTokens","some","o","strForm","lhsBool","tok","runner","document","getElementById","idRunnerWrapper","playerStoryRunnerStyles","themeType","ThemeTypes","Light","bodyBackground","React","StoryInterpreter","connect","state","renderTrigger","viewEdit","storyRerenderToken","getStrings","settings","locale","dispatch","forwardRef","mt","Array","N","mti","Date","getTime","init_genrand","s","s2","y","mag01","MATRIX_A","kk","M","UPPER_MASK","LOWER_MASK","range","_nextInt32","associativity","placements","TokenOp","opPlacement","precedence","format","operation","placement","assoc","prec","numArgs","function","both","obj","TokenSym","optRequireRightPars","optUnknownDefault","Fsin","operands","Math","sin","Fcos","cos","Ftan","tan","Frnd","round","Frnd2","n1","Add","left","Sub","Mlt","Div","Mod","Neg","Exp","pow","Fac","givenVal","Eq","NotEq","Gt","Gte","Lt","Lte","LogNot","LogAnd","LogOr","varFalse","varTrue","varPi","PI","lPar","rPar","argSep","evalNoPar","subExpression","func","operators","filter","subExpressionStr","args","argVals","subResult","immediateResult","opTokens","maxPrecedence","isRightAssociative","opToken","splice","maxPrecedence2","token","sort","a","b","expression","evalTokens","tokenize","tokensList","tokId","functions","rbrPos","subExpressionEnd","lbrPos","lastIndexOf","subExpressionBegin","expressionLHS","expressionRHS","subExpressionFunc","tokFunc","find","f","equals","list","delimiter","lists","currentList","longestMatch","shortestMatch","candidateBeforeDefer","val","combinedTokens","unknownTokenName","newStory","getActionGuid","rerenderStory","saveAndRunStory","updateStory","story","uniqueActionType","WelcomeC","onClickLoadGame","invokeCommand","commandIds","openProjectOrGame","data","history","routes","play","onClickLoadProject","edit","onClickNew","newProject","buttonStyle","alignContent","justifyContent","DefaultButton","Welcome","withRouter","EditorViewC","runStory","currentStory","idEditorInputfield","setStory","prevProps","textArea","defaultValue","onBlur","PrimaryButton","EditorPlay","EditorView","dispatchSaveAndRunStory","dispatchSetStory","StoryParseNode","parent","doubleSlashRegex","ifRegex","endIfRegex","isOption","index","startOfLine","isOutput","beforeSubstring","bracketOpenPos","RunnerViewC","interpreterRef","setInterpreterRef","parse","interpreter","parsed","entryPositions","newlineSplitStory","setEntries","header","processHeaderOptions","entryName","entryList","entry","isFinished","match","exec","pos","depth","ifMatches","endIfMatches","ifs","endifs","allMatches","item1","item2","elemBegin","elemType","cond","prevIfBegin","prevIfCond","k","prevEndIfBegin","prevEndIfCond","prevElemBegin","prevElemCond","textNode","prevElemEnd","newChild","lastElemBegin","lastCondLength","setEntriesWithFork","parseStory","storyToParse","ex","RunnerView","storyReparseToken","RunnerEditorViewC","idEditorWrapper","RunnerEditorView","setLocale","setTheme","localeId","dispatchSetTheme","supportedTheme","body","dispatchSetLocale","combineReducers","getSupportedLocale","themes","Themes","DefaultLight","loadTheme","persistStateIdentifier","loadFromLocalStorage","loadedState","localStorage","getItem","returnedState","JSON","saveFormatVersion","LocalStorageSaveHandlerC","userConsentProvided","localizedName","newState","setItem","stringify","saveToLocalStorage","Component","LocalStorageSaveHandler","persistence","CommandBarDropdownC","stylesTyped","Dropdown","CommandBarDropdown","getLocaleDropdownOptionKey","getThemeDropdownOptionKey","themeName","MenuBarC","items","values","farItems","ariaLabel","TipTheme","onRender","themeKey","defaultSelectedKey","onRenderTitle","wholeTheme","ThemeDropdownText","onChange","_","buttonStyles","TipLanguage","localizedStrings","localeOption","LanguageCodeName","Icon","iconName","isOnPage","editorItems","MenuFileNew","iconProps","MenuFileOpen","saveProjectOrGame","MenuFileSave","switchMode","tooltipHostProps","MenuFileSwitch","iconOnly","getEditorCommandItems","runnerItems","getRunnerCommandItems","CommandBar","TipNavigateCommandBar","MenuBar","reduxState","getTheme","base","route","window","location","hash","isPlayMode","isEditMode","onLoadedCallback","RoutingC","applyLocalStorage","OpenFileHandler","CommandHandler","path","exact","component","Routing","hiddenInputRef","OpenFileHandlerC","handleFile","chosenFiles","target","files","fileReader","FileReader","onloadend","onabort","Blob","readAsText","reRenderStory","setCustomizationApplied","setUserConsentProvided","customizationApplied","isApplied","consentProvided","setPlayerStoryInputStyles","setPlayerStoryLogSeparatorStyles","setPlayerStoryOptionStyles","setPlayerStoryOptionHighlightStyles","setPlayerStoryOutputStyles","setPlayerStoryRunnerOptions","setPlayerStoryRunnerStyles","playerStoryLogSeparatorStyles","playerStoryRunnerOptions","rootReducer","store","createStore","applyMiddleware","thunk","commands","functionsToInvoke","guid","shortcuts","originalSequence","usesShift","Id","enableWhileTyping","activeElement","nodeName","getAttribute","CommandHandlerC","actionSwitchMode","afterLoadedCallback","current","click","invokeOpenCommand","callback","alert","actionNewProject","actionOpenProjectOrGame","actionSaveProjectOrGame","initializeIcons","commandKeys","commandsWithMatchProgress","shortcut","step","addEventListener","commandProgress","progress","disabled","sequence","customSequence","toUpperCase","Boolean","usesAlt","altKey","usesCtrl","ctrlKey","shiftKey","listenForShortcuts","ReactDOM","render","ContrastDark","ThemeContrastDark","themeId","Dark","createTheme","palette","themePrimary","themeLighterAlt","themeLighter","themeLight","themeTertiary","themeSecondary","themeDarkAlt","themeDark","themeDarker","neutralLighterAlt","neutralLighter","neutralLight","neutralQuaternaryAlt","neutralQuaternary","neutralTertiaryAlt","neutralTertiary","neutralSecondary","neutralPrimaryAlt","neutralPrimary","neutralDark","black","white","ContrastLight","ThemeContrastLight","DeepSea","ThemeDeepSea","DefaultDark","ThemeDefaultDark","ThemeDefaultLight","EarthAndSky","ThemeEarthAndSky","MidnightEarth","ThemeMidnightEarth","numberOfArgs","defaultLocale","navigator","languages","langParts","language","region","supportedLocales","playerStyle","storyStyle","authorStyle","fallback","fallbackStyle","errorText","fontFamily","fontWeight","textDecoration","blue","blueDark","fallbackStyles","whiteSpace","ApplicationName","ApplicationNameAndVersion","appName","appVersion","MenuFile","clearAllTempSettings","setCurrentRunnerOptions","currentRunnerOptions","setAuthorStoryInputStyles","setAuthorStoryLogSeparatorStyles","setAuthorStoryOptionStyles","setAuthorStoryOptionHighlightStyles","setAuthorStoryOutputStyles","setAuthorStoryRunnerOptions","setAuthorStoryRunnerStyles","setAuthorStoryStrings","authorStoryLogSeparatorStyles"],"mappings":"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","file":"static/js/main.7a651e10.chunk.js","sourcesContent":["import { IButtonStyles } from \"office-ui-fabric-react/lib/components/Button/Button.types\";\nimport { IStyle, ITheme, mergeStyles } from \"office-ui-fabric-react/lib/Styling\";\nimport { IDropdownStyles } from \"office-ui-fabric-react/lib/components/Dropdown/Dropdown.types\";\nimport { ICommandBarStyles } from \"office-ui-fabric-react/lib/components/CommandBar/CommandBar.types\";\nimport { IIconStyles } from \"office-ui-fabric-react/lib/components/Icon/Icon.types\";\n\n/**\n * Returns a style for a dropdown in the command bar. If there are items to the right, renders a\n * thin border between.\n */\nexport const commandBarDropdownButtonStyle = (): IButtonStyles => {\n  return { root: { alignSelf: \"stretch\" } };\n};\n\n/**\n * Returns a style for a command bar dropdown that renders a border to the right of the item.\n */\nexport const commandBarDropdownSeparatorStyle = (theme: ITheme): Partial<IDropdownStyles> => {\n  return {\n    root: {\n      borderColor: theme.semanticColors.menuDivider,\n      borderRightStyle: \"solid\",\n      borderWidth: \"1px\",\n    },\n  };\n};\n\n/** Returns a style for a dropdown in the command bar. */\nexport const commandBarDropdownStyle = (theme: ITheme, propStyles: IDropdownStyles): Partial<IDropdownStyles> => {\n  return {\n    caretDownWrapper: mergeStyles(\n      { alignSelf: \"center\", position: \"relative\", right: \"20px\", width: \"0px\" },\n      propStyles?.caretDownWrapper\n    ),\n    dropdown: mergeStyles(\n      {\n        display: \"flex\",\n        height: \"100%\",\n      },\n      propStyles?.dropdown\n    ),\n    dropdownItem: mergeStyles({ ...theme.fonts.large }, propStyles?.dropdownItem),\n    dropdownItemSelected: mergeStyles({ ...theme.fonts.large }, propStyles?.dropdownItemSelected),\n    root: mergeStyles({ alignSelf: \"stretch\" }, propStyles?.root),\n    title: mergeStyles(\n      {\n        height: \"100%\",\n        border: \"0\",\n        borderRadius: \"unset\",\n        display: \"flex\",\n        alignItems: \"center\",\n      },\n      propStyles?.title\n    ),\n  };\n};\n\n/**\n * Returns a style for a command bar item definition that increase button space. If there are\n * items to the right, renders a thin border between.\n */\nexport const commandBarItemStyle = (theme: ITheme, itemsOnRight?: boolean): string => {\n  if (itemsOnRight) {\n    return mergeStyles(theme.fonts.large, {\n      paddingLeft: \"12px\",\n      paddingRight: \"12px\",\n      borderColor: theme.semanticColors.menuDivider,\n      borderRightStyle: \"solid\",\n      borderWidth: \"1px\",\n    });\n  }\n\n  return mergeStyles(theme.fonts.large, {\n    paddingLeft: \"12px\",\n    paddingRight: \"12px\",\n  });\n};\n\n/**\n * Returns a style for a command bar that tries to maximize the size of the items within it, for a\n * simplified appearance that is more mobile-friendly than the default style. Items within the\n * command bar should be styled to fill the command bar vertically, and take enough space to be\n * easy to interact with.\n */\nexport const commandBarStyle: ICommandBarStyles = {\n  root: {\n    alignItems: \"center\",\n    height: \"4vh\",\n    padding: \"0px\",\n  },\n  primarySet: {\n    alignSelf: \"stretch\",\n  },\n  secondarySet: {\n    alignSelf: \"stretch\",\n  },\n};\n\n/** Returns a style for the editor text area component. */\nexport const editorTextAreaStyle = (theme: ITheme): React.CSSProperties => {\n  return {\n    backgroundColor: theme.semanticColors.bodyStandoutBackground,\n    borderStyle: \"solid\",\n    borderWidth: \"1px\",\n    boxSizing: \"border-box\",\n    color: theme.semanticColors.bodyText,\n    height: \"90vh\",\n    padding: \"0.25vh 0.25vw 0.25vh 0.25vw\",\n    resize: \"none\",\n    width: \"100%\",\n  };\n};\n\n/** Fonts to use in case other fonts are not available. */\nexport const fallbackFontStack = \"Calibri; Times New Roman; Courier New; sans-serif\";\n\n/** Display none. */\nexport const hiddenAndInaccessible = mergeStyles({\n  display: \"none\",\n});\n\n/** Separates an icon from text that follows it.  */\nexport const iconSpaceBeforeTextStyle: IIconStyles = {\n  root: {\n    marginRight: \"8px\",\n  },\n};\n\n/** Sets up the div containing the editor textarea. */\nexport const mainViewEditorStyle = mergeStyles({\n  boxSizing: \"border-box\",\n  height: \"90vh\",\n  margin: \"0 0.25vw 0 0\",\n  width: \"49.75vw\",\n});\n\n/** Styles the runner to give it a border and make overflowing generated content scroll. */\nexport const mainViewRunnerStyle = (theme: ITheme): IStyle => {\n  return {\n    borderColor: theme.semanticColors.menuDivider,\n    borderStyle: \"solid\",\n    borderWidth: \"1px\",\n    boxSizing: \"border-box\",\n    height: \"90vh\",\n    margin: \"0 0 0 0.25vw\",\n    width: \"49.75vw\",\n  };\n};\n\n/** Sets up the div containing the editor and runner so they stretch horizontally to full size. */\nexport const mainViewWrapperStyle = mergeStyles({ display: \"flex\", alignItems: \"stretch\", margin: \"4px\" });\n\n/** Styles the innermost div that contains all generated content in the runner. */\nexport const runnerOutputWrapperStyle = mergeStyles({\n  flexGrow: 1,\n  overflowY: \"auto\",\n  paddingLeft: \"0.5vw\",\n  paddingRight: \"0.5vw\",\n  paddingTop: \"0.5vw\",\n});\n\n/** Styles the div containing all controls associated to the runner so they display properly. */\nexport const runnerWrapperStyle = mergeStyles({ display: \"flex\", flexDirection: \"column\", height: \"90vh\" });\n\n/** Styles a main button on the welcome page. */\nexport const welcomeButtonStyle = (theme: ITheme): IButtonStyles => {\n  return {\n    root: [\n      theme.fonts.large,\n      {\n        margin: \"2rem\",\n        padding: \"2rem\",\n      },\n    ],\n  };\n};\n","import * as React from \"react\";\nimport { StoryParseNode } from \"./storyParseNode\";\nimport { IPageDictionary } from \"./storyParser\";\nimport {\n  idRunnerContent,\n  idRunnerInputfield,\n  idRunnerLog,\n  idRunnerOptions,\n  idRunnerOptionRestart,\n  idRunnerWrapper,\n  idRunnerInputElement,\n  idRunnerOutputElement,\n  idRunnerOptionElement,\n} from \"../common/identifiers\";\nimport { IRootState } from \"../store\";\nimport { connect } from \"react-redux\";\nimport { dispatchRerenderStory } from \"../common/redux/viewedit.reducers\";\nimport { Dispatch } from \"redux\";\nimport { runnerWrapperStyle, runnerOutputWrapperStyle, fallbackFontStack } from \"../common/styles/controlStyles\";\nimport { ThemeTypes } from \"../common/themes\";\nimport { ActionButton } from \"office-ui-fabric-react/lib/components/Button/ActionButton/ActionButton\";\nimport { MessageBarType } from \"office-ui-fabric-react/lib/components/MessageBar/MessageBar.types\";\nimport { MessageBar } from \"office-ui-fabric-react/lib/components/MessageBar/MessageBar\";\nimport { numberRegex } from \"../parse-expressions/utils\";\nimport { Parser } from \"../parse-expressions/Parser\";\nimport { TokenBool } from \"../parse-expressions/TokenBool\";\nimport { TokenFunc } from \"../parse-expressions/TokenFunc\";\nimport { TokenId } from \"../parse-expressions/TokenId\";\nimport { TokenNum } from \"../parse-expressions/TokenNum\";\nimport { ITextStyle } from \"../common/redux/typedefs\";\nimport { dispatchSetTempStoryRunnerOptions } from \"../common/redux/currentRunnerSettings.reducers\";\nimport { dispatchSetAuthorStoryRunnerStyles } from \"../common/redux/authorStorySettings.reducers\";\nimport { Random } from \"../common/random\";\nimport { fallbackElementType, getTextStyle } from \"../common/styles/interpreterStyles\";\nimport { TextField } from \"office-ui-fabric-react/lib/components/TextField/TextField\";\nimport { getStrings } from \"../common/localization/Localization\";\n\n// TODO: localize strings in this file.\n\nlet uniqueKeyCounter = Number.MIN_SAFE_INTEGER;\n\nconst whitespaceRegex = /\\s+/gm;\nconst colorRegex = /^[0-9|a-f]+$/g;\nconst singleDigitRegex = /[0-9]/g;\nconst escapeBraceRegex = /\\\\at|\\\\lb|\\\\rb|\\\\n|\\\\s/g;\nconst escapeNoBraceRegex = /\\\\at|\\\\n|\\\\s/g;\n\n/** An expression parser used by the interpreter to resolve expressions for variable assignments. */\nconst exprParser = new Parser();\nlet random: Random | undefined;\n\n/** A dictionary of all variables in the current game. */\ninterface IVariables {\n  [key: string]: number | boolean | string;\n}\n\n/**\n * Returns an element that reads from the current state so it updates with theme changes. In being function-based, it's\n * only recomputed when the element is evaluated.\n */\ntype InterpreterNode = (props: CombinedProps) => JSX.Element;\n\nconst mapStateToProps = (state: IRootState) => {\n  return {\n    authorStorySettings: state.authorStorySettings,\n    currentStorySettings: state.currentRunnerSettings,\n    playerStorySettings: state.playerStorySettings,\n    renderTrigger: state.viewEdit.storyRerenderToken, // Needed to re-render after output/input/options change.\n    strings: getStrings(state.settings.locale),\n    theme: state.settings.theme,\n  };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch) => {\n  return {\n    dispatchRerenderStory: dispatchRerenderStory(dispatch),\n    dispatchSetAuthorStoryRunnerStyles: dispatchSetAuthorStoryRunnerStyles(dispatch),\n    dispatchSetTempStoryRunnerOptions: dispatchSetTempStoryRunnerOptions(dispatch),\n  };\n};\n\ntype StoryInterpreterOwnProps = {\n  debugging?: boolean;\n};\n\ntype CombinedProps = StoryInterpreterOwnProps &\n  ReturnType<typeof mapStateToProps> &\n  ReturnType<typeof mapDispatchToProps>;\n\nexport class StoryInterpreterC extends React.Component<StoryInterpreterOwnProps> {\n  /** Tracks actions so they can be removed when navigating other forks/files. */\n  private actions: ((text: string) => void)[] = [];\n\n  /** The content of the current page. */\n  private content: InterpreterNode[] = [];\n\n  /** The content of the current page after evaluating each item with current theme values. */\n  private contentCached: JSX.Element[] = [];\n\n  /** Story styling of options that are created. Styling precedence is player > story > author. */\n  private currentOptionStyles: ITextStyle = {};\n\n  /** Story styling of options when they are highlighted. Styling precedence is player > story > author. */\n  private currentOptionHighlightStyles: ITextStyle = {};\n\n  /** Story styling of output that gets created. Styling precedence is player > story > author. */\n  private currentOutputStyles: ITextStyle = {};\n\n  /** Stores all tree entries. */\n  private entries: IPageDictionary = {};\n\n  /** An optional error message that displays in a top banner when non-empty. */\n  private errorMessage = \"\";\n\n  /** Stores the current page by name. */\n  private fork = \"\";\n\n  /** Keeps a list of all previous content, if not disabled. */\n  private log: InterpreterNode[] = [];\n\n  /** Keeps a list of all previous content after evaluating each item with current theme values, if not disabled. */\n  private logCached: JSX.Element[] = [];\n\n  /** Hyperlink options to the next page. */\n  private options: InterpreterNode[] = [];\n\n  /** Hyperlink options to the next page, evaluated with current theme values. */\n  private optionsCached: JSX.Element[] = [];\n\n  /** Used to stop evaluation of the current fork entirely. */\n  private stopEvaluation = false;\n\n  /** Whether to display a textbox or not. It's displayed automatically when the user can enter text. */\n  private textboxHidden = true;\n\n  /** Tracked so they can be stopped when navigating other forks/files. */\n  private timers: NodeJS.Timeout[] = [];\n\n  /** Defines a place for generated variables to be stored and accessed. */\n  private variables: IVariables = {};\n\n  /** Stores a copy of all variables as they were just before visiting a new page. This is used when saving. */\n  private variablesPrev: IVariables = {};\n\n  /** The restart link for when a page is empty or the link is forcibly shown. */\n  private getRestartLink = () => {\n    const combinedProps = this.props as CombinedProps;\n\n    return this.addOption(\n      combinedProps.authorStorySettings.authorStoryStrings.restartLinkText || combinedProps.strings.RunnerRestart,\n      this.restartGame,\n      idRunnerOptionRestart\n    );\n  };\n\n  constructor(props: StoryInterpreterOwnProps) {\n    super(props);\n    this.refreshInterpreter();\n  }\n\n  public shouldComponentUpdate(nextProps: Readonly<StoryInterpreterOwnProps>) {\n    const newProps = nextProps as CombinedProps;\n\n    // Update random if necessary.\n    if (!random || newProps.authorStorySettings.authorStoryRunnerOptions.randomSeed !== random.seed) {\n      random = new Random(newProps.authorStorySettings.authorStoryRunnerOptions.randomSeed);\n    }\n\n    // Recompute cached versions of all components.\n    this.contentCached = this.content.map((node: InterpreterNode) => node(newProps));\n    this.logCached = this.log.map((node: InterpreterNode) => node(newProps));\n    this.optionsCached = this.options.map((node: InterpreterNode) => node(newProps));\n\n    return true;\n  }\n\n  /**\n   * Creates and returns a text element styled to represent the player's input. It's prefixed according to whether it\n   * was created from a hyperlink or by typing.\n   */\n  public addInput(text: string, fromOption?: true) {\n    return (props: CombinedProps) => {\n      const prefix = fromOption\n        ? props.authorStorySettings.authorStoryStrings.inputOptionPrefixText || \"• \"\n        : props.authorStorySettings.authorStoryStrings.inputTextboxPrefixText || \"→ \";\n\n      return (\n        <p\n          key={`${idRunnerInputElement}-${uniqueKeyCounter++}`}\n          style={getTextStyle(\n            props.theme,\n            !props.debugging ? props.playerStorySettings.playerStoryInputStyles : {},\n            {}, // can't pass styles\n            props.authorStorySettings.authorStoryInputStyles,\n            fallbackElementType.input\n          )}\n        >\n          {prefix + text}\n        </p>\n      );\n    };\n  }\n\n  /**\n   * Creates and returns a hyperlink styled as an option. For forkNameOrAction, if a string is provided, it indicates\n   * the fork to go to. Passing a function can execute custom code instead.\n   */\n  public addOption(text: string, forkNameOrAction: string | (() => void), key?: string, inline?: true) {\n    const style = Object.assign({}, this.currentOptionStyles);\n\n    const combinedProps = this.props as CombinedProps;\n    const linkAction =\n      typeof forkNameOrAction === \"function\"\n        ? forkNameOrAction\n        : () => {\n            // When clicking the option, push player input to content if at least one item is logged.\n            if (\n              !combinedProps.authorStorySettings.authorStoryRunnerOptions.hideLog &&\n              (!combinedProps.authorStorySettings.authorStoryRunnerOptions.logLimit ||\n                combinedProps.authorStorySettings.authorStoryRunnerOptions.logLimit > 0)\n            ) {\n              this.content.push(this.addInput(text, true));\n            }\n\n            // Go to the fork (moves old content to logs as a side effect).\n            this.setFork(forkNameOrAction);\n          };\n\n    return (props: CombinedProps) => {\n      const styleOptions = getTextStyle(\n        props.theme,\n        !props.debugging ? props.playerStorySettings.playerStoryOptionStyles : {},\n        style,\n        props.authorStorySettings.authorStoryOptionStyles,\n        fallbackElementType.option\n      );\n\n      const styleOptionsHighlight = getTextStyle(\n        props.theme,\n        !props.debugging ? props.playerStorySettings.playerStoryOptionHighlightStyles : {},\n        style,\n        props.authorStorySettings.authorStoryOptionHighlightStyles,\n        fallbackElementType.optionHighlight\n      );\n\n      return (\n        <ActionButton\n          key={key || `${idRunnerOptionElement}-${uniqueKeyCounter++}`}\n          onClick={linkAction}\n          styles={{\n            root: {\n              ...(styleOptions as object),\n              border: \"none\",\n              display: inline ? \"inline\" : \"block\",\n              fontSize: \"16px\",\n              height: \"unset\",\n              marginBottom: inline ? \"0px\" : \"4px\",\n              marginTop: inline ? \"0px\" : \"4px\",\n              paddingLeft: \"0px\",\n              marginLeft: \"0px\",\n            },\n            rootFocused: { ...(styleOptionsHighlight as object) },\n            rootHovered: { ...(styleOptionsHighlight as object) },\n            label: {\n              marginLeft: \"0px\",\n            },\n          }}\n          text={text}\n        />\n      );\n    };\n  }\n\n  /** Creates and returns a text element styled as output text. */\n  public addOutput(text: string) {\n    const style = Object.assign({}, this.currentOutputStyles);\n\n    return (props: CombinedProps) => {\n      const styleOutput = getTextStyle(\n        props.theme,\n        !props.debugging ? props.playerStorySettings.playerStoryOutputStyles : {},\n        style,\n        props.authorStorySettings.authorStoryOutputStyles,\n        fallbackElementType.output\n      );\n\n      return (\n        <span key={`${idRunnerOutputElement}-${uniqueKeyCounter++}`} style={styleOutput}>\n          {text}\n        </span>\n      );\n    };\n  }\n\n  /** Loads the current progress from local storage if possible. */\n  public loadFile() {\n    // TODO: implement.\n  }\n\n  /** Loads an entry and pushes changes to the page, catching and displaying errors on the screen. */\n  public loadFork() {\n    this.updateLog();\n    this.content = [];\n    this.options = [];\n    this.textboxHidden = true;\n\n    // Clears all timers.\n    this.timers.forEach((ref: NodeJS.Timeout) => {\n      clearTimeout(ref);\n    });\n\n    this.timers = [];\n    this.actions = [];\n\n    // Sets up variables.\n    let tree: StoryParseNode | undefined;\n\n    // Gets the nodes to process, if possible.\n    tree = this.entries[this.fork];\n    if (tree === undefined) {\n      this.setErrorMessage(\"Interpreter: fork '\" + this.fork + \"' not found.\");\n      return;\n    }\n\n    // Records the previous state of all variables.\n    this.variablesPrev = {};\n    const variablesKeys = Object.keys(this.variables);\n\n    for (let i = 0; i < variablesKeys.length; i++) {\n      this.variablesPrev[variablesKeys[i]] = this.variables[variablesKeys[i]];\n    }\n\n    // Evaluates every node.\n    this.preorderProcess(tree, \"\");\n\n    // Exits if fork execution stops.\n    if (this.stopEvaluation) {\n      return;\n    }\n\n    // Ensures the fork is considered visited.\n    this.visitFork();\n    this.refreshInterpreterGui();\n  }\n\n  /** Parses a special set of options at the top of the file. */\n  public processHeaderOptions(text: string) {\n    const combinedProps = this.props as CombinedProps;\n\n    // Clears all old preferences.\n    this.refreshInterpreter();\n\n    let lines = text.split(\"\\n\");\n\n    for (let i = 0; i < lines.length; i++) {\n      // Gets the line and words on that line.\n      let line = lines[i];\n      let words = line.split(\" \");\n\n      // Gets all text after the option has been named.\n      let input = \"\";\n\n      for (let j = 1; j < words.length; j++) {\n        input += words[j] + \" \";\n      }\n\n      input = input.trim();\n\n      if (line.startsWith(\"link-style-text\")) {\n        combinedProps.dispatchSetTempStoryRunnerOptions({\n          ...combinedProps.currentStorySettings.currentRunnerSettings,\n          discreteInlineLinks: true,\n        });\n      } else if (line.startsWith(\"option-default-disable\")) {\n        combinedProps.dispatchSetTempStoryRunnerOptions({\n          ...combinedProps.currentStorySettings.currentRunnerSettings,\n          hideRestartLink: true,\n        });\n      } else if (\n        line.startsWith(\"option-color\") ||\n        line.startsWith(\"option-hover-color\") ||\n        line.startsWith(\"background-color\")\n      ) {\n        // Stores the color to be created.\n        let color = \"\";\n        if (!colorRegex.test(input)) {\n          this.setErrorMessage(\n            \"Interpreter: In the line '\" +\n              line +\n              \"', color must be given in hex format. It can only include numbers 1-9 and upper or lowercase a-f.\"\n          );\n        } else if (input.length !== 6 && input.length !== 3) {\n          this.setErrorMessage(\n            \"Interpreter: In the line '\" +\n              line +\n              \"', color must be given in hex format using 3 or 6 digits. For example, f00 or 8800f0.\"\n          );\n        } else if (input.length === 3 || input.length === 6) {\n          color = input.substring(0, input.length);\n        }\n\n        if (line.startsWith(\"option-color\")) {\n          this.currentOptionStyles.colorDark = color;\n          this.currentOptionStyles.colorLight = color;\n        } else if (line.startsWith(\"option-color-light\")) {\n          this.currentOptionStyles.colorLight = color;\n        } else if (line.startsWith(\"option-color-dark\")) {\n          this.currentOptionStyles.colorDark = color;\n        } else if (line.startsWith(\"option-hover-color\")) {\n          this.currentOptionHighlightStyles.colorDark = color;\n          this.currentOptionHighlightStyles.colorLight = color;\n        } else if (line.startsWith(\"option-hover-color-light\")) {\n          this.currentOptionHighlightStyles.colorLight = color;\n        } else if (line.startsWith(\"option-hover-color-dark\")) {\n          this.currentOptionHighlightStyles.colorDark = color;\n        } else if (line.startsWith(\"background-color\")) {\n          combinedProps.dispatchSetAuthorStoryRunnerStyles({\n            background: {\n              ...combinedProps.authorStorySettings.authorStoryRunnerStyles,\n              colorDark: color,\n              colorLight: color,\n              type: \"plain\",\n            },\n          });\n        } else if (line.startsWith(\"background-color-light\")) {\n          combinedProps.dispatchSetAuthorStoryRunnerStyles({\n            background: {\n              ...combinedProps.authorStorySettings.authorStoryRunnerStyles,\n              colorLight: color,\n              type: \"plain\",\n            },\n          });\n        } else if (line.startsWith(\"background-color-dark\")) {\n          combinedProps.dispatchSetAuthorStoryRunnerStyles({\n            background: {\n              ...combinedProps.authorStorySettings.authorStoryRunnerStyles,\n              colorDark: color,\n              type: \"plain\",\n            },\n          });\n        }\n      } else if (line.startsWith(\"output-font-size\") || line.startsWith(\"option-font-size\")) {\n        if (!numberRegex.test(input)) {\n          this.setErrorMessage(\"Interpreter: In line '\" + line + \"', a number must be specified after the option.\");\n          continue;\n        }\n\n        let number = parseFloat(input);\n\n        if (number <= 0) {\n          this.setErrorMessage(\"Interpreter: In line '\" + line + \"', numbers must be greater than zero.\");\n          continue;\n        }\n\n        if (line.startsWith(\"output-font-size\")) {\n          this.currentOutputStyles.fontSize = number.toString();\n        } else if (line.startsWith(\"option-font-size\")) {\n          this.currentOptionStyles.fontSize = number.toString();\n        }\n      } else if (line.startsWith(\"option-font\")) {\n        this.currentOptionStyles.font = `${input}; ${fallbackFontStack}`;\n      } else if (line.startsWith(\"output-font\")) {\n        this.currentOutputStyles.font = `${input}; ${fallbackFontStack}`;\n      }\n    }\n  }\n\n  /** Re-renders the interpreter and applies the chosen background color. */\n  public refreshInterpreterGui() {\n    this.refreshInterpreterGuiStyles();\n    (this.props as CombinedProps).dispatchRerenderStory();\n  }\n\n  /** Renders output. Conditionally renders logs, error message, and textbox. */\n  public render(): React.ReactNode {\n    this.refreshInterpreterGuiStyles();\n\n    const combinedProps = this.props as CombinedProps;\n\n    const restartOption =\n      this.options.length === 0 && !combinedProps.authorStorySettings.authorStoryRunnerOptions.hideRestartLink\n        ? [this.getRestartLink() as InterpreterNode]\n        : [];\n\n    const allOutput = [\n      <div key={idRunnerLog} id={idRunnerLog}>\n        {this.logCached}\n      </div>,\n      <div key={idRunnerContent} id={idRunnerContent}>\n        {this.contentCached}\n      </div>,\n      <div key={idRunnerOptions} id={idRunnerOptions} style={{ marginTop: \"24px\" }}>\n        {this.optionsCached}\n        {restartOption}\n      </div>,\n    ];\n\n    const errorMessage =\n      this.props.debugging && this.errorMessage !== \"\" ? (\n        <MessageBar messageBarType={MessageBarType.error}>{this.errorMessage}</MessageBar>\n      ) : undefined;\n\n    const textbox = !this.textboxHidden ? (\n      <TextField\n        autoComplete=\"nah\" // Required for browsers to not autocomplete with address.\n        name=\"textfield\" // Required for browsers to not autocomplete with prior entries.\n        id={idRunnerInputfield}\n        key={idRunnerInputfield}\n        onKeyPress={this.onTextboxKeyPress}\n        type=\"text\"\n      />\n    ) : undefined;\n\n    return (\n      <div className={runnerWrapperStyle}>\n        <div className={runnerOutputWrapperStyle}>{allOutput}</div>\n        {errorMessage}\n        {textbox}\n      </div>\n    );\n  }\n\n  /** Saves the current progress to local storage if possible. */\n  public saveFile() {\n    // TODO: implement.\n  }\n\n  /** For internal use. Sets the entries usually given by the parser. */\n  public setEntries(entries: IPageDictionary) {\n    this.entries = entries;\n  }\n\n  /** For internal use. Sets the entries usually given by the parser. If forkToLoad is an empty string, loads the first fork. */\n  public setEntriesWithFork(entries: IPageDictionary, forkToLoad: string) {\n    this.content = [];\n    this.log = [];\n    this.options = [];\n    this.entries = entries;\n    this.errorMessage = \"\";\n\n    const entriesKeys = Object.keys(this.entries);\n\n    if (entriesKeys.length === 0) {\n      this.setErrorMessage(\n        \"Interpreter: cannot play story. It contains no forks. Use @ at the beginning of a line to denote an fork.\"\n      );\n    } else {\n      if (forkToLoad !== \"\" && entriesKeys.includes(forkToLoad)) {\n        this.setFork(forkToLoad);\n      } else {\n        this.setFork(entriesKeys[0]);\n      }\n    }\n  }\n\n  /** Sets or clears an error message. */\n  public setErrorMessage(error: string | undefined) {\n    this.errorMessage = error ?? \"\";\n    this.refreshInterpreterGui();\n  }\n\n  /** For internal use. Sets the fork usually given by parsed entries. */\n  public setFork(forkName: string) {\n    this.fork = forkName;\n    this.stopEvaluation = false;\n\n    this.loadFork();\n  }\n\n  /** Escapes the given text for all supported escape sequences. */\n  private escapeText(text: string, matchBraces: boolean) {\n    if (matchBraces) {\n      return text.replace(escapeBraceRegex, (str: string) => {\n        switch (str) {\n          case \"\\\\at\":\n            return \"@\";\n          case \"\\\\n\":\n            return \"\\n\";\n          case \"\\\\s\":\n            return \"\\\\\";\n          case \"\\\\lb\":\n            return \"{\";\n          case \"\\\\rb\":\n            return \"}\";\n        }\n\n        return str;\n      });\n    }\n\n    return text.replace(escapeNoBraceRegex, (str: string) => {\n      switch (str) {\n        case \"\\\\at\":\n          return \"@\";\n        case \"\\\\n\":\n          return \"\\n\";\n        case \"\\\\s\":\n          return \"\\\\\";\n      }\n\n      return str;\n    });\n  }\n\n  /** Handles submission of text in the textbox. */\n  private onTextboxKeyPress = (ev: React.KeyboardEvent<HTMLInputElement>) => {\n    if (ev.charCode === 13) {\n      this.actions.forEach((action) => {\n        action(ev.currentTarget.value);\n      });\n\n      ev.currentTarget.value = \"\";\n    }\n  };\n\n  /**\n   * Crawls the given node structure in a depth-first search. If text is provided, it's used\n   * solely to evaluate 'if text is' and 'if text has' syntax. Otherwise, those nodes are set to be\n   * parsed the next time input is submitted through the textbox.\n   */\n  private preorderProcess(node: StoryParseNode, textboxText: string) {\n    // If the node's conditions are met, processes it and children.\n    if (this.processIf(node, textboxText)) {\n      this.processText(node);\n\n      for (let i = 0; i < node.children.length; i++) {\n        if (this.stopEvaluation) {\n          return;\n        }\n\n        this.preorderProcess(node.children[i], textboxText);\n      }\n    }\n  }\n\n  /**\n   * Interprets the contents of a node is its condition is met. If text is provided, it's used\n   * solely to evaluate 'if text is' and 'if text has' syntax. Otherwise, those nodes are set to be\n   * parsed the next time input is submitted through the textbox.\n   */\n  private processIf(node: StoryParseNode, textboxText: string): boolean {\n    const combinedProps = this.props as CombinedProps;\n\n    // If there are no conditions, consider it met.\n    if (node.condition.trim() === \"\") {\n      return true;\n    }\n\n    // Gets the condition without the word 'if'.\n    const condition = node.condition.substring(2).trim();\n    const words = condition.split(\" \");\n\n    // There should be at least one word after 'if'.\n    if (words.length === 0) {\n      this.setErrorMessage(\"The line if '\" + condition + \"' is incorrectly formatted.\");\n      return false; // Skips ifs with invalid syntax.\n    }\n\n    //#region Timers. Syntax: if timer is num\n    if (words.length > 1 && words[0] === \"timer\" && words[1] === \"is\") {\n      if (words.length < 2) {\n        this.setErrorMessage(\"The timer must be set with a time specified in seconds.\");\n        return false;\n      }\n\n      // The third word must be a number.\n      if (!numberRegex.test(words[2])) {\n        this.setErrorMessage(\"Interpreter: In line '\" + condition + \"', the third word must be numeric.\");\n        return false;\n      }\n\n      const number = parseFloat(words[2]);\n\n      if (isNaN(number) || !isFinite(number)) {\n        this.setErrorMessage(\"Interpreter: In line '\" + condition + \"', the time must be numeric and not too large.\");\n        return false;\n      }\n\n      // The number must be positive.\n      if (number <= 0) {\n        this.setErrorMessage(\"Interpreter: In line '\" + condition + \"', the time must be positive and non-zero.\");\n        return false;\n      }\n\n      // Creates a timer to delay the evaluation of everything in the current if-statement.\n      const ref = global.setTimeout(() => {\n        this.processText(node);\n\n        for (let i = 0; i < node.children.length; i++) {\n          this.preorderProcess(node.children[i], textboxText);\n        }\n      }, number * 1000);\n\n      this.timers.push(ref);\n\n      return false; // Delays execution of child nodes.\n    }\n    //#endregion\n\n    //#region Textbox. Syntax: if text (!)is/has/pick query\n    // Handles syntax: if text is query, if text has query, if text !is query, if text !has query, if text pick query\n    else if (\n      words.length > 1 &&\n      words[0] === \"text\" &&\n      (words[1] === \"is\" || words[1] === \"!is\" || words[1] === \"has\" || words[1] === \"!has\" || words[1] === \"pick\")\n    ) {\n      // Automatically shows the textbox.\n      this.textboxHidden = false;\n\n      let query = \"\"; // Contains all additional words.\n\n      // Concatenates all words after the command syntax.\n      for (let i = 2; i < words.length; i++) {\n        query += words[i] + \" \";\n      }\n\n      query = this.escapeText(query.toLowerCase().trim(), true);\n\n      if (query === \"\") {\n        this.setErrorMessage(\n          \"Interpreter: In the line 'if \" +\n            condition +\n            \"', at least one word to look for must be specified after 'pick'.\"\n        );\n      }\n\n      // The generated option adds to the submission event based on whether it's checking if the\n      // textbox input is/has the query.\n      if (words[1] === \"pick\") {\n        // Splits the query on commas if checking for containing.\n        const queryWords = query.split(\",\");\n\n        // Escapes commas as \\c\n        for (let i = 0; i < queryWords.length; i++) {\n          queryWords[i] = queryWords[i].replace(\"\\\\c\", \",\").trim();\n        }\n\n        if (textboxText === \"\") {\n          this.actions.push((text: string) => {\n            let containsWord = false;\n\n            // Ensures the text contains at least one word.\n            for (let i = 0; i < queryWords.length; i++) {\n              const matchWordRegex = new RegExp(\"\\\\b\" + queryWords[i] + \"\\\\b\");\n              if (matchWordRegex.test(text.toLowerCase().trim())) {\n                containsWord = true;\n              }\n            }\n\n            if (!containsWord) {\n              return;\n            }\n\n            // If still executing, conditions are met.\n            if (\n              !combinedProps.authorStorySettings.authorStoryRunnerOptions.hideLog &&\n              (!combinedProps.authorStorySettings.authorStoryRunnerOptions.logLimit ||\n                combinedProps.authorStorySettings.authorStoryRunnerOptions.logLimit > 0)\n            ) {\n              this.content.push(this.addInput(text));\n            }\n\n            this.processText(node);\n\n            for (let i = 0; i < node.children.length; i++) {\n              this.preorderProcess(node.children[i], text);\n            }\n\n            this.refreshInterpreterGui();\n          });\n        } else {\n          let containsWord = false;\n\n          // Ensures the text contains at least one word.\n          for (let i = 0; i < queryWords.length; i++) {\n            const matchWordRegex = new RegExp(\"\\\\b\" + queryWords[i] + \"\\\\b\");\n\n            if (matchWordRegex.test(textboxText.toLowerCase().trim())) {\n              containsWord = true;\n            }\n          }\n\n          if (!containsWord) {\n            return false;\n          }\n\n          // If still executing, conditions are met.\n          this.processText(node);\n\n          for (let i = 0; i < node.children.length; i++) {\n            this.preorderProcess(node.children[i], textboxText);\n          }\n        }\n      } else if (words[1].endsWith(\"is\")) {\n        if (textboxText === \"\") {\n          this.actions.push((text: string) => {\n            const cleanedText = text.toLowerCase().trim();\n\n            if ((words[1] === \"is\" && cleanedText === query) || (words[1] === \"!is\" && cleanedText !== query)) {\n              if (\n                !combinedProps.authorStorySettings.authorStoryRunnerOptions.hideLog &&\n                (!combinedProps.authorStorySettings.authorStoryRunnerOptions.logLimit ||\n                  combinedProps.authorStorySettings.authorStoryRunnerOptions.logLimit > 0)\n              ) {\n                this.content.push(this.addInput(text));\n              }\n\n              this.processText(node);\n\n              for (let i = 0; i < node.children.length; i++) {\n                this.preorderProcess(node.children[i], text);\n              }\n            }\n\n            this.refreshInterpreterGui();\n          });\n        } else {\n          if ((words[1] === \"is\" && textboxText === query) || (words[1] === \"!is\" && textboxText !== query)) {\n            this.processText(node);\n\n            for (let i = 0; i < node.children.length; i++) {\n              this.preorderProcess(node.children[i], textboxText);\n            }\n          }\n        }\n      } else if (words[1].endsWith(\"has\")) {\n        // Splits the query on commas if checking for containing.\n        const queryWords = query.split(\",\");\n\n        // Escapes commas as \\c.\n        for (let i = 0; i < queryWords.length; i++) {\n          queryWords[i] = queryWords[i].replace(\"\\\\c\", \",\").trim();\n        }\n\n        if (textboxText === \"\") {\n          this.actions.push((text: string) => {\n            // Ensures the text contains each word.\n            for (let i = 0; i < queryWords.length; i++) {\n              const matchWordRegex = new RegExp(\"\\\\b\" + queryWords[i] + \"\\\\b\");\n              const matches = matchWordRegex.test(text.toLowerCase().trim());\n\n              if ((words[1] === \"has\" && !matches) || (words[1] === \"!has\" && matches)) {\n                return;\n              }\n            }\n\n            // If still executing, conditions are met.\n            if (\n              !combinedProps.authorStorySettings.authorStoryRunnerOptions.hideLog &&\n              (!combinedProps.authorStorySettings.authorStoryRunnerOptions.logLimit ||\n                combinedProps.authorStorySettings.authorStoryRunnerOptions.logLimit > 0)\n            ) {\n              this.content.push(this.addInput(text));\n            }\n\n            this.processText(node);\n\n            for (let i = 0; i < node.children.length; i++) {\n              this.preorderProcess(node.children[i], text);\n            }\n\n            this.refreshInterpreterGui();\n          });\n        } else {\n          // Ensures the text contains each word.\n          for (let i = 0; i < queryWords.length; i++) {\n            const matchWordRegex = new RegExp(\"\\\\b\" + queryWords[i] + \"\\\\b\");\n            const matches = matchWordRegex.test(textboxText);\n\n            if ((words[1] === \"has\" && !matches) || (words[1] === \"!has\" && matches)) {\n              return false;\n            }\n          }\n\n          // If still executing, conditions are met.\n          this.processText(node);\n\n          for (let i = 0; i < node.children.length; i++) {\n            this.preorderProcess(node.children[i], textboxText);\n          }\n        }\n      }\n\n      return false; // Execution of child nodes is conditional.\n    }\n    //#endregion\n\n    //#region Truth tests. Syntax: if expr; expr must be true or false.\n    else {\n      // Unregisters previously-set variables and confirms options.\n      exprParser.optIncludeUnknowns = true;\n      exprParser.resetTokens();\n\n      const variablesKeys = Object.keys(this.variables);\n\n      // Supports syntax: if visited, if !visited\n      const varValue = this.variables[\"visited\" + this.fork] as number;\n      exprParser.addIdentifier(new TokenId(\"visited\", varValue));\n\n      // Registers all valid variables with the math parser.\n      for (let i = 0; i < variablesKeys.length; i++) {\n        const varName = variablesKeys[i];\n        const varVal = this.variables[variablesKeys[i]];\n\n        exprParser.addIdentifier(new TokenId(varName, varVal));\n      }\n\n      // Registers a function to check if a variable exists.\n      exprParser.addFunction(\n        new TokenFunc(\"exists\", 1, (tokens) => {\n          if (tokens[0] instanceof TokenBool) {\n            return tokens[0];\n          }\n\n          return new TokenBool(!(tokens[0] instanceof TokenId));\n        })\n      );\n\n      let result = \"\";\n      let resultVal = null;\n\n      // Attempts to compute the expression.\n      try {\n        result = exprParser.eval(words.join(\" \"));\n      } catch (e) {\n        if (e instanceof Error) {\n          this.setErrorMessage(e.message);\n        } else {\n          this.setErrorMessage(e);\n        }\n\n        return false;\n      }\n\n      // Parses the computed result as a bool.\n      if (result === \"true\" || result === \"false\") {\n        return result === \"true\";\n      } else {\n        this.setErrorMessage(\n          \"Interpreter: In the line 'if \" +\n            words.join(\" \") +\n            \"', the expression must be boolean (true or false), but was \" +\n            resultVal +\n            \" instead.\"\n        );\n\n        return false;\n      }\n    }\n  }\n\n  /** Interprets the node text to display output and evaluate commands. */\n  private processText(node: StoryParseNode) {\n    let textLeft = node.text;\n\n    // Processes all text until none is left.\n    while (textLeft.length > 0) {\n      // Gets the current line and its words.\n      let endOfLine = textLeft.indexOf(\"\\n\");\n      let line: string;\n\n      if (endOfLine >= 0) {\n        line = textLeft.substring(0, endOfLine);\n      } else {\n        line = textLeft;\n      }\n\n      let words = line.split(\" \");\n\n      //#region Handles empty lines if they appear.\n      // Removes excess lines.\n      if (line.trim() === \"\") {\n        // Deletes pointless whitespace.\n        textLeft = textLeft.substring(endOfLine + 1);\n      }\n      //#endregion\n\n      //#region Parse in-line options. Syntax: output@@forkname.\n      else if (line.includes(\"@@\")) {\n        let forkName = line\n          .substring(line.indexOf(\"@\") + 2)\n          .replace(whitespaceRegex, \"\")\n          .toLowerCase();\n\n        let displayName = this.escapeText(line.substring(0, line.indexOf(\"@\")).trim(), false);\n\n        // Handles having no hyperlink or display name.\n        if (forkName === \"\") {\n          this.setErrorMessage(\"Interpreter: there was no fork name given to option '\" + displayName + \"'.\");\n        } else if (displayName.trim() === \"\") {\n          this.setErrorMessage(\n            \"Interpreter: the option linking to '\" + forkName + \"' has no displayable text specified.\"\n          );\n        } else if (this.entries[forkName] === undefined) {\n          this.setErrorMessage(\n            \"Interpreter: the fork in the option '\" + displayName + \"@\" + forkName + \"' doesn't exist.\"\n          );\n        } else {\n          this.content.push(this.addOption(displayName, forkName, undefined, true));\n        }\n\n        // Deletes the line just processed.\n        textLeft = textLeft.substring(textLeft.indexOf(\"\\n\") + 1);\n      }\n      //#endregion\n\n      //#region Parse options. Syntax: output@forkname.\n      else if (line.includes(\"@\")) {\n        // Gets the fork name. Case and space insensitive.\n        const indexOfAt = line.indexOf(\"@\");\n        const forkName = line\n          .substring(indexOfAt + 1)\n          .replace(whitespaceRegex, \"\")\n          .toLowerCase();\n        const displayName = this.escapeText(line.substring(0, indexOfAt).trim(), false);\n\n        // Handles having no hyperlink or display name.\n        if (forkName === \"\") {\n          this.setErrorMessage(\"Interpreter: there was no fork name given to option '\" + displayName + \"'.\");\n        } else if (displayName.trim() === \"\") {\n          this.setErrorMessage(\n            \"Interpreter: the option linking to '\" + forkName + \"' has no displayable text specified.\"\n          );\n        } else {\n          this.options.push(this.addOption(displayName, forkName));\n        }\n\n        // Deletes the line just processed.\n        textLeft = textLeft.substring(textLeft.indexOf(\"\\n\") + 1);\n      }\n      //#endregion\n\n      //#region Print text. Syntax: {output text}.\n      // Parses output text and escape characters.\n      else if (line.includes(\"{\")) {\n        let lbPos = textLeft.indexOf(\"{\");\n        let rbPos = textLeft.indexOf(\"}\");\n        let output = textLeft.substring(lbPos, rbPos + 1);\n\n        if (rbPos < lbPos) {\n          this.setErrorMessage(\"Interpreter: In the line '\" + line + \"', right braces should follow left braces. \");\n\n          // Skips the unprocessable line.\n          textLeft = textLeft.substring(textLeft.indexOf(\"\\n\") + 1);\n\n          continue;\n        }\n\n        if (output.includes(\"***}\")) {\n          this.currentOutputStyles.fontStyle = \"ib\";\n        } else if (output.includes(\"**}\")) {\n          this.currentOutputStyles.fontStyle = \"b\";\n        } else if (output.includes(\"*}\")) {\n          this.currentOutputStyles.fontStyle = \"i\";\n        } else {\n          this.currentOutputStyles.fontStyle = undefined;\n        }\n\n        // create output\n        output = this.escapeText(\n          output.replace(\"{\", \"\").replace(\"***}\", \"\").replace(\"**}\", \"\").replace(\"*}\", \"\").replace(\"}\", \"\"),\n          true\n        );\n\n        // Generates the text\n        this.content.push(this.addOutput(output));\n\n        // Removes the processed text.\n        textLeft = textLeft.substring(0, lbPos) + textLeft.substring(rbPos + 1, textLeft.length);\n      }\n      //#endregion\n\n      //#region Set variables.\n      else if (textLeft.startsWith(\"set\")) {\n        // Unregisters previously-set variables.\n        exprParser.optIncludeUnknowns = false;\n        exprParser.resetTokens();\n\n        // Registers all valid variables with the math parser.\n        const variablesKeys = Object.keys(this.variables);\n        for (let i = 0; i < variablesKeys.length; i++) {\n          const varName = variablesKeys[i];\n          const varVal = this.variables[variablesKeys[i]];\n\n          if (typeof varVal === \"number\") {\n            exprParser.addIdentifier(new TokenId(varName, varVal));\n          } else if (typeof varVal === \"boolean\") {\n            exprParser.addIdentifier(new TokenId(varName, varVal));\n          }\n        }\n\n        // Registers a function to set a random number.\n        exprParser.addFunction(\n          new TokenFunc(\"random\", 1, (tokens) => {\n            if (tokens[0] instanceof TokenNum) {\n              const n0 = tokens[0] as TokenNum;\n\n              return new TokenNum(random!.nextNumber() * n0.value + 1);\n            }\n\n            return null;\n          })\n        );\n\n        // Gets the index to separate left and right-hand sides.\n        let exprTwoSidedIndex = words.indexOf(\"=\");\n\n        // Handles expressions with both LHS and RHS.\n        if (exprTwoSidedIndex !== -1) {\n          let lhs = words.slice(1, exprTwoSidedIndex);\n          let rhs = words.slice(exprTwoSidedIndex + 1);\n          let result = \"\";\n          let resultVal = null;\n\n          // If the left-hand side is a single word.\n          if (lhs.length === 1) {\n            // Attempts to compute the RHS expression.\n            try {\n              result = exprParser.eval(rhs.join(\" \"));\n            } catch (e) {\n              if (e instanceof Error) {\n                this.setErrorMessage(\"Interpreter: In the line '\" + line + \"', \" + e.message);\n              } else {\n                this.setErrorMessage(\"Interpreter: In the line '\" + line + \", \" + e);\n              }\n            }\n\n            // Parses the computed result as a bool.\n            if (result === \"true\" || result === \"false\") {\n              resultVal = result === \"true\";\n            }\n\n            // Parses the computed result as a number.\n            else {\n              if (numberRegex.test(result)) {\n                resultVal = parseFloat(result);\n              } else {\n                this.setErrorMessage(\n                  \"Interpreter: In the line '\" +\n                    line +\n                    \"', the expression \" +\n                    rhs.join(\" \") +\n                    \" should be a number, but \" +\n                    result +\n                    \" was computed instead.\"\n                );\n              }\n            }\n\n            // Sets or adds the new value as appropriate.\n            if (variablesKeys.includes(lhs[0])) {\n              this.variables[lhs[0]] = resultVal as number | boolean;\n            } else {\n              if (singleDigitRegex.test(lhs[0][0]) || exprParser.getTokens().some((o) => o.strForm === lhs[0])) {\n                this.setErrorMessage(\n                  \"Interpreter: In the line '\" +\n                    line +\n                    \"', the variable '\" +\n                    lhs[0] +\n                    \"' is a name used for math or is a number.\"\n                );\n              } else {\n                this.variables[lhs[0]] = resultVal as number | boolean;\n              }\n            }\n          } else {\n            this.setErrorMessage(\n              \"Interpreter: In the line '\" +\n                line +\n                \", the phrase \" +\n                lhs.join(\" \") +\n                \" must be a variable name without spaces.\"\n            );\n          }\n        }\n\n        // Handles shorthand expressions with only the LHS.\n        else {\n          let lhs = words.slice(1);\n          let result = \"\";\n          let resultVal = null;\n\n          if (lhs.length > 0) {\n            // Syntax: set name, set !name\n            if (lhs.length === 1) {\n              // Sets false boolean values.\n              if (lhs[0].startsWith(\"!\")) {\n                let lhsBool = lhs[0].substring(1);\n\n                if (variablesKeys.includes(lhsBool)) {\n                  this.variables[lhsBool] = false;\n                } else if (\n                  (lhs.length > 0 && singleDigitRegex.test(lhs[0][0])) ||\n                  exprParser.getTokens().some((tok) => tok.strForm === lhsBool)\n                ) {\n                  this.setErrorMessage(\n                    \"Interpreter: In the line '\" +\n                      line +\n                      \"', the variable '\" +\n                      lhsBool +\n                      \"' is a number or is used for math.\"\n                  );\n                } else {\n                  this.variables[lhsBool] = false;\n                }\n              }\n\n              // Sets true boolean values.\n              else {\n                if (variablesKeys.includes(lhs[0])) {\n                  this.variables[lhs[0]] = true;\n                } else if (\n                  (lhs.length > 0 && singleDigitRegex.test(lhs[0][0])) ||\n                  exprParser.getTokens().some((tok) => tok.strForm === lhs[0])\n                ) {\n                  this.setErrorMessage(\n                    \"Interpreter: In the line '\" +\n                      line +\n                      \"', the variable '\" +\n                      lhs[0] +\n                      \"' is a number or is used for math.\"\n                  );\n                } else {\n                  this.variables[lhs[0]] = true;\n                }\n              }\n            }\n\n            // Syntax: set EXPR, where EXPR is a math expression and not equation.\n            // This is computed as set name = EXPR.\n            else if (variablesKeys.includes(lhs[0])) {\n              // Attempts to compute the LHS expression.\n              try {\n                result = exprParser.eval(lhs.join(\" \"));\n              } catch (e) {\n                if (e instanceof Error) {\n                  this.setErrorMessage(\"Interpreter: In the line '\" + line + \"', \" + e.message);\n                } else {\n                  this.setErrorMessage(\"Interpreter: In the line '\" + line + \"', \" + e);\n                }\n              }\n\n              // Parses the computed result as a bool.\n              if (result === \"true\" || result === \"false\") {\n                resultVal = result === \"true\";\n              }\n\n              // Parses the computed result as a number.\n              else {\n                if (numberRegex.test(result)) {\n                  resultVal = parseFloat(result);\n                } else {\n                  this.setErrorMessage(\n                    \"Interpreter: In the line '\" +\n                      line +\n                      \"', the expression \" +\n                      lhs.join(\" \") +\n                      \" should be a number, but \" +\n                      result +\n                      \" was computed instead.\"\n                  );\n                }\n              }\n\n              this.variables[lhs[0]] = resultVal as number | boolean;\n            } else {\n              this.setErrorMessage(\n                \"Interpreter: In the line '\" + line + \"', the variable \" + lhs[0] + \" doesn't exist yet.\"\n              );\n            }\n          } else {\n            this.setErrorMessage(\n              \"Interpreter: In the line '\" +\n                line +\n                \"', you need to provide a variable name to set, using syntax like set a, set !a, or a mathematical expression.\"\n            );\n          }\n        }\n\n        // Deletes the line just processed.\n        if (endOfLine >= 0) {\n          textLeft = textLeft.substring(textLeft.indexOf(\"\\n\") + 1);\n        } else {\n          textLeft = \"\";\n        }\n      }\n      //#endregion\n\n      //#region Print variables. Syntax: get name.\n      // Syntax: get name.\n      else if (textLeft.startsWith(\"get\")) {\n        if (words.length === 2) {\n          if (this.variables[words[1]] !== undefined) {\n            this.content.push(this.addOutput(this.variables[words[1]].toString()));\n          } else {\n            this.setErrorMessage(\"Interpreter: In the line '\" + line + \"', variable \" + words[1] + \" does not exist.\");\n          }\n        } else {\n          this.setErrorMessage(\"Interpreter: In the line '\" + line + \"', only one word can follow 'get'.\");\n        }\n\n        // Deletes the line just processed.\n        if (endOfLine >= 0) {\n          textLeft = textLeft.substring(textLeft.indexOf(\"\\n\") + 1);\n        } else {\n          textLeft = \"\";\n        }\n      }\n      //#endregion\n\n      //#region Immediately jumps to another forks. Syntax: goto forkname.\n      // Handles syntax: goto forkname.\n      else if (textLeft.startsWith(\"goto\")) {\n        let forkName = line.substring(4).replace(whitespaceRegex, \"\").toLowerCase();\n\n        if (this.entries[forkName] !== undefined) {\n          // Ensures this page is considered visited, then executes the page being jumped to. When\n          // execution flow returns, this exits out of everything.\n          this.visitFork();\n          this.setFork(forkName);\n          this.stopEvaluation = true;\n          return;\n        } else {\n          this.setErrorMessage(\n            \"Interpreter: In the line '\" +\n              textLeft +\n              \"', cannot navigate to fork '\" +\n              forkName +\n              \"' because it does not exist.\"\n          );\n        }\n\n        // Deletes the line just processed.\n        if (endOfLine >= 0) {\n          textLeft = textLeft.substring(textLeft.indexOf(\"\\n\") + 1);\n        } else {\n          textLeft = \"\";\n        }\n      }\n      //#endregion\n\n      //#region Set text color. Syntax: color ffffff, color fff.\n      // Handles syntax: color ffffff (and other hex codes).\n      else if (textLeft.startsWith(\"color\")) {\n        let color = line.substring(5).trim().toLowerCase();\n        if (!colorRegex.test(color)) {\n          this.setErrorMessage(\n            \"Interpreter: In the line '\" +\n              line +\n              \"', color must be given in hex format. It can only include numbers 1-9 and upper or lowercase a-f.\"\n          );\n        } else if (color.length !== 6 && color.length !== 3) {\n          this.setErrorMessage(\n            \"Interpreter: In the line '\" +\n              line +\n              \"', color must be given in hex format using 3 or 6 digits. For example, f00 or 8800f0.\"\n          );\n        } else {\n          this.currentOutputStyles.colorDark = color;\n          this.currentOutputStyles.colorLight = color;\n        }\n\n        // Deletes the line just processed.\n        if (endOfLine >= 0) {\n          textLeft = textLeft.substring(textLeft.indexOf(\"\\n\") + 1);\n        } else {\n          textLeft = \"\";\n        }\n      }\n      //#endregion\n\n      // Anything left is an error.\n      else {\n        this.setErrorMessage(\n          \"Interpreter: In the line '\" +\n            line +\n            \"', unexpected symbols encountered. Ensure all output text is wrapped in single braces and there are no extra braces inside.\"\n        );\n\n        // Skips the unprocessable line.\n        textLeft = textLeft.substring(textLeft.indexOf(\"\\n\") + 1);\n      }\n    }\n  }\n\n  /** Initializes or resets the interpreter states. */\n  private refreshInterpreter() {\n    this.actions = [];\n    this.content = [];\n    this.currentOptionStyles = {};\n    this.currentOptionHighlightStyles = {};\n    this.currentOutputStyles = {};\n    this.errorMessage = \"\";\n    this.fork = \"\";\n    this.log = [];\n    this.options = [];\n    this.timers = [];\n    this.variables = {};\n    this.variablesPrev = {};\n\n    this.refreshInterpreterGuiStyles();\n  }\n\n  /** Initializes or resets the gui styles. */\n  private refreshInterpreterGuiStyles() {\n    const combinedProps = this.props as CombinedProps;\n\n    // Updates the background color of the runner.\n    const runner = document.getElementById(idRunnerWrapper);\n\n    if (runner) {\n      if (combinedProps.playerStorySettings.playerStoryRunnerStyles.background.type === \"plain\") {\n        runner.style[\"backgroundColor\"] =\n          combinedProps.theme.themeType === ThemeTypes.Light\n            ? combinedProps.playerStorySettings.playerStoryRunnerStyles.background.colorLight ||\n              combinedProps.theme.theme.semanticColors.bodyBackground\n            : combinedProps.playerStorySettings.playerStoryRunnerStyles.background.colorDark ||\n              combinedProps.theme.theme.semanticColors.bodyBackground;\n      } else if (combinedProps.authorStorySettings.authorStoryRunnerStyles.background.type === \"plain\") {\n        runner.style[\"backgroundColor\"] =\n          combinedProps.theme.themeType === ThemeTypes.Light\n            ? combinedProps.authorStorySettings.authorStoryRunnerStyles.background.colorLight ||\n              combinedProps.theme.theme.semanticColors.bodyBackground\n            : combinedProps.authorStorySettings.authorStoryRunnerStyles.background.colorDark ||\n              combinedProps.theme.theme.semanticColors.bodyBackground;\n      }\n    }\n  }\n\n  /** Called when a restart link is pressed or restart is invoked. */\n  private restartGame = () => {\n    this.refreshInterpreter();\n\n    const entriesKeys = Object.keys(this.entries);\n    this.setFork(entriesKeys[0]);\n  };\n\n  /** Empties the log or updates it, depending on interpreter options. */\n  private updateLog() {\n    const combinedProps = this.props as CombinedProps;\n\n    if (\n      combinedProps.authorStorySettings.authorStoryRunnerOptions.hideLog ||\n      combinedProps.authorStorySettings.authorStoryRunnerOptions.logLimit === 0\n    ) {\n      this.log = [];\n    } else {\n      this.log.push(...this.content);\n    }\n  }\n\n  /**\n   * Called when a fork is finished executing or is stopped so another fork can run, in which this\n   * should execute immediately.\n   */\n  private visitFork() {\n    // Automatically sets variables to indicate pages were visited.\n    if (this.variables[\"visited\" + this.fork] === undefined) {\n      this.variables[\"visited\" + this.fork] = true;\n    }\n  }\n}\n\nexport const StoryInterpreter = connect(mapStateToProps, mapDispatchToProps, undefined, {\n  forwardRef: true,\n})(StoryInterpreterC);\n","/**\n * Adapted by Benyl on StackOverflow at https://stackoverflow.com/a/32537932/7197632 based on the Mersenne Twister\n * algorithm at https://gist.github.com/banksean/300494. This is used because as of October 2020, there is no ECMA\n * standardized support for seeding a random number, and it's useful for debugging.\n */\nexport class Random {\n  static N = 624;\n  static M = 397;\n  static MATRIX_A = 0x9908b0df;\n  /* constant vector a */\n  static UPPER_MASK = 0x80000000;\n  /* most significant w-r bits */\n  static LOWER_MASK = 0x7fffffff;\n  /* least significant r bits */\n\n  mt = new Array(Random.N);\n  /* the array for the state vector */\n  mti = Random.N + 1;\n  /* mti==N+1 means mt[N] is not initialized */\n\n  /** The seed used when constructing the RNG. Read only. */\n  public readonly seed: number | null = null;\n\n  constructor(seed: number | null = null) {\n    if (seed == null) {\n      this.seed = new Date().getTime();\n    } else {\n      this.seed = seed;\n    }\n\n    this.init_genrand(this.seed);\n  }\n\n  private init_genrand(s: number) {\n    this.mt[0] = s >>> 0;\n    for (this.mti = 1; this.mti < Random.N; this.mti++) {\n      const s2 = this.mt[this.mti - 1] ^ (this.mt[this.mti - 1] >>> 30);\n      this.mt[this.mti] = ((((s2 & 0xffff0000) >>> 16) * 1812433253) << 16) + (s2 & 0x0000ffff) * 1812433253 + this.mti;\n      /* See Knuth TAOCP Vol2. 3rd Ed. P.106 for multiplier. */\n      /* In the previous versions, MSBs of the seed affect   */\n      /* only MSBs of the array mt[].                        */\n      /* 2002/01/09 modified by Makoto Matsumoto             */\n      this.mt[this.mti] >>>= 0;\n      /* for >32 bit machines */\n    }\n  }\n\n  /**\n   * generates a random number on [0,0xffffffff]-interval\n   * @private\n   */\n  private _nextInt32(): number {\n    var y: number;\n    var mag01 = [0x0, Random.MATRIX_A];\n    /* mag01[x] = x * MATRIX_A  for x=0,1 */\n\n    if (this.mti >= Random.N) {\n      /* generate N words at one time */\n      var kk: number;\n\n      if (this.mti === Random.N + 1)\n        /* if init_genrand() has not been called, */\n        this.init_genrand(5489);\n      /* a default initial seed is used */\n\n      for (kk = 0; kk < Random.N - Random.M; kk++) {\n        y = (this.mt[kk] & Random.UPPER_MASK) | (this.mt[kk + 1] & Random.LOWER_MASK);\n        this.mt[kk] = this.mt[kk + Random.M] ^ (y >>> 1) ^ mag01[y & 0x1];\n      }\n      for (; kk < Random.N - 1; kk++) {\n        y = (this.mt[kk] & Random.UPPER_MASK) | (this.mt[kk + 1] & Random.LOWER_MASK);\n        this.mt[kk] = this.mt[kk + (Random.M - Random.N)] ^ (y >>> 1) ^ mag01[y & 0x1];\n      }\n      y = (this.mt[Random.N - 1] & Random.UPPER_MASK) | (this.mt[0] & Random.LOWER_MASK);\n      this.mt[Random.N - 1] = this.mt[Random.M - 1] ^ (y >>> 1) ^ mag01[y & 0x1];\n\n      this.mti = 0;\n    }\n\n    y = this.mt[this.mti++];\n\n    /* Tempering */\n    y ^= y >>> 11;\n    y ^= (y << 7) & 0x9d2c5680;\n    y ^= (y << 15) & 0xefc60000;\n    y ^= y >>> 18;\n\n    return y >>> 0;\n  }\n\n  /**\n   * generates an int32 pseudo random number\n   * @param range: an optional [from, to] range, if not specified the result will be in range [0,0xffffffff]\n   * @return {number}\n   */\n  nextInt32(range: [number, number] | null = null): number {\n    var result = this._nextInt32();\n    if (range == null) {\n      return result;\n    }\n\n    return (result % (range[1] - range[0])) + range[0];\n  }\n\n  /**\n   * generates a random number on [0,0x7fffffff]-interval\n   */\n  nextInt31(): number {\n    return this._nextInt32() >>> 1;\n  }\n\n  /**\n   * generates a random number on [0,1]-real-interval\n   */\n  nextNumber(): number {\n    return this._nextInt32() * (1.0 / 4294967295.0);\n  }\n\n  /**\n   * generates a random number on [0,1) with 53-bit resolution\n   */\n  nextNumber53(): number {\n    var a = this._nextInt32() >>> 5,\n      b = this._nextInt32() >>> 6;\n    return (a * 67108864.0 + b) * (1.0 / 9007199254740992.0);\n  }\n}\n","/** Represents which direction to evaluate multiple homogenous operators in. */\nexport enum associativity {\n  /** Left associative operators compute a ~ b ~ c as (a ~ b) ~ c. */\n  left,\n\n  /** Right associative operators compute a ~ b ~ c as a ~ (b ~ c). */\n  right,\n}\n","/** Determines how operands interact with an operator token. */\nexport enum placements {\n  /** For unary tokens that use the preceding number, like negation. */\n  left,\n\n  /** For unary tokens that use the following number, like factorial. */\n  right,\n\n  /** For binary tokens. */\n  both,\n}\n","import { associativity } from \"./Associativity\";\nimport { placements } from \"./Placements\";\nimport { IToken, tokenEvalFunc } from \"./utils\";\n\n/** An operator token. */\nexport class TokenOp implements IToken {\n  public strForm: string;\n  public placement: placements;\n  public assoc: associativity;\n  public prec: number;\n  public numArgs: number;\n  public function: tokenEvalFunc;\n\n  constructor(\n    opPlacement: placements,\n    associativity: associativity,\n    precedence: number,\n    format: string,\n    operation: tokenEvalFunc\n  ) {\n    this.placement = opPlacement;\n    this.assoc = associativity;\n    this.prec = precedence;\n\n    if (opPlacement === placements.both) {\n      this.numArgs = 2;\n    } else {\n      this.numArgs = 1;\n    }\n\n    this.strForm = format;\n    this.function = operation;\n  }\n\n  /** Returns true if all properties of each token are the same. */\n  public equals(obj: TokenOp) {\n    return (\n      this.strForm === obj.strForm &&\n      this.placement === obj.placement &&\n      this.assoc === obj.assoc &&\n      this.prec === obj.prec &&\n      this.numArgs === obj.numArgs &&\n      this.function === obj.function\n    );\n  }\n}\n","import { IToken } from \"./utils\";\n\n/** A symbolic token to store a general symbol. */\nexport class TokenSym implements IToken {\n  public strForm: string;\n\n  constructor(name: string) {\n    this.strForm = name;\n  }\n\n  /** Returns true if all properties of each token are the same. */\n  public equals(obj: TokenSym) {\n    return this.strForm === obj.strForm;\n  }\n}\n","// TODO: localize all errors in this file.\n\nimport { associativity } from \"./Associativity\";\nimport { placements } from \"./Placements\";\nimport { TokenBool } from \"./TokenBool\";\nimport { TokenFunc } from \"./TokenFunc\";\nimport { TokenId } from \"./TokenId\";\nimport { TokenNum } from \"./TokenNum\";\nimport { TokenOp } from \"./TokenOp\";\nimport { TokenSym } from \"./TokenSym\";\nimport { IToken, numberRegex } from \"./utils\";\n\n/** Tokenizes mathematical expressions to evaluate or symbolically manipulate them. */\nexport class Parser {\n  /** If true, parentheses groups must always be balanced. False by default. */\n  public optRequireRightPars = false;\n\n  /** If true, tokens that aren't recognized will be added as unknown variables. True by default. */\n  public optIncludeUnknowns = true;\n\n  /**\n   * Null identifiers will be replaced with this token for evaluation, if specified. Else, an error\n   * will be thrown. Null by default.\n   */\n  public optUnknownDefault: IToken | null = null;\n\n  /** The sine function for radians. */\n  public Fsin = new TokenFunc(\"sin\", 1, (operands: IToken[]) => {\n    if (operands[0] instanceof TokenNum) {\n      const n0 = operands[0] as TokenNum;\n\n      return new TokenNum(Math.sin(n0.value));\n    }\n\n    return null;\n  });\n\n  /** The cosine function for radians. */\n  public Fcos = new TokenFunc(\"cos\", 1, (operands: IToken[]) => {\n    if (operands[0] instanceof TokenNum) {\n      const n0 = operands[0] as TokenNum;\n\n      return new TokenNum(Math.cos(n0.value));\n    }\n\n    return null;\n  });\n\n  /** The tangent function for radians. */\n  public Ftan = new TokenFunc(\"tan\", 1, (operands: IToken[]) => {\n    if (operands[0] instanceof TokenNum) {\n      const n0 = operands[0] as TokenNum;\n\n      return new TokenNum(Math.tan(n0.value));\n    }\n\n    return null;\n  });\n\n  /** Rounds a single number to the nearest integer. */\n  public Frnd = new TokenFunc(\"round\", 1, (operands: IToken[]) => {\n    if (operands[0] instanceof TokenNum) {\n      const n0 = operands[0] as TokenNum;\n\n      return new TokenNum(Math.round(n0.value));\n    }\n\n    return null;\n  });\n\n  /** Rounds a number to the nearest multiple of another. */\n  public Frnd2 = new TokenFunc(\"round\", 2, (operands: IToken[]) => {\n    if (operands[0] instanceof TokenNum && operands[1] instanceof TokenNum) {\n      const n0 = operands[0] as TokenNum;\n      const n1 = operands[1] as TokenNum;\n\n      return new TokenNum(Math.round(n0.value / n1.value) * n1.value);\n    }\n\n    return null;\n  });\n\n  /** The addition operator. */\n  public Add = new TokenOp(placements.both, associativity.left, 6, \"+\", (operands: IToken[]) => {\n    if (operands[0] instanceof TokenNum && operands[1] instanceof TokenNum) {\n      const n0 = operands[0] as TokenNum;\n      const n1 = operands[1] as TokenNum;\n\n      return new TokenNum(n0.value + n1.value);\n    }\n\n    return null;\n  });\n\n  /** The subtraction operator. */\n  public Sub = new TokenOp(placements.both, associativity.left, 6, \"-\", (operands: IToken[]) => {\n    if (operands[0] instanceof TokenNum && operands[1] instanceof TokenNum) {\n      const n0 = operands[0] as TokenNum;\n      const n1 = operands[1] as TokenNum;\n\n      return new TokenNum(n0.value - n1.value);\n    }\n\n    return null;\n  });\n\n  /** The multiplication operator. */\n  public Mlt = new TokenOp(placements.both, associativity.left, 7, \"*\", (operands: IToken[]) => {\n    if (operands[0] instanceof TokenNum && operands[1] instanceof TokenNum) {\n      const n0 = operands[0] as TokenNum;\n      const n1 = operands[1] as TokenNum;\n\n      return new TokenNum(n0.value * n1.value);\n    }\n\n    return null;\n  });\n\n  /** The division operator. */\n  public Div = new TokenOp(placements.both, associativity.left, 7, \"/\", (operands: IToken[]) => {\n    if (operands[0] instanceof TokenNum && operands[1] instanceof TokenNum) {\n      const n0 = operands[0] as TokenNum;\n      const n1 = operands[1] as TokenNum;\n\n      if (n1.value === 0) {\n        throw new Error(`Parser: The expression ${n0.strForm} / ${n1.strForm} causes division by zero.`);\n      }\n\n      return new TokenNum(n0.value / n1.value);\n    }\n\n    return null;\n  });\n\n  /** The modulus operator. */\n  public Mod = new TokenOp(placements.both, associativity.left, 7, \"%\", (operands: IToken[]) => {\n    if (operands[0] instanceof TokenNum && operands[1] instanceof TokenNum) {\n      const n0 = operands[0] as TokenNum;\n      const n1 = operands[1] as TokenNum;\n\n      if (n1.value === 0) {\n        throw new Error(`Parser: The expression ${n0.strForm} % ${n1.strForm} causes division by zero.`);\n      }\n\n      return new TokenNum(n0.value % n1.value);\n    }\n\n    return null;\n  });\n\n  /** The negation operator. */\n  public Neg = new TokenOp(placements.right, associativity.right, 8, \"-\", (operands: IToken[]) => {\n    if (operands[1] instanceof TokenNum) {\n      const n1 = operands[1] as TokenNum;\n      return new TokenNum(-n1.value);\n    }\n\n    return null;\n  });\n\n  /** The exponentiation operator. */\n  public Exp = new TokenOp(placements.both, associativity.right, 8, \"^\", (operands: IToken[]) => {\n    if (operands[0] instanceof TokenNum && operands[1] instanceof TokenNum) {\n      const n0 = operands[0] as TokenNum;\n      const n1 = operands[1] as TokenNum;\n\n      return new TokenNum(Math.pow(n0.value, n1.value));\n    }\n\n    return null;\n  });\n\n  /** The factorial operator. */\n  public Fac = new TokenOp(placements.left, associativity.left, 9, \"!\", (operands: IToken[]) => {\n    if (operands[0] instanceof TokenNum) {\n      const n0 = operands[0] as TokenNum;\n      let givenVal = n0.value;\n      let value = 1;\n\n      while (n0.value > 1) {\n        value *= givenVal--;\n      }\n\n      return new TokenNum(value);\n    }\n\n    return null;\n  });\n\n  /** The equality operator. */\n  public Eq = new TokenOp(placements.both, associativity.left, 4, \"=\", (operands: IToken[]) => {\n    if (operands[0] instanceof TokenNum && operands[1] instanceof TokenNum) {\n      const n0 = operands[0] as TokenNum;\n      const n1 = operands[1] as TokenNum;\n\n      return new TokenBool(n0.value === n1.value);\n    }\n\n    if (operands[0] instanceof TokenBool && operands[1] instanceof TokenBool) {\n      const n0 = operands[0] as TokenBool;\n      const n1 = operands[1] as TokenBool;\n\n      return new TokenBool(n0.value === n1.value);\n    }\n\n    return null;\n  });\n\n  /** The inequality operator. */\n  public NotEq = new TokenOp(placements.both, associativity.left, 4, \"!=\", (operands: IToken[]) => {\n    if (operands[0] instanceof TokenNum && operands[1] instanceof TokenNum) {\n      const n0 = operands[0] as TokenNum;\n      const n1 = operands[1] as TokenNum;\n\n      return new TokenBool(n0.value !== n1.value);\n    }\n\n    if (operands[0] instanceof TokenBool && operands[1] instanceof TokenBool) {\n      const n0 = operands[0] as TokenBool;\n      const n1 = operands[1] as TokenBool;\n\n      return new TokenBool(n0.value !== n1.value);\n    }\n\n    return null;\n  });\n\n  /** The greater-than operator. */\n  public Gt = new TokenOp(placements.both, associativity.left, 5, \">\", (operands: IToken[]) => {\n    if (operands[0] instanceof TokenNum && operands[1] instanceof TokenNum) {\n      const n0 = operands[0] as TokenNum;\n      const n1 = operands[1] as TokenNum;\n\n      return new TokenBool(n0.value > n1.value);\n    }\n\n    return null;\n  });\n\n  /** The greater-than-or-equal operator. */\n  public Gte = new TokenOp(placements.both, associativity.left, 5, \">=\", (operands: IToken[]) => {\n    if (operands[0] instanceof TokenNum && operands[1] instanceof TokenNum) {\n      const n0 = operands[0] as TokenNum;\n      const n1 = operands[1] as TokenNum;\n\n      return new TokenBool(n0.value >= n1.value);\n    }\n\n    return null;\n  });\n\n  /** The less-than operator. */\n  public Lt = new TokenOp(placements.both, associativity.left, 5, \"<\", (operands: IToken[]) => {\n    if (operands[0] instanceof TokenNum && operands[1] instanceof TokenNum) {\n      const n0 = operands[0] as TokenNum;\n      const n1 = operands[1] as TokenNum;\n\n      return new TokenBool(n0.value < n1.value);\n    }\n\n    return null;\n  });\n\n  /** The less-than-or-equal operator. */\n  public Lte = new TokenOp(placements.both, associativity.left, 5, \"<=\", (operands: IToken[]) => {\n    if (operands[0] instanceof TokenNum && operands[1] instanceof TokenNum) {\n      const n0 = operands[0] as TokenNum;\n      const n1 = operands[1] as TokenNum;\n\n      return new TokenBool(n0.value <= n1.value);\n    }\n\n    return null;\n  });\n\n  /** The logical not operator. */\n  public LogNot = new TokenOp(placements.right, associativity.left, 3, \"!\", (operands: IToken[]) => {\n    if (operands[1] instanceof TokenBool) {\n      const n1 = operands[1] as TokenBool;\n\n      return new TokenBool(!n1.value);\n    }\n\n    return null;\n  });\n\n  /** The logical and operator. */\n  public LogAnd = new TokenOp(placements.both, associativity.left, 1, \"&\", (operands: IToken[]) => {\n    if (operands[0] instanceof TokenBool && operands[1] instanceof TokenBool) {\n      const n0 = operands[0] as TokenBool;\n      const n1 = operands[1] as TokenBool;\n\n      return new TokenBool(n0.value && n1.value);\n    }\n\n    return null;\n  });\n\n  /** The logical or operator. */\n  public LogOr = new TokenOp(placements.both, associativity.left, 2, \"|\", (operands: IToken[]) => {\n    if (operands[0] instanceof TokenBool && operands[1] instanceof TokenBool) {\n      const n0 = operands[0] as TokenBool;\n      const n1 = operands[1] as TokenBool;\n\n      return new TokenBool(n0.value || n1.value);\n    }\n\n    return null;\n  });\n\n  /** Represents the literal boolean value of false. */\n  public varFalse = new TokenId(\"false\", false);\n\n  /** Represents the literal boolean value of true. */\n  public varTrue = new TokenId(\"true\", true);\n\n  /** The mathematical constant, Pi. */\n  public varPi = new TokenId(\"pi\", Math.PI);\n\n  /** Represents a left parenthesis. */\n  public lPar = new TokenSym(\"(\");\n\n  /** Represents a right parenthesis. */\n  public rPar = new TokenSym(\")\");\n\n  /** Represents a function argument separator. */\n  public argSep = new TokenSym(\",\");\n\n  // prettier-ignore\n  /** A list of all tokens to parse with. */\n  public tokens: IToken[] = [];\n\n  constructor() {\n    this.resetTokens();\n  }\n\n  /** Adds a string-lowercased copy of the function. */\n  public addFunction(token: TokenFunc) {\n    this.tokens.push(new TokenFunc(token.strForm.toLowerCase(), token.numArgs, token.function));\n    this.tokens = this.tokens.sort((a, b) => (a.strForm < b.strForm ? 1 : -1));\n  }\n\n  /** Adds a string-lowercased copy of the identifier. */\n  public addIdentifier(token: TokenId) {\n    this.tokens.push(new TokenId(token.strForm.toLowerCase(), token.value));\n    this.tokens = this.tokens.sort((a, b) => (a.strForm < b.strForm ? 1 : -1));\n  }\n\n  /** Adds a string-lowercased copy of the operator. */\n  public addOperator(token: TokenOp) {\n    this.tokens.push(\n      new TokenOp(token.placement, token.assoc, token.prec, token.strForm.toLowerCase(), token.function)\n    );\n\n    // Sorts tokens in reverse lexicographic order to support deferring.\n    this.tokens = this.tokens.sort((a, b) => (a.strForm < b.strForm ? 1 : -1));\n  }\n\n  /** Parses an expression with operators, functions, and identifiers. */\n  public eval(expression: string) {\n    return this.evalTokens(this.tokenize(expression));\n  }\n\n  /** Parses a pre-tokenized expression. Invalid tokenization may result in unanticipated errors. */\n  public evalTokens(tokensList: IToken[]) {\n    // Substitutes values for identifiers.\n    for (let i = 0; i < tokensList.length; i++) {\n      if (tokensList[i] instanceof TokenId) {\n        const tokId = tokensList[i] as TokenId;\n\n        // Inserts any known values for a token.\n        if (tokId.value !== null) {\n          if (typeof tokId.value === \"number\") {\n            tokensList[i] = new TokenNum(tokId.value);\n          } else if (typeof tokId.value === \"boolean\") {\n            tokensList[i] = new TokenBool(tokId.value);\n          }\n        }\n\n        // Replaces unknown identifiers with a value or fails.\n        else if (this.optUnknownDefault !== null) {\n          tokensList[i] = this.optUnknownDefault;\n        } else {\n          throw new Error(\"Parser: The identifier '\" + tokensList[i].strForm + \"' is unknown and can't be computed.\");\n        }\n      }\n    }\n\n    const functions = this.tokens.filter((token) => token instanceof TokenFunc) as TokenFunc[];\n\n    // Solves each parenthesis group from deepest depth outward.\n    while (true) {\n      // Finds the end of the nearest complete sub-expression.\n      let rbrPos = tokensList.indexOf(this.rPar) + 1;\n      let subExpressionEnd = rbrPos >= 1 ? rbrPos : tokensList.length;\n\n      // Finds the start of the nearest complete sub-expression.\n      let lbrPos = tokensList.slice(0, subExpressionEnd).lastIndexOf(this.lPar);\n      let subExpressionBegin = lbrPos >= 0 ? lbrPos : 0;\n\n      // Isolates the sub-expression.\n      let expressionLHS = tokensList.slice(0, subExpressionBegin);\n      let expressionRHS = tokensList.slice(subExpressionEnd, tokensList.length);\n      let subExpression = tokensList.slice(subExpressionBegin, subExpressionEnd);\n\n      // Includes functions and picks a proper overload.\n      let subExpressionFunc: TokenFunc | null = null;\n\n      if (expressionLHS[expressionLHS.length - 1] instanceof TokenFunc) {\n        const tokFunc = expressionLHS[expressionLHS.length - 1] as TokenFunc;\n        expressionLHS.splice(expressionLHS.length - 1, 1);\n\n        let numArgs = 1;\n\n        subExpression.forEach((tok) => {\n          if (tok === this.argSep) {\n            numArgs++;\n          }\n        });\n\n        subExpressionFunc = functions.find((f) => f.numArgs === numArgs && f.strForm === tokFunc.strForm) ?? null;\n      }\n\n      // Evaluates sub-expressions.\n      tokensList = expressionLHS;\n      tokensList.push(...this.evalNoPar(subExpression, subExpressionFunc));\n      tokensList.push(...expressionRHS);\n\n      // Returns when everything has been parsed.\n      if (expressionLHS.length === 0 && expressionRHS.length === 0) {\n        let result = \"\";\n\n        for (let i = 0; i < tokensList.length; i++) {\n          result += tokensList[i].strForm;\n        }\n\n        return result;\n      }\n    }\n  }\n\n  /**\n   * Parses a non-relational expression without parentheses with an optional argument to treat the\n   * expression as function arguments.\n   */\n  public evalNoPar = (subExpression: IToken[], func: TokenFunc | null): IToken[] => {\n    let operators = this.tokens.filter((tok) => tok instanceof TokenOp) as TokenOp[];\n    let result: IToken[] = [];\n\n    // Creates a string representation of the token list for errors.\n    let subExpressionStr = \"\";\n\n    for (let i = 0; i < subExpression.length; i++) {\n      subExpressionStr += subExpression[i].strForm;\n    }\n\n    // Strips () and catches empty expressions.\n    if (\n      this.optRequireRightPars &&\n      subExpression[0] === this.lPar &&\n      subExpression[subExpression.length - 1] !== this.rPar\n    ) {\n      throw new Error(\"Parser: The expression '\" + subExpressionStr + \"' is missing a right parenthesis at the end.\");\n    }\n\n    subExpression.filter((tok) => tok === this.lPar || tok === this.rPar);\n\n    if (subExpression.length === 0) {\n      throw new Error(\"Parser: an empty parenthesis group was provided; there is nothing to process within it.\");\n    }\n\n    // Parses each argument separately, then applies the function.\n    if (func !== null) {\n      let args = this.split(subExpression, this.argSep);\n      let argVals: IToken[] = [];\n\n      // Catches overloads with the wrong number of arguments.\n      if (func.numArgs !== args.length) {\n        throw new Error(\n          \"Parser: In expression '\" +\n            subExpressionStr +\n            \"', the number of arguments for \" +\n            func.strForm +\n            \" should be \" +\n            func.numArgs +\n            \", but \" +\n            args.length +\n            \" arguments were given.\"\n        );\n      }\n\n      // Simplifies each argument.\n      for (let i = 0; i < args.length; i++) {\n        const subResult = this.evalNoPar(args[i], null);\n\n        if (subResult[0] instanceof TokenNum || subResult[0] instanceof TokenBool) {\n          argVals[i] = subResult[0];\n        } else {\n          throw new Error(\n            \"Parser: In expression '\" +\n              subExpressionStr +\n              \"', a boolean argument was provided instead of a decimal value.\"\n          );\n        }\n      }\n\n      // Applies functions.\n      const immediateResult = func.function(argVals);\n      if (immediateResult === null) {\n        throw new Error(\n          \"Parser: In expression '\" + subExpressionStr + \"', arguments do not match parameter types used.\"\n        );\n      }\n\n      result.push(immediateResult);\n      return result;\n    }\n\n    // Minuses are binary by default; determines which ones are unary. If the first token is a\n    // minus, it's a negation.\n    if (subExpression[0] === this.Sub) {\n      subExpression[0] = this.Neg;\n    }\n\n    // Performs left-to-right modifications on the token list.\n    for (let i = 1; i < subExpression.length; i++) {\n      // A minus after a binary operator or negation is a negation.\n      if (\n        (subExpression[i] === this.Sub &&\n          subExpression[i - 1] instanceof TokenOp &&\n          ((subExpression[i - 1] as TokenOp).numArgs > 1 || subExpression[i - 1] === this.Neg)) ||\n        subExpression[i - 1] instanceof TokenFunc\n      ) {\n        subExpression[i] = this.Neg;\n      }\n    }\n\n    // Gets max precedence within sub-expression.\n    let opTokens = subExpression.filter((tok) => tok instanceof TokenOp) as TokenOp[];\n\n    let maxPrecedence = 0;\n    opTokens.forEach((tok: TokenOp) => {\n      if (tok.prec > maxPrecedence) {\n        maxPrecedence = tok.prec;\n      }\n    });\n\n    // Computes all operators with equal precedence.\n    while (maxPrecedence > 0) {\n      let isRightAssociative = operators.some((tok) => maxPrecedence === tok.prec && tok.assoc === associativity.right);\n\n      // Iterates through each token forwards or backwards.\n      let j = isRightAssociative ? subExpression.length - 1 : 0;\n\n      while ((isRightAssociative && j >= 0) || (!isRightAssociative && j < subExpression.length)) {\n        if (subExpression[j] instanceof TokenOp && (subExpression[j] as TokenOp).prec === maxPrecedence) {\n          let opToken = subExpression[j] as TokenOp;\n          let argVals: IToken[] = [subExpression[j - 1] ?? null, subExpression[j + 1] ?? null];\n          let result: IToken | null = null;\n\n          // Handles missing arguments.\n          if (argVals[0] === null && (opToken.placement === placements.both || opToken.placement === placements.left)) {\n            throw new Error(\n              \"Parser: In '\" +\n                subExpressionStr +\n                \"', the '\" +\n                subExpression[j].strForm +\n                \"' operator is missing a lefthand operand.\"\n            );\n          } else if (\n            argVals[1] === null &&\n            (opToken.placement === placements.both || opToken.placement === placements.right)\n          ) {\n            throw new Error(\n              \"Parser: In '\" +\n                subExpressionStr +\n                \"', the '\" +\n                subExpression[j].strForm +\n                \"' operator is missing a righthand operand.\"\n            );\n          }\n\n          // Applies each operator.\n          result = opToken.function(argVals);\n\n          // Removes affected tokens and inserts new value.\n          if (result === null) {\n            throw new Error(\"In expression '\" + subExpressionStr + \"', operand type(s) do not match operator.\");\n          } else {\n            subExpression[j] = result;\n          }\n\n          if (opToken.placement === placements.left) {\n            subExpression.splice(j - 1, 1);\n            j += isRightAssociative ? 0 : -1;\n          } else if (opToken.placement === placements.right) {\n            subExpression.splice(j + 1, 1);\n            j += isRightAssociative ? 1 : 0;\n          } else if (opToken.placement === placements.both) {\n            subExpression.splice(j + 1, 1);\n            subExpression.splice(j - 1, 1);\n            j += isRightAssociative ? 0 : -1;\n          }\n        }\n\n        // Moves to next token to evaluate.\n        if (isRightAssociative) {\n          j--;\n        } else {\n          j++;\n        }\n      }\n\n      // Gets new precedence within sub-expression.\n      opTokens = subExpression.filter((tok) => tok instanceof TokenOp) as TokenOp[];\n      let maxPrecedence2 = 0;\n\n      opTokens.forEach((tok: TokenOp) => {\n        if (tok.prec > maxPrecedence2) {\n          maxPrecedence2 = tok.prec;\n        }\n      });\n    }\n\n    // Returns the final value.\n    result.push(...subExpression);\n    return result;\n  };\n\n  /** Returns the list of all tokens in use. */\n  public getTokens() {\n    return this.tokens;\n  }\n\n  /**\n   * Removes the first match for the given token from the list of tokens, if it exists. Returns\n   * true if found, false otherwise.\n   */\n  public removeToken(token: IToken) {\n    for (let i = this.tokens.length; i > 0; i--) {\n      if ((token as TokenBool).equals((this.tokens as TokenBool[])[i])) {\n        this.tokens.splice(i, 1);\n\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /** Resets to the default token list and removes all user-added tokens. */\n  public resetTokens() {\n    //Sets the token list. Omits factorial.\n    //prettier-ignore\n    this.tokens = [\n      this.Exp, this.Neg, this.Mod, this.Div, this.Mlt, this.Sub, this.Add, this.LogNot, this.LogOr, this.LogAnd,\n      this.Eq, this.Gt, this.Gte, this.Lt, this.Lte, this.NotEq,\n      this.Fsin, this.Fcos, this.Ftan, this.Frnd, this.Frnd2,\n      this.varFalse, this.varTrue, this.varPi,\n      this.lPar, this.rPar, this.argSep\n    ];\n\n    //Sorts tokens in reverse lexicographic order to support deferring.\n    this.tokens = this.tokens.sort((a, b) => (a.strForm < b.strForm ? 1 : -1));\n  }\n\n  /**\n   * Returns all consecutive items between each matched delimiter item. For example, a list\n   * containing [0, 2, 1, 3, 1] delimited by 1 will return the lists [0, 2][3].\n   */\n  public split<T>(list: T[], delimiter: T): T[][] {\n    const lists: T[][] = [];\n    const currentList: T[] = [];\n\n    // Stores the running list and creates another for each delimiter.\n    for (let i = 0; i < list.length; i++) {\n      if (list[i] === delimiter) {\n        lists.push([...currentList]);\n      } else {\n        currentList.push(list[i]);\n      }\n    }\n\n    if (currentList.length > 0) {\n      lists.push(currentList);\n    }\n\n    return lists;\n  }\n\n  /** Converts the given string to tokens. */\n  public tokenize(expression: string): IToken[] {\n    const tokensList: IToken[] = [];\n    let token = \"\";\n\n    // Catches null or whitespace strings.\n    if (expression.trim() === \"\") {\n      throw new Error(\"Parser: No expression provided.\");\n    }\n\n    // Lowercases and removes whitespaces.\n    expression = expression.replace(/\\s/gm, \"\").toLowerCase();\n\n    // Builds a token list.\n    let longestMatch: IToken | null = null;\n    let shortestMatch: IToken | null = null;\n    let candidateBeforeDefer: IToken | null = null;\n\n    for (let i = 0; i < expression.length; i++) {\n      token += expression[i];\n\n      // Matches longer tokens and tokens of the same length.\n      longestMatch = this.tokens.filter((tok) => tok.strForm === token)[0];\n\n      // Defers when the token is longer.\n      if (i !== expression.length - 1 && longestMatch?.strForm.length > token.length) {\n        shortestMatch = this.tokens.filter((tok) => tok.strForm === token)[0];\n\n        // Stores valid matches as token matching is deferred.\n        if (shortestMatch?.strForm === token) {\n          candidateBeforeDefer = shortestMatch;\n\n          // Adds the token if at end rather than deferring.\n          if (i === expression.length - 1) {\n            tokensList.push(shortestMatch);\n            token = \"\";\n            candidateBeforeDefer = null;\n          }\n        }\n      }\n\n      // Matches when there are no longer candidates.\n      else if (longestMatch !== null && (i !== expression.length - 1 || longestMatch.strForm.length === token.length)) {\n        tokensList.push(longestMatch);\n        token = \"\";\n        candidateBeforeDefer = null;\n      } else {\n        // Backtracks to the last valid token.\n        if (candidateBeforeDefer !== null) {\n          i -= token.length - candidateBeforeDefer.strForm.length;\n          tokensList.push(candidateBeforeDefer);\n          token = \"\";\n          candidateBeforeDefer = null;\n        }\n\n        // Matches literals.\n        else if (numberRegex.test(token)) {\n          const val = parseFloat(token);\n\n          // Adds the numeric token at end of string or boundary.\n          if (i === expression.length - 1 || !numberRegex.test(token + expression[i + 1])) {\n            tokensList.push(new TokenNum(val));\n            token = \"\";\n          }\n        }\n\n        // Matches unknowns by-character if allowed.\n        else if (this.optIncludeUnknowns) {\n          tokensList.push(new TokenId(token[0].toString(), null));\n          i -= token.length - 1;\n          token = \"\";\n        } else {\n          throw new Error(\"Parser: token '\" + token + \"' is not a recognized symbol.\");\n        }\n      }\n    }\n\n    // Combines contiguous tokens. If the resulting token exists, uses it. Else, adds as unknown or\n    // throws an error.\n    let combinedTokens: IToken[] = [];\n    let unknownTokenName = \"\";\n\n    // Combines contiguous unknowns. Sets tokens to be subtraction rather than negation by default.\n    for (let i = 0; i < tokensList.length; i++) {\n      // Break and add while looking ahead.\n      if (\n        i === tokensList.length - 1 ||\n        tokensList[i + 1] instanceof TokenOp ||\n        tokensList[i + 1] instanceof TokenSym\n      ) {\n        if (unknownTokenName !== \"\") {\n          unknownTokenName += tokensList[i].strForm;\n\n          if (this.optIncludeUnknowns) {\n            combinedTokens.push(new TokenId(unknownTokenName, null));\n            unknownTokenName = \"\";\n            continue;\n          } else {\n            throw new Error(\"Parser: token '\" + unknownTokenName + \"' is not a recognized symbol.\");\n          }\n        }\n      }\n\n      // Append.\n      else if (!(tokensList[i] instanceof TokenOp || tokensList[i] instanceof TokenSym)) {\n        if (unknownTokenName !== \"\" || !(tokensList[i] instanceof TokenNum)) {\n          unknownTokenName += tokensList[i].strForm;\n          continue;\n        }\n      }\n\n      // Add other tokens, favoring subtraction over negation.\n      if (tokensList[i] === this.Neg) {\n        combinedTokens.push(this.Sub);\n      } else {\n        combinedTokens.push(tokensList[i]);\n      }\n    }\n\n    return combinedTokens;\n  }\n}\n","import { getActionGuid } from \"./reduxTools\";\n\nexport const actions = {\n  newStory: getActionGuid(),\n  rerenderStory: getActionGuid(),\n  saveAndRunStory: getActionGuid(),\n  updateStory: getActionGuid(),\n};\n\n/** Starts a new story, resetting all values to default. */\nexport const newStory = {\n  type: actions.newStory,\n};\n\n/** Re-renders the visual state of the interpreter.  */\nexport const rerenderStory = {\n  type: actions.rerenderStory,\n};\n\n/** Runs the story and save as needed. */\nexport const saveAndRunStory = (story: string) => {\n  return {\n    story,\n    type: actions.saveAndRunStory,\n  };\n};\n\n/** Updates the contents of the story. */\nexport const updateStory = (story: string) => {\n  return {\n    story,\n    type: actions.updateStory,\n  };\n};\n","let uniqueActionType = Number.MIN_SAFE_INTEGER;\n\n/**\n * Action types must be unique across all reducers.\n * This assigns a globally unique id every time it's called.\n */\nexport const getActionGuid = () => {\n  return (++uniqueActionType).toString();\n};\n\n/** The expected type of any action. */\nexport interface IAction {\n  type: string;\n}\n","// TODO: localize Play and New buttons\n\nimport { DefaultButton } from \"office-ui-fabric-react\";\nimport * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { RouteComponentProps, withRouter } from \"react-router-dom\";\nimport { commandIds, invokeCommand } from \"../../common/commands/CommandHandler\";\nimport { routes } from \"../../common/routing/Routing\";\nimport { welcomeButtonStyle } from \"../../common/styles/controlStyles\";\nimport { IRootState } from \"../../store\";\n\nconst mapStateToProps = (state: IRootState) => {\n  return {\n    theme: state.settings.theme,\n  };\n};\n\ntype WelcomeOwnProps = {};\ntype CombinedProps = WelcomeOwnProps & RouteComponentProps & ReturnType<typeof mapStateToProps>;\n\nexport class WelcomeC extends React.Component<CombinedProps> {\n  public render() {\n    const buttonStyle = welcomeButtonStyle((this.props as CombinedProps).theme.theme);\n    return (\n      <div\n        style={{\n          alignContent: \"center\",\n          display: \"flex\",\n          flexDirection: \"column\",\n          height: \"90vh\",\n          justifyContent: \"center\",\n        }}\n      >\n        <div style={{ display: \"flex\", justifyContent: \"center\" }}>\n          <DefaultButton onClick={this.onClickLoadGame} styles={buttonStyle}>\n            Open & Play\n          </DefaultButton>\n        </div>\n        <div style={{ display: \"flex\", justifyContent: \"center\" }}>\n          <DefaultButton onClick={this.onClickLoadProject} styles={buttonStyle}>\n            Open & Edit\n          </DefaultButton>\n        </div>\n        <div style={{ display: \"flex\", justifyContent: \"center\" }}>\n          <DefaultButton onClick={this.onClickNew} styles={buttonStyle}>\n            New\n          </DefaultButton>\n        </div>\n      </div>\n    );\n  }\n\n  private onClickLoadGame = () => {\n    invokeCommand(commandIds.openProjectOrGame, {\n      data: {\n        data: () => {\n          this.props.history.push(routes.play);\n        },\n      },\n    });\n  };\n\n  private onClickLoadProject = () => {\n    invokeCommand(commandIds.openProjectOrGame, {\n      data: {\n        data: () => {\n          this.props.history.push(routes.edit);\n        },\n      },\n    });\n  };\n\n  private onClickNew = () => {\n    invokeCommand(commandIds.newProject, { data: this.props.history });\n    this.props.history.push(routes.edit);\n  };\n}\n\nexport const Welcome = connect(mapStateToProps)(withRouter(WelcomeC));\n","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { idEditorInputfield } from \"../../common/identifiers\";\nimport { dispatchSaveAndRunStory, dispatchSetStory } from \"../../common/redux/viewedit.reducers\";\nimport { IRootState } from \"../../store\";\nimport { editorTextAreaStyle } from \"../../common/styles/controlStyles\";\nimport { PrimaryButton } from \"office-ui-fabric-react/lib/components/Button/PrimaryButton/PrimaryButton\";\nimport { getStrings } from \"../../common/localization/Localization\";\n\nconst mapStateToProps = (state: IRootState) => {\n  return {\n    story: state.viewEdit.story,\n    strings: getStrings(state.settings.locale),\n    theme: state.settings.theme,\n  };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch) => {\n  return {\n    saveAndRunStory: dispatchSaveAndRunStory(dispatch),\n    setStory: dispatchSetStory(dispatch),\n  };\n};\n\nexport type EditorViewOwnProps = {};\n\ntype CombinedProps = EditorViewOwnProps & ReturnType<typeof mapStateToProps> & ReturnType<typeof mapDispatchToProps>;\n\nexport class EditorViewC extends React.Component<EditorViewOwnProps> {\n  public componentDidUpdate(prevProps: EditorViewOwnProps) {\n    if ((this.props as CombinedProps).story !== (prevProps as CombinedProps).story) {\n      const textArea = document.getElementById(idEditorInputfield) as HTMLTextAreaElement | undefined;\n\n      if (textArea) {\n        textArea.value = (this.props as CombinedProps).story;\n      }\n    }\n  }\n\n  public render() {\n    const combinedProps = this.props as CombinedProps;\n\n    return (\n      <>\n        <textarea\n          defaultValue={(this.props as CombinedProps).story}\n          style={editorTextAreaStyle((this.props as CombinedProps).theme.theme)}\n          id={idEditorInputfield}\n          onBlur={this.updateStory}\n        />\n        <div style={{ display: \"flex\", flexDirection: \"row-reverse\" }}>\n          <PrimaryButton\n            styles={{ root: { display: \"block\" } }}\n            text={combinedProps.strings.EditorPlay}\n            onClick={this.runStory}\n          />\n        </div>\n      </>\n    );\n  }\n\n  private runStory = () => {\n    const currentStory = (document.getElementById(idEditorInputfield) as HTMLTextAreaElement).value;\n    (this.props as CombinedProps).saveAndRunStory(currentStory);\n  };\n\n  private updateStory = (ev: React.FocusEvent<HTMLTextAreaElement>) => {\n    if ((this.props as CombinedProps).story !== ev.currentTarget.value) {\n      (this.props as CombinedProps).setStory(ev.currentTarget.value);\n    }\n  };\n}\n\nexport const EditorView = connect(mapStateToProps, mapDispatchToProps)(EditorViewC);\n","/**\n * Contains text to execute if its conditions are met, with links to the parent and child nodes.\n */\nexport class StoryParseNode {\n  /** Contains a list of conditions to be met for text to be considered. */\n  public condition: string;\n\n  /** Contains text to be processed only if the conditions are met. */\n  public text: string;\n\n  /** References the parent node, if any. */\n  public parent: StoryParseNode | null;\n\n  /** References the child nodes, if any. */\n  public children: StoryParseNode[];\n\n  constructor() {\n    this.condition = \"\";\n    this.text = \"\";\n    this.parent = null;\n    this.children = [];\n  }\n}\n","import { StoryParseNode } from \"./storyParseNode\";\nimport { StoryInterpreterC } from \"./storyInterpreter\";\n\n// TODO: localize strings in this file.\n\nconst doubleSlashRegex = /\\/\\//g;\nconst ifRegex = /\\bif\\b/g;\nconst endIfRegex = /\\bendif\\b/g;\n\n/** Maps named pages to nodes. */\nexport interface IPageDictionary {\n  [key: string]: StoryParseNode;\n}\n\n/**\n * Returns whether the substring formed by the index and length is on the same line as an @ symbol.\n * Does not support nesting.\n */\nfunction isOption(text: string, index: number) {\n  let startOfLine = text.substring(0, index).lastIndexOf(\"\\n\");\n\n  if (startOfLine === -1) {\n    startOfLine = 0;\n  }\n\n  let endOfLine = text.substring(index).indexOf(\"\\n\");\n\n  if (endOfLine === -1) {\n    endOfLine = text.length - 1;\n  }\n\n  endOfLine += index;\n  const line = text.substring(startOfLine, endOfLine);\n\n  return line.includes(\"@\");\n}\n\n/**\n * Returns whether the substring formed by the index and length is in curly brackets in the given\n * text. Does not support nesting.\n */\nfunction isOutput(text: string, index: number) {\n  const beforeSubstring = text.substring(0, index);\n  const bracketOpenPos = beforeSubstring.lastIndexOf(\"{\");\n  const bracketClosePos = beforeSubstring.lastIndexOf(\"}\");\n\n  if (bracketOpenPos < bracketClosePos || bracketOpenPos === -1) {\n    return false;\n  }\n\n  return true;\n}\n\n/** Updates the passed-in interpreter with a node tree for each fork. */\nexport function parseStory(story: string, interpreter: StoryInterpreterC | null, forkToLoad?: string) {\n  const entries: { [key: string]: string } = {};\n  const parsed: { [key: string]: StoryParseNode } = {};\n\n  const entryPositions: number[] = [];\n  const newlineSplitStory = story.split(\"\\n\");\n\n  if (newlineSplitStory.length === 0) {\n    interpreter?.setEntries({});\n    interpreter?.setErrorMessage(\"Parser: Story is blank. The story must not be blank to parse it.\");\n  }\n\n  // Finds fork header positions, normalizes line endings, and removes excess space.\n  for (let i = 0; i < newlineSplitStory.length; i++) {\n    newlineSplitStory[i] = newlineSplitStory[i].replace(\"\\r\", \"\").trim();\n\n    if (newlineSplitStory[i].startsWith(\"@\")) {\n      entryPositions.push(i);\n    }\n  }\n\n  // Interprets all text up to the first header as game options.\n  let header = \"\";\n\n  if (entryPositions.length > 0) {\n    for (let i = 0; i < entryPositions[0]; i++) {\n      header += newlineSplitStory[i] + \"\\n\";\n    }\n\n    interpreter?.processHeaderOptions(header);\n  }\n\n  // Splits entries into a dictionary.\n  for (let i = 0; i < entryPositions.length; i++) {\n    // Prevents unnamed entries.\n    if (newlineSplitStory[entryPositions[i]].length < 2) {\n      interpreter?.setErrorMessage(\n        \"Parser: Entry\" + newlineSplitStory[entryPositions[i]] + \"must be at least 1 character long.\"\n      );\n\n      continue;\n    }\n\n    // Stores the fork header name, content, and content by line.\n    let entryName = newlineSplitStory[entryPositions[i]].substring(1);\n    let entryList: string[] = [];\n    let entry = \"\";\n\n    // Associates forks with their content.\n    if (i === entryPositions.length - 1) {\n      entryList = newlineSplitStory.slice(entryPositions[i], newlineSplitStory.length);\n    } else {\n      entryList = newlineSplitStory.slice(entryPositions[i], entryPositions[i + 1]);\n    }\n\n    // Concatenates each line of text.\n    for (let j = 1; j < entryList.length; j++) {\n      entry += entryList[j] + \"\\n\";\n    }\n\n    entryName = entryName.replace(/\\s+/g, \"\").toLowerCase();\n\n    if (entries[entryName] !== undefined) {\n      interpreter?.setErrorMessage(`Parser: Entry called '${entryName}' already exists.`);\n    } else {\n      entries[entryName] = entry;\n    }\n  }\n\n  // Removes single-line comments from entries.\n  const entriesKeys = Object.keys(entries);\n  for (let i = 0; i < entriesKeys.length; i++) {\n    let isFinished: boolean;\n    let entry = entries[entriesKeys[i]];\n\n    do {\n      isFinished = true;\n\n      let match: RegExpExecArray | null = null;\n\n      // Determines if candidates are output text or commands.\n      while ((match = doubleSlashRegex.exec(entry)) !== null) {\n        const pos = match.index;\n\n        // Real comments are removed.\n        if (!isOutput(entry, pos) && !isOption(entry, pos)) {\n          entry = entry.slice(pos, entry.substring(pos).indexOf(\"\\n\"));\n\n          // Comment indices are invalidated. Search again as long as comments might exist (until\n          // all are found // instances are output text).\n          isFinished = false;\n          break;\n        }\n      }\n    } while (!isFinished);\n\n    // Sets the entry.\n    entries[entriesKeys[i]] = entry;\n  }\n\n  // Creates a parse tree.\n  for (let i = 0; i < entriesKeys.length; i++) {\n    const root = new StoryParseNode();\n    let node = root;\n    let depth = 0;\n\n    // The full entry.\n    const text = entries[entriesKeys[i]];\n\n    // Finds all if and endif words.\n    let ifMatches: RegExpExecArray[] = [];\n    let endIfMatches: RegExpExecArray[] = [];\n    let match: RegExpExecArray | null = null;\n    const ifs: number[] = [];\n    const endifs: number[] = [];\n\n    // Determines if candidates are output text or commands.\n    while ((match = ifRegex.exec(text)) !== null) {\n      ifMatches.push(match);\n    }\n\n    while ((match = endIfRegex.exec(text)) !== null) {\n      endIfMatches.push(match);\n    }\n\n    // Filters out if and endif words that are part of output text.\n    for (let j = 0; j < ifMatches.length; j++) {\n      if (!isOutput(text, ifMatches[j].index) && !isOption(text, ifMatches[j].index)) {\n        ifs.push(ifMatches[j].index);\n      }\n    }\n\n    for (let j = 0; j < endIfMatches.length; j++) {\n      if (!isOutput(text, endIfMatches[j].index) && !isOption(text, endIfMatches[j].index)) {\n        endifs.push(endIfMatches[j].index);\n      }\n    }\n\n    // Ensures the number of if and endif statements match.\n    if (ifs.length !== endifs.length) {\n      interpreter?.setErrorMessage(\n        `Parser: found ${ifs.length} if tokens, but ${endifs.length} ` +\n          \"endif tokens. Ifs and endifs must match in number.\"\n      );\n    }\n\n    // Creates a list of all if and endif statements by index, where ifs are encoded by 0 and endifs by 1.\n    let allMatches: { item1: number; item2: number }[] = [];\n\n    for (let j = 0; j < ifs.length; j++) {\n      allMatches.push({ item1: ifs[j], item2: 0 });\n    }\n\n    for (let j = 0; j < endifs.length; j++) {\n      allMatches.push({ item1: endifs[j], item2: 1 });\n    }\n\n    // Orders all ifs and endifs in ascending order by index.\n    allMatches = allMatches.sort((a, b) => (a.item1 > b.item1 ? 1 : -1));\n\n    // Iterates over all ifs and endifs to create a tree.\n    for (let j = 0; j < allMatches.length; j++) {\n      // The index, condition, and type (if, endif) of the match.\n      let elemBegin = allMatches[j].item1;\n      let elemType = allMatches[j].item2;\n      let cond = text.substring(elemBegin);\n      cond = cond.slice(0, cond.indexOf(\"\\n\"));\n\n      // The index and condition of the previous if.\n      let prevIfBegin = -1;\n      let prevIfCond = \"\";\n\n      for (let k = j - 1; k >= 0; k--) {\n        if (allMatches[k].item2 === 0) {\n          prevIfBegin = allMatches[k].item1;\n          prevIfCond = text.substring(prevIfBegin);\n          prevIfCond = prevIfCond.slice(0, prevIfCond.indexOf(\"\\n\"));\n          break;\n        }\n      }\n\n      // The index and condition of the previous endif.\n      let prevEndIfBegin = -1;\n      let prevEndIfCond = \"\";\n\n      for (let k = j - 1; k >= 0; k--) {\n        if (allMatches[k].item2 === 1) {\n          prevEndIfBegin = allMatches[k].item1;\n          prevEndIfCond = text.substring(prevEndIfBegin);\n          prevEndIfCond = prevEndIfCond.slice(0, prevEndIfCond.indexOf(\"\\n\"));\n          break;\n        }\n      }\n\n      // Uses the previous if/endif; whichever is closer.\n      let prevElemBegin = prevEndIfBegin > prevIfBegin ? prevEndIfBegin : prevIfBegin;\n      let prevElemCond = prevElemBegin === prevEndIfBegin ? prevEndIfCond : prevIfCond;\n\n      // Handles if keywords.\n      if (elemType === 0) {\n        // Adds text between matched keywords. If text was simply concatenated, it wouldn't preserve order.\n        if (j !== 0 && prevIfBegin !== -1) {\n          // From if to last if.\n          let textNode = new StoryParseNode();\n          textNode.parent = node;\n\n          // Determines if the length is negative.\n          const prevElemEnd = prevElemBegin + prevElemCond.length;\n\n          if (elemBegin - prevElemEnd < 0) {\n            interpreter?.setErrorMessage(\n              `Parser: In '${text.substring(prevElemBegin)}', cannot specify multiple if tokens on one line.`\n            );\n\n            continue;\n          }\n\n          textNode.text += text.substring(prevElemEnd, elemBegin);\n\n          if (!(textNode.children.length === 0 && textNode.condition.trim() === \"\" && textNode.text.trim() === \"\")) {\n            node.children.push(textNode);\n          }\n        } else if (elemBegin > 0) {\n          // From start of entry to if.\n          const textNode = new StoryParseNode();\n          textNode.parent = node;\n          textNode.text += text.substring(0, elemBegin);\n\n          if (!(textNode.children.length === 0 && textNode.condition.trim() === \"\" && textNode.text.trim() === \"\")) {\n            node.children.push(textNode);\n          }\n        }\n\n        // Creates a child node and sets its parent.\n        const newChild = new StoryParseNode();\n        newChild.parent = node;\n\n        // Adds the found if statement to the conditions list.\n        newChild.condition = cond;\n\n        // Adds the child node and moves node to point to it.\n        if (!(newChild.children.length === 0 && newChild.condition.trim() === \"\" && newChild.text.trim() === \"\")) {\n          node.children.push(newChild);\n        }\n\n        node = newChild;\n        depth++;\n      }\n\n      // Handles endif keywords.\n      else if (elemType === 1) {\n        // The parser always returns since it cannot continue.\n        if (depth < 0) {\n          interpreter?.setEntries({});\n          interpreter?.setErrorMessage(\"Parser: an extra endif token was encountered (if/endif # \" + (j + 1) + \").\");\n\n          return;\n        }\n\n        // Adds text between matched keywords.\n        const textNode = new StoryParseNode();\n        textNode.parent = node;\n\n        // Determines if the length is negative.\n        const prevElemEnd = prevElemBegin + prevElemCond.length;\n        if (elemBegin - prevElemEnd < 0) {\n          interpreter?.setErrorMessage(\n            \"Parser: In '\" + text.substring(prevElemBegin) + \"', cannot specify multiple endif tokens on one line.\"\n          );\n\n          continue;\n        }\n\n        textNode.text += text.substring(prevElemEnd, elemBegin);\n\n        if (!(textNode.children.length === 0 && textNode.condition.trim() === \"\" && textNode.text.trim() === \"\")) {\n          node.children.push(textNode);\n        }\n\n        // Points to the node's parent if possible.\n        if (node.parent !== null) {\n          node = node.parent;\n        } else {\n          interpreter?.setEntries({});\n          interpreter?.setErrorMessage(\"Parser: an extra endif token was encountered (endif #\" + j + \").\");\n\n          return;\n        }\n      }\n    }\n\n    // Adds all text after last if/endif to the first node.\n    if (allMatches.length > 0) {\n      let lastElemBegin = allMatches[allMatches.length - 1].item1;\n      let lastCond = text.substring(lastElemBegin);\n      let lastCondLength = lastCond.indexOf(\"\\n\");\n\n      /**\n       * Since commands must be on their own lines, if there is no newline after the last command,\n       * it's the last line in the entry. This means there's nothing after it. So the last\n       * condition executes only if this is false.\n       */\n      if (lastCondLength !== -1) {\n        let textNode = new StoryParseNode();\n        textNode.parent = root;\n        textNode.text += text.substring(lastElemBegin + lastCondLength);\n\n        if (!(textNode.children.length === 0 && textNode.condition.trim() === \"\" && textNode.text.trim() === \"\")) {\n          root.children.push(textNode);\n        }\n      }\n    } else {\n      // Adds all text to the first node in the case that there were no ifs.\n      root.text += text;\n    }\n\n    // Adds the fully constructed entry.\n    parsed[entriesKeys[i]] = root;\n  }\n\n  interpreter?.setEntriesWithFork(parsed, forkToLoad ?? \"\");\n}\n","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { StoryInterpreterC, StoryInterpreter } from \"../../parse-story/storyInterpreter\";\nimport { parseStory } from \"../../parse-story/storyParser\";\nimport { IRootState } from \"../../store\";\n\nconst mapStateToProps = (state: IRootState) => {\n  return {\n    renderTrigger: state.viewEdit.storyReparseToken, // Needed to re-render without story changing.\n    storyToParse: state.viewEdit.storyToParse,\n  };\n};\n\ntype RunnerViewOwnProps = {};\n\ntype CombinedProps = RunnerViewOwnProps & ReturnType<typeof mapStateToProps>;\n\nexport class RunnerViewC extends React.Component<RunnerViewOwnProps> {\n  private interpreterRef: StoryInterpreterC | null = null;\n\n  public componentDidUpdate() {\n    this.parse();\n  }\n\n  public render() {\n    return <StoryInterpreter ref={this.setInterpreterRef} />;\n  }\n\n  private setInterpreterRef = (ref: StoryInterpreterC | null) => {\n    if (ref !== null) {\n      this.interpreterRef = ref;\n      this.parse();\n    }\n  };\n\n  /** Parses the story with the given interpreter. */\n  private parse() {\n    if (this.interpreterRef === null) {\n      return;\n    }\n\n    try {\n      parseStory((this.props as CombinedProps).storyToParse, this.interpreterRef);\n    } catch (ex) {\n      if (typeof ex === \"string\") {\n        this.interpreterRef.setErrorMessage(ex);\n      } else if (ex instanceof Error) {\n        this.interpreterRef.setErrorMessage(ex.message);\n      }\n    }\n  }\n}\n\nexport const RunnerView = connect(mapStateToProps)(RunnerViewC);\n","import * as React from \"react\";\nimport { idEditorWrapper, idRunnerWrapper } from \"../../common/identifiers\";\nimport { mainViewWrapperStyle, mainViewEditorStyle, mainViewRunnerStyle } from \"../../common/styles/controlStyles\";\nimport { connect } from \"react-redux\";\nimport { IRootState } from \"../../store\";\nimport { EditorView } from \"../editor/EditorView\";\nimport { RunnerView } from \"../runner/RunnerView\";\n\nconst mapStateToProps = (state: IRootState) => {\n  return {\n    theme: state.settings.theme,\n  };\n};\n\nexport type RunnerEditorOwnProps = {};\n\ntype CombinedProps = RunnerEditorOwnProps & ReturnType<typeof mapStateToProps>;\n\nexport class RunnerEditorViewC extends React.Component<RunnerEditorOwnProps> {\n  public render() {\n    return (\n      <>\n        <div className={mainViewWrapperStyle}>\n          <div id={idEditorWrapper} className={mainViewEditorStyle}>\n            <EditorView />\n          </div>\n          <div id={idRunnerWrapper} style={mainViewRunnerStyle((this.props as CombinedProps).theme.theme) as object}>\n            <RunnerView />\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n\nexport const RunnerEditorView = connect(mapStateToProps)(RunnerEditorViewC);\n","import { ILocalizedStringSets } from \"../localization/Localization\";\nimport { getActionGuid } from \"../redux/reduxTools\";\nimport { ISupportedTheme } from \"../themes\";\n\nexport const actions = {\n  setLocale: getActionGuid(),\n  setTheme: getActionGuid(),\n};\n\n/** Action creator to store name of preferred color theme. */\nexport const setTheme = (theme: ISupportedTheme) => {\n  return {\n    theme,\n    type: actions.setTheme,\n  };\n};\n\n/** Action creator to store (lowercase) preferred locale id such as en-us. */\nexport const setLocale = (localeId: keyof ILocalizedStringSets) => {\n  return {\n    localeId,\n    type: actions.setLocale,\n  };\n};\n","import { combineReducers, Dispatch } from \"redux\";\nimport { getSupportedLocale, ILocalizedStringSets } from \"../localization/Localization\";\nimport { ISupportedTheme, Themes, themes } from \"../themes\";\nimport { actions, setLocale, setTheme } from \"./settings.actions\";\nimport { loadTheme } from \"office-ui-fabric-react/lib/Styling\";\n\n/** The user's preferred theme. An empty string here should mean the default theme is applied. */\nconst theme = (state: ISupportedTheme = themes[Themes.DefaultLight], action: ReturnType<typeof setTheme>) => {\n  if (action.type === actions.setTheme && state.theme !== action.theme.theme) {\n    loadTheme(action.theme.theme);\n    return action.theme;\n  }\n\n  return state;\n};\n\n/** Sets the full theme based on a partial theme and injects it to update components. */\nexport const dispatchSetTheme = (dispatch: Dispatch) => async (supportedTheme: ISupportedTheme) => {\n  document.body.style.backgroundColor = supportedTheme.theme.semanticColors.bodyBackground;\n  dispatch(setTheme(supportedTheme));\n};\n\n/** The user's preferred language. */\nconst locale = (state = getSupportedLocale(), action: ReturnType<typeof setLocale>) => {\n  if (action.type === actions.setLocale) {\n    return action.localeId;\n  }\n\n  return state;\n};\n\n/** Sets the locale id in lowercase, such as en-us. */\nexport const dispatchSetLocale = (dispatch: Dispatch) => async (localeId: keyof ILocalizedStringSets) => {\n  dispatch(setLocale(localeId));\n};\n\n// Combine reducers and typescript definition.\nexport interface ISettingState {\n  locale: keyof ILocalizedStringSets;\n  theme: ISupportedTheme;\n}\n\nexport const settings = combineReducers({\n  locale,\n  theme,\n});\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { RouteComponentProps, withRouter } from \"react-router-dom\";\nimport { IRootState } from \"../../store\";\nimport { ILocalizedStringSets } from \"../localization/Localization\";\nimport { Themes, themes } from \"../themes\";\n\nconst persistStateVersion = 1;\nconst persistStateIdentifier = \"JoshuaTree\";\n\n/** The object states to persist to local storage. */\ninterface IPersistentState {\n  localeId: keyof ILocalizedStringSets;\n  saveFormatVersion: number;\n  theme: keyof typeof themes;\n}\n\n/** The state variables that, when changed, trigger an attempt to save to local storage. */\ninterface ISaveToLocalStorageProps {\n  theme: IRootState[\"settings\"][\"theme\"];\n  locale: IRootState[\"settings\"][\"locale\"];\n  userConsentProvided: IRootState[\"persistence\"][\"userConsentProvided\"];\n}\n\n/**\n * Saves the given state to local storage. Users must accept the storage policy for data that\n * isn't essential to the service or anything that helps identify an individual.\n */\nconst saveToLocalStorage = (state: ISaveToLocalStorageProps) => {\n  if (!state.userConsentProvided) {\n    return;\n  }\n\n  let theme = Themes.DefaultLight;\n  const themeKeys = (Object.keys(themes) as unknown) as (keyof typeof themes)[];\n\n  themeKeys.forEach((key: Themes) => {\n    const candidateThemeName = themes[key].localizedName;\n    if (candidateThemeName === state.theme.localizedName) {\n      theme = key;\n    }\n  });\n\n  const newState: IPersistentState = {\n    localeId: state.locale,\n    saveFormatVersion: persistStateVersion,\n    theme: theme,\n  };\n\n  localStorage.setItem(persistStateIdentifier, JSON.stringify(newState));\n};\n\n/**\n * Loads the given state from local storage. Users must have accepted the storage policy for data\n * that isn't essential to the service or anything that helps identify an individual. Returns null\n * if a key isn't found. The state returned on success contains all keys, though their values\n * aren't checked for accuracy.\n */\nexport const loadFromLocalStorage = (): IPersistentState | null => {\n  const loadedState = localStorage.getItem(persistStateIdentifier);\n  if (loadedState === null) {\n    return null;\n  }\n\n  let returnedState: Partial<IPersistentState> = {};\n\n  try {\n    returnedState = JSON.parse(loadedState) as Partial<IPersistentState>;\n  } catch {\n    return null;\n  }\n\n  // All keys must exist before the state can be considered complete.\n  if (!returnedState.localeId || !returnedState.theme || !returnedState.saveFormatVersion) {\n    return null;\n  }\n\n  return returnedState as IPersistentState;\n};\n\nconst mapStateToProps = (state: IRootState): ISaveToLocalStorageProps => {\n  return {\n    locale: state.settings.locale,\n    theme: state.settings.theme,\n    userConsentProvided: state.persistence.userConsentProvided,\n  };\n};\n\ntype LocalStorageSaveHandlerOwnProps = {};\ntype LocalStorageSaveHandlerPropsWithRouteInfo = LocalStorageSaveHandlerOwnProps & RouteComponentProps;\ntype CombinedProps = LocalStorageSaveHandlerPropsWithRouteInfo & ReturnType<typeof mapStateToProps>;\n\nexport class LocalStorageSaveHandlerC extends React.Component<LocalStorageSaveHandlerPropsWithRouteInfo> {\n  public componentDidUpdate(prevProps: CombinedProps) {\n    const props = this.props as CombinedProps;\n\n    /**\n     * Any change of value connected to this component should trigger a save to local storage if allowed, except\n     * userConsentProvided.\n     */\n    if (prevProps.userConsentProvided === props.userConsentProvided) {\n      saveToLocalStorage(this.props as CombinedProps);\n    }\n  }\n\n  public render() {\n    return <></>;\n  }\n}\n\n/** Hooks up actions, some of which require current state or history, to commands. */\nexport const LocalStorageSaveHandler = connect(mapStateToProps)(withRouter(LocalStorageSaveHandlerC));\n","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { commandBarDropdownStyle } from \"../../common/styles/controlStyles\";\nimport { IDropdownProps, IDropdownStyles } from \"office-ui-fabric-react/lib/components/Dropdown/Dropdown.types\";\nimport { Dropdown } from \"office-ui-fabric-react/lib/components/Dropdown/Dropdown\";\nimport { IRootState } from \"../../store\";\n\nconst mapStateToProps = (state: IRootState) => {\n  return {\n    theme: state.settings.theme,\n  };\n};\n\n/** Main props associated with the MenuBarDropdown. */\nexport interface CommandBarDropdownProps {\n  dropdown: IDropdownProps;\n}\n\ntype CombinedProps = ReturnType<typeof mapStateToProps> & CommandBarDropdownProps;\n\n/** Renders a theme-connected dropdown styled for inclusion in the main command bar. */\nclass CommandBarDropdownC extends React.Component<CommandBarDropdownProps> {\n  public render() {\n    const { styles, ...props } = (this.props as CombinedProps).dropdown;\n    const stylesTyped = styles as IDropdownStyles;\n\n    return (\n      <Dropdown {...props} styles={commandBarDropdownStyle((this.props as CombinedProps).theme.theme, stylesTyped)} />\n    );\n  }\n}\n\nexport const CommandBarDropdown = connect(mapStateToProps)(CommandBarDropdownC);\n","import * as React from \"react\";\nimport { getTheme } from \"office-ui-fabric-react/lib/Styling\";\nimport { ICommandBarItemProps } from \"office-ui-fabric-react/lib/components/CommandBar/CommandBar.types\";\nimport { IDropdownOption } from \"office-ui-fabric-react/lib/components/Dropdown/Dropdown.types\";\nimport { Icon } from \"office-ui-fabric-react/lib/components/Icon/Icon\";\nimport { getStrings } from \"../../common/localization/Localization\";\nimport { localizedStrings } from \"../../common/localization/LocalizedStrings\";\nimport { dispatchSetLocale, dispatchSetTheme } from \"../../common/settings/settings.reducers\";\nimport {\n  iconSpaceBeforeTextStyle,\n  commandBarDropdownSeparatorStyle,\n  commandBarDropdownButtonStyle,\n} from \"../../common/styles/controlStyles\";\nimport { themes, ISupportedTheme } from \"../../common/themes\";\nimport { IRootState } from \"../../store\";\nimport { CommandBarDropdown } from \"./MenuBarDropdown\";\n\ninterface IValues {\n  locale: IRootState[\"settings\"][\"locale\"];\n  reduxState: IRootState;\n  strings: ReturnType<typeof getStrings>;\n  themeName: IRootState[\"settings\"][\"theme\"][\"localizedName\"];\n  userConsentProvided: IRootState[\"persistence\"][\"userConsentProvided\"];\n  wholeTheme: ReturnType<typeof getTheme>;\n  setLocale: ReturnType<typeof dispatchSetLocale>;\n  setTheme: ReturnType<typeof dispatchSetTheme>;\n}\n\n/** Returns command bar items that should be globally available. */\nexport const getCommonCommandItems = (values: IValues): ICommandBarItemProps[] => {\n  /** Renders the dropdown for the locale picker control. */\n  const renderLocaleDropdown = () => {\n    const options: IDropdownOption[] = [];\n\n    // Populates the available locales.\n    Object.keys(localizedStrings).forEach((localeOption: string) => {\n      options.push({\n        data: localeOption,\n        key: getLocaleDropdownOptionKey(localeOption),\n        text: localizedStrings[localeOption as keyof typeof localizedStrings].LanguageCodeName,\n      });\n    });\n\n    /** Switches all GUI to display in the user-chosen language. */\n    const updateChangedLocale = (_: React.FormEvent<HTMLDivElement>, option?: IDropdownOption) => {\n      if (option !== undefined) {\n        const localeId = option.data as keyof typeof localizedStrings;\n        values.setLocale(localeId);\n      }\n    };\n\n    /** Renders the locale dropdown and name of the currently-chosen language. */\n    const renderDropdownTitle = () => (\n      <>\n        <Icon iconName=\"LocaleLanguage\" styles={iconSpaceBeforeTextStyle} />\n        <span style={{ fontSize: `${values.wholeTheme.fonts.large}` }}>\n          {localizedStrings[values.locale].LanguageCodeName}\n        </span>\n      </>\n    );\n\n    return (\n      <CommandBarDropdown\n        dropdown={{\n          defaultSelectedKey: getLocaleDropdownOptionKey(values.locale),\n          onRenderTitle: renderDropdownTitle,\n          options: options,\n          onChange: updateChangedLocale,\n        }}\n      />\n    );\n  };\n\n  /** Renders the dropdown for the theme picker control. */\n  const renderThemeDropdown = () => {\n    const options: IDropdownOption[] = [];\n\n    // Populates the available themes.\n    Object.keys(themes).forEach((themeKey: string) => {\n      const theme = themes[(themeKey as unknown) as keyof typeof themes];\n\n      options.push({\n        data: theme,\n        key: getThemeDropdownOptionKey(theme.localizedName),\n        text: theme.localizedName,\n      });\n    });\n\n    /** Switches all GUI to display with the chosen theme. */\n    const updateChangedTheme = (_: React.FormEvent<HTMLDivElement>, option?: IDropdownOption) => {\n      if (option !== undefined) {\n        const theme = option.data as ISupportedTheme;\n        values.setTheme(theme);\n      }\n    };\n\n    /** Renders the theme dropdown and name of the currently-chosen theme. */\n    const renderDropdownTitle = () => (\n      <span style={{ fontSize: `${values.wholeTheme.fonts.large}` }}>\n        {values.strings.ThemeDropdownText(values.themeName)}\n      </span>\n    );\n\n    return (\n      <CommandBarDropdown\n        dropdown={{\n          defaultSelectedKey: getThemeDropdownOptionKey(values.themeName),\n          onRenderTitle: renderDropdownTitle,\n          options: options,\n          onChange: updateChangedTheme,\n          styles: commandBarDropdownSeparatorStyle(values.wholeTheme),\n        }}\n      />\n    );\n  };\n\n  // Theme and language options.\n  return [\n    {\n      ariaLabel: values.strings.TipTheme,\n      key: \"userSettingsCommandBarChosenTheme\",\n      onRender: renderThemeDropdown,\n      buttonStyles: commandBarDropdownButtonStyle(),\n    },\n    {\n      ariaLabel: values.strings.TipLanguage,\n      key: \"userSettingsCommandBarChosenLocale\",\n      onRender: renderLocaleDropdown,\n    },\n  ];\n};\n\n/** Generates a key for options in the locale dropdown menu. */\nfunction getLocaleDropdownOptionKey(localeId: string) {\n  return `userSettingsLocaleOptions${localeId}`;\n}\n\n/** Generates a key for options in the theme dropdown menu. */\nfunction getThemeDropdownOptionKey(themeName: string) {\n  return `userSettingsThemeOptions${themeName}`;\n}\n","import * as React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Dispatch } from \"redux\";\r\nimport { getTheme } from \"office-ui-fabric-react/lib/Styling\";\r\nimport { ICommandBarItemProps } from \"office-ui-fabric-react/lib/components/CommandBar/CommandBar.types\";\r\nimport { CommandBar } from \"office-ui-fabric-react/lib/components/CommandBar/CommandBar\";\r\nimport { isOnPage } from \"../../common/routing/Routing\";\r\nimport { IRootState } from \"../../store\";\r\nimport { getStrings } from \"../../common/localization/Localization\";\r\nimport { dispatchSetLocale, dispatchSetTheme } from \"../../common/settings/settings.reducers\";\r\nimport { getEditorCommandItems } from \"../editor/EditorMenuItems\";\r\nimport { commandBarStyle } from \"../../common/styles/controlStyles\";\r\nimport { getRunnerCommandItems } from \"../runner/RunnerMenuItems\";\r\nimport { getCommonCommandItems } from \"./CommonMenuItems\";\r\n\r\nconst mapStateToProps = (state: IRootState) => {\r\n  return {\r\n    locale: state.settings.locale,\r\n    reduxState: state,\r\n    strings: getStrings(state.settings.locale),\r\n    themeName: state.settings.theme.localizedName,\r\n    userConsentProvided: state.persistence.userConsentProvided,\r\n    wholeTheme: getTheme(),\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch) => {\r\n  return {\r\n    setLocale: dispatchSetLocale(dispatch),\r\n    setTheme: dispatchSetTheme(dispatch),\r\n  };\r\n};\r\n\r\ntype MenuBarOwnProps = {};\r\ntype CombinedProps = MenuBarOwnProps & ReturnType<typeof mapStateToProps> & ReturnType<typeof mapDispatchToProps>;\r\n\r\nexport class MenuBarC extends React.Component<MenuBarOwnProps> {\r\n  public render() {\r\n    const combinedProps = this.props as CombinedProps;\r\n\r\n    let items: ICommandBarItemProps[];\r\n    let farItems = getCommonCommandItems(combinedProps);\r\n\r\n    if (isOnPage(\"edit\")) {\r\n      const editorItems = getEditorCommandItems(combinedProps);\r\n      items = editorItems.items;\r\n      farItems = [...editorItems.farItems, ...farItems];\r\n    } else if (isOnPage(\"play\")) {\r\n      const runnerItems = getRunnerCommandItems(combinedProps);\r\n      items = runnerItems.items;\r\n      farItems = [...runnerItems.farItems, ...farItems];\r\n    } else {\r\n      items = [];\r\n    }\r\n\r\n    return (\r\n      <CommandBar\r\n        ariaLabel={combinedProps.strings.TipNavigateCommandBar}\r\n        items={items}\r\n        farItems={farItems}\r\n        styles={commandBarStyle}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport const MenuBar = connect(mapStateToProps, mapDispatchToProps)(MenuBarC);\r\n","import { commandIds, invokeCommand } from \"../../common/commands/CommandHandler\";\nimport { getStrings } from \"../../common/localization/Localization\";\nimport { commandBarItemStyle } from \"../../common/styles/controlStyles\";\nimport { getTheme } from \"office-ui-fabric-react/lib/Styling\";\nimport { ICommandBarItemProps } from \"office-ui-fabric-react/lib/components/CommandBar/CommandBar.types\";\n\ninterface IValues {\n  strings: ReturnType<typeof getStrings>;\n  wholeTheme: ReturnType<typeof getTheme>;\n}\n\n/** Returns command bar items associated with the editor. */\nexport const getEditorCommandItems = (values: IValues) => {\n  const items: ICommandBarItemProps[] = [\n    {\n      className: commandBarItemStyle(values.wholeTheme, true),\n      data: commandIds.newProject,\n      key: \"userSettingsCommandBarFileMenuNew\",\n      name: values.strings.MenuFileNew,\n      iconProps: { iconName: \"FabricNewFolder\" },\n      onClick: () => invokeCommand(commandIds.newProject),\n    },\n    {\n      className: commandBarItemStyle(values.wholeTheme, true),\n      data: commandIds.openProjectOrGame,\n      key: \"userSettingsCommandBarFileMenuOpen\",\n      name: values.strings.MenuFileOpen,\n      iconProps: { iconName: \"OpenFolderHorizontal\" },\n      onClick: () => invokeCommand(commandIds.openProjectOrGame),\n    },\n    {\n      className: commandBarItemStyle(values.wholeTheme),\n      data: commandIds.saveProjectOrGame,\n      key: \"userSettingsCommandBarFileMenuSave\",\n      name: values.strings.MenuFileSave,\n      iconProps: { iconName: \"Save\" },\n      onClick: () => invokeCommand(commandIds.saveProjectOrGame),\n    },\n  ];\n\n  const farItems: ICommandBarItemProps[] = [\n    {\n      className: commandBarItemStyle(values.wholeTheme),\n      data: commandIds.switchMode,\n      key: \"userSettingsCommandBarFileMenuSwitchMode\",\n      tooltipHostProps: { content: values.strings.MenuFileSwitch },\n      iconOnly: true,\n      iconProps: { iconName: \"Switch\" },\n      onClick: () => invokeCommand(commandIds.switchMode),\n    },\n  ];\n\n  return { items, farItems };\n};\n","import { commandIds, invokeCommand } from \"../../common/commands/CommandHandler\";\nimport { getStrings } from \"../../common/localization/Localization\";\nimport { commandBarItemStyle } from \"../../common/styles/controlStyles\";\nimport { getTheme } from \"office-ui-fabric-react/lib/Styling\";\nimport { ICommandBarItemProps } from \"office-ui-fabric-react/lib/components/CommandBar/CommandBar.types\";\n\ninterface IValues {\n  strings: ReturnType<typeof getStrings>;\n  wholeTheme: ReturnType<typeof getTheme>;\n}\n\n/** Returns command bar items associated with the runner. */\nexport const getRunnerCommandItems = (values: IValues) => {\n  const items: ICommandBarItemProps[] = [\n    {\n      className: commandBarItemStyle(values.wholeTheme, true),\n      data: commandIds.openProjectOrGame,\n      key: \"userSettingsCommandBarFileMenuOpen\",\n      name: values.strings.MenuFileOpen,\n      iconProps: { iconName: \"OpenFolderHorizontal\" },\n      onClick: () => invokeCommand(commandIds.openProjectOrGame),\n    },\n    {\n      className: commandBarItemStyle(values.wholeTheme),\n      data: commandIds.saveProjectOrGame,\n      key: \"userSettingsCommandBarFileMenuSave\",\n      name: values.strings.MenuFileSave,\n      iconProps: { iconName: \"Save\" },\n      onClick: () => invokeCommand(commandIds.saveProjectOrGame),\n    },\n  ];\n\n  const farItems: ICommandBarItemProps[] = [\n    {\n      className: commandBarItemStyle(values.wholeTheme),\n      data: commandIds.switchMode,\n      key: \"userSettingsCommandBarFileMenuSwitchMode\",\n      tooltipHostProps: { content: values.strings.MenuFileSwitch },\n      iconOnly: true,\n      iconProps: { iconName: \"Switch\" },\n      onClick: () => invokeCommand(commandIds.switchMode),\n    },\n  ];\n\n  return { items, farItems };\n};\n","import * as React from \"react\";\r\nimport { Route, Switch } from \"react-router\";\r\nimport { Welcome } from \"../../gui/welcome/Welcome\";\r\nimport { RunnerEditorView } from \"../../gui/runner-editor/RunnerEditorView\";\r\nimport { getStrings } from \"../localization/Localization\";\r\nimport { getTheme } from \"office-ui-fabric-react/lib/Styling\";\r\nimport { dispatchSetLocale, dispatchSetTheme } from \"../settings/settings.reducers\";\r\nimport { Dispatch } from \"redux\";\r\nimport { IRootState } from \"../../store\";\r\nimport { connect } from \"react-redux\";\r\nimport { loadFromLocalStorage, LocalStorageSaveHandler } from \"../storage/LocalStorageSaveHandler\";\r\nimport { localizedStrings } from \"../localization/LocalizedStrings\";\r\nimport { themes } from \"../themes\";\r\nimport { OpenFileHandler } from \"../../gui/OpenFileHandler\";\r\nimport { RunnerView } from \"../../gui/runner/RunnerView\";\r\nimport { MenuBar } from \"../../gui/menu/MenuBar\";\r\nimport { CommandHandler } from \"../commands/CommandHandler\";\r\n\r\nexport const routes = {\r\n  base: \"/\",\r\n\r\n  /** Navigates to the runner (player view). */\r\n  play: \"/play\",\r\n\r\n  /** Navigates to the editor (author view). */\r\n  edit: \"/edit\",\r\n};\r\n\r\nconst mapStateToProps = (state: IRootState) => {\r\n  return {\r\n    locale: state.settings.locale,\r\n    strings: getStrings(state.settings.locale),\r\n    themeName: state.settings.theme.localizedName,\r\n    userConsentProvided: state.persistence.userConsentProvided,\r\n    wholeTheme: getTheme(),\r\n  };\r\n};\r\n\r\n/** Returns true when the user is on the named route. */\r\nexport function isOnPage(route: keyof typeof routes) {\r\n  return routes[route] === window.location.hash.replace(/\\?.*/g, \"\").substring(1).toLowerCase();\r\n}\r\n\r\n/** Returns true when the user is playing a game in play mode or one of its subpages. */\r\nexport function isPlayMode() {\r\n  return window.location.hash.substring(1).toLowerCase().startsWith(routes[\"play\"]);\r\n}\r\n\r\n/** Returns true when the user is authoring a game in edit mode or one of its subpages. */\r\nexport function isEditMode() {\r\n  return window.location.hash.substring(1).toLowerCase().startsWith(routes[\"edit\"]);\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch) => {\r\n  return {\r\n    setLocale: dispatchSetLocale(dispatch),\r\n    setTheme: dispatchSetTheme(dispatch),\r\n  };\r\n};\r\n\r\ntype RoutingOwnProps = {};\r\ntype CombinedProps = RoutingOwnProps & ReturnType<typeof mapStateToProps> & ReturnType<typeof mapDispatchToProps>;\r\n\r\nexport class RoutingC extends React.Component<RoutingOwnProps> {\r\n  /** Applies all user setting stored in local storage, if consent was provided. */\r\n  public componentDidMount() {\r\n    if ((this.props as CombinedProps).userConsentProvided) {\r\n      this.applyLocalStorage();\r\n    }\r\n  }\r\n\r\n  public render() {\r\n    return (\r\n      <>\r\n        <OpenFileHandler />\r\n        <LocalStorageSaveHandler />\r\n        <CommandHandler />\r\n        <MenuBar />\r\n        <Switch>\r\n          <Route path={routes.base} exact={true} component={Welcome} />\r\n          <Route path={routes.edit} component={RunnerEditorView} />\r\n          <Route path={routes.play} component={RunnerView} />\r\n        </Switch>\r\n      </>\r\n    );\r\n  }\r\n\r\n  /** Updates redux with content loaded from local storage. */\r\n  private applyLocalStorage = () => {\r\n    const state = loadFromLocalStorage();\r\n    if (state !== null) {\r\n      if (state.localeId in localizedStrings) {\r\n        (this.props as CombinedProps).setLocale(state.localeId);\r\n      }\r\n\r\n      if (themes[state.theme] !== null) {\r\n        (this.props as CombinedProps).setTheme(themes[state.theme]);\r\n      }\r\n    }\r\n  };\r\n}\r\n\r\nexport const Routing = connect(mapStateToProps, mapDispatchToProps)(RoutingC);\r\n","import * as React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Dispatch } from \"redux\";\r\nimport { dispatchRerenderStory, dispatchSaveAndRunStory, dispatchSetStory } from \"../common/redux/viewedit.reducers\";\r\nimport { isPlayMode } from \"../common/routing/Routing\";\r\nimport { hiddenAndInaccessible } from \"../common/styles/controlStyles\";\r\n\r\n/** A callback function after data loads that can be set from command invocation */\r\nlet onLoadedCallback: Function | undefined;\r\n\r\n/**\r\n * Browsers require a click to invoke an open file dialog, so this invokes a click on a hidden\r\n * input element rendered as part of the main command bar. This enables seamless functionality.\r\n */\r\nexport function invokeOpenCommand(afterLoadedCallback?: Function) {\r\n  onLoadedCallback = afterLoadedCallback;\r\n  hiddenInputRef.current?.click();\r\n}\r\n\r\n/** Browsers require a click event on an input control, which is automatically done via this one. */\r\nconst hiddenInputRef = React.createRef<HTMLInputElement>();\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch) => {\r\n  return {\r\n    reRenderStory: dispatchRerenderStory(dispatch),\r\n    saveAndRunStory: dispatchSaveAndRunStory(dispatch),\r\n    setStory: dispatchSetStory(dispatch),\r\n  };\r\n};\r\n\r\nexport type OpenFileHandlerOwnProps = {};\r\ntype CombinedProps = OpenFileHandlerOwnProps & ReturnType<typeof mapDispatchToProps>;\r\n\r\nexport class OpenFileHandlerC extends React.Component<OpenFileHandlerOwnProps> {\r\n  public render() {\r\n    /** Loads the given file to a string for parsing. */\r\n    const handleFile = async (ev: React.ChangeEvent<HTMLInputElement>) => {\r\n      const chosenFiles = ev.target.files;\r\n\r\n      if (chosenFiles) {\r\n        const fileReader = new FileReader();\r\n\r\n        fileReader.onloadend = () => {\r\n          const result = fileReader.result as string;\r\n\r\n          if (isPlayMode()) {\r\n            (this.props as CombinedProps).saveAndRunStory(result);\r\n          } else {\r\n            (this.props as CombinedProps).setStory(result);\r\n          }\r\n\r\n          ev.target.value = \"\"; // Avoids having the browser ignore trying to load the same file twice in a row\r\n\r\n          if (onLoadedCallback) {\r\n            onLoadedCallback();\r\n            onLoadedCallback = undefined;\r\n          }\r\n        };\r\n\r\n        fileReader.onabort = () => {\r\n          onLoadedCallback = undefined;\r\n        };\r\n\r\n        if (chosenFiles[0] instanceof Blob) {\r\n          fileReader.readAsText(chosenFiles[0]);\r\n        }\r\n      }\r\n    };\r\n\r\n    return <input className={hiddenAndInaccessible} onChange={handleFile} ref={hiddenInputRef} type=\"file\" />;\r\n  }\r\n}\r\n\r\nexport const OpenFileHandler = connect(null, mapDispatchToProps)(OpenFileHandlerC);\r\n","import * as React from \"react\";\r\nimport { invokeOpenCommand } from \"../../gui/OpenFileHandler\";\r\nimport { IRootState, store } from \"../../store\";\r\nimport { newStory } from \"../redux/viewedit.actions\";\r\nimport { isEditMode, isPlayMode, routes } from \"../routing/Routing\";\r\nimport { IShortcut } from \"./shortcutManager\";\r\nimport { RouteComponentProps, withRouter } from \"react-router-dom\";\r\nimport { Dispatch } from \"redux\";\r\nimport { connect } from \"react-redux\";\r\n\r\n/** A command is a set of functions executed when the command is invoked by identity. */\r\nexport interface ICommand {\r\n  enableWhileTyping?: boolean;\r\n  functionsToInvoke: ICommandFunction[];\r\n  guid: commandIds;\r\n  shortcuts: IShortcut[];\r\n}\r\n\r\n/** Contains the event object and/or arbitrary data passed to the called command. */\r\nexport interface ICommandFunctionData {\r\n  event?: React.SyntheticEvent;\r\n  data?: any;\r\n}\r\n\r\n/** A function that can be executed by a command. */\r\nexport type ICommandFunction = (data?: ICommandFunctionData) => void;\r\n\r\n/**\r\n * Commands can be invoked by ID or keyboard shortcuts. Users can define shortcuts, making it\r\n * valuable to define frequent or important user actions as commands.\r\n */\r\nexport enum commandIds {\r\n  newProject = \"newProject\",\r\n  openProjectOrGame = \"openProjectOrGame\",\r\n  saveProjectOrGame = \"saveProjectOrGame\",\r\n  switchMode = \"switchMode\",\r\n}\r\n\r\n/** The list of all commands and their default shortcuts. */\r\nexport const commands: { [key in commandIds]: ICommand } = {\r\n  newProject: {\r\n    functionsToInvoke: [],\r\n    guid: commandIds.newProject as commandIds,\r\n    shortcuts: [\r\n      {\r\n        originalSequence: [{ key: \"N\", usesShift: true }],\r\n      },\r\n    ],\r\n  },\r\n  openProjectOrGame: {\r\n    functionsToInvoke: [],\r\n    guid: commandIds.openProjectOrGame as commandIds,\r\n    shortcuts: [\r\n      {\r\n        originalSequence: [{ key: \"O\", usesShift: true }],\r\n      },\r\n    ],\r\n  },\r\n  saveProjectOrGame: {\r\n    functionsToInvoke: [],\r\n    guid: commandIds.saveProjectOrGame as commandIds,\r\n    shortcuts: [\r\n      {\r\n        originalSequence: [{ key: \"S\", usesShift: true }],\r\n      },\r\n    ],\r\n  },\r\n  switchMode: {\r\n    functionsToInvoke: [],\r\n    guid: commandIds.switchMode as commandIds,\r\n    shortcuts: [\r\n      {\r\n        originalSequence: [{ key: \"Q\", usesShift: true }],\r\n      },\r\n    ],\r\n  },\r\n};\r\n\r\n/** Invokes the command with the given ID. */\r\nexport const invokeCommand = (Id: commandIds, data?: ICommandFunctionData) => {\r\n  // Silently consume command invocations that aren't enabled while typing. They still consume keypresses.\r\n  if (\r\n    commands[Id].enableWhileTyping !== true &&\r\n    (document.activeElement?.nodeName.toLowerCase() === \"textarea\" ||\r\n      (document.activeElement?.nodeName.toLowerCase() === \"input\" &&\r\n        document.activeElement.getAttribute(\"type\") === \"text\"))\r\n  ) {\r\n    return;\r\n  }\r\n\r\n  commands[Id].functionsToInvoke.forEach((func: ICommandFunction) => func(data));\r\n};\r\n\r\nconst mapStateToProps = (state: IRootState) => {\r\n  return {};\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch) => {\r\n  return {};\r\n};\r\n\r\ntype CommandHandlerOwnProps = {};\r\ntype CommandHandlerPropsWithRouteInfo = CommandHandlerOwnProps & RouteComponentProps;\r\n\r\nexport class CommandHandlerC extends React.Component<CommandHandlerPropsWithRouteInfo> {\r\n  /** Disabled in play mode. Prompts the author to save unsaved changes, then starts a new project. */\r\n  private actionNewProject() {\r\n    if (isEditMode()) {\r\n      store.dispatch(newStory);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * If in play mode, prompts the player to save unsaved progress, then opens a different game.\r\n   * If in edit mode, prompts the author to save unsaved changes, then opens a different game.\r\n   */\r\n  private actionOpenProjectOrGame(data?: { data?: { callback: Function } }) {\r\n    invokeOpenCommand(data?.data?.callback ?? undefined);\r\n  }\r\n\r\n  /**\r\n   * If in play mode, may prompt the player for a game progress save location, then saves.\r\n   * If in edit mode, may prompt the author for a project save location, then saves.\r\n   */\r\n  private actionSaveProjectOrGame() {\r\n    if (isPlayMode()) {\r\n      alert(\"Invoked file -> save game.\"); //TODO\r\n    } else if (isEditMode()) {\r\n      alert(\"Invoked file -> save project.\"); //TODO\r\n    }\r\n  }\r\n\r\n  private actionSwitchMode = () => {\r\n    debugger;\r\n    if (isPlayMode()) {\r\n      this.props.history.push(routes.edit);\r\n    } else if (isEditMode()) {\r\n      this.props.history.push(routes.play);\r\n    }\r\n  };\r\n\r\n  public componentDidMount() {\r\n    commands.newProject.functionsToInvoke = [this.actionNewProject];\r\n    commands.openProjectOrGame.functionsToInvoke = [this.actionOpenProjectOrGame];\r\n    commands.saveProjectOrGame.functionsToInvoke = [this.actionSaveProjectOrGame];\r\n    commands.switchMode.functionsToInvoke = [this.actionSwitchMode];\r\n  }\r\n\r\n  public render() {\r\n    return <></>;\r\n  }\r\n}\r\n\r\n/** Hooks up actions, some of which require current state or history, to commands. */\r\nexport const CommandHandler = connect(mapStateToProps, mapDispatchToProps)(withRouter(CommandHandlerC));\r\n","import { getActionGuid } from \"../redux/reduxTools\";\n\nexport const actions = {\n  setCustomizationApplied: getActionGuid(),\n  setUserConsentProvided: getActionGuid(),\n};\n\n/** Action creator to store whether the user has provided consent to using local storage. */\nexport const setUserConsentProvided = (consentProvided: boolean) => {\n  return {\n    consentProvided,\n    type: actions.setUserConsentProvided,\n  };\n};\n\n/** Action creator to store (lowercase) preferred locale id such as en-us. */\nexport const setCustomizationApplied = (isApplied: boolean) => {\n  return {\n    isApplied,\n    type: actions.setCustomizationApplied,\n  };\n};\n","import { combineReducers, Dispatch } from \"redux\";\nimport { actions, setCustomizationApplied, setUserConsentProvided } from \"./persistence.actions\";\n\n/**\n * True if the user accepts the storage policy. Until the user accepts, data that isn't essential\n * for the operation of the site and any data that might be combined together across the site and\n * its services to create personally identifying info cannot be saved or loaded.\n *\n * This defaults to true because there is nothing requiring consent yet.\n */\nconst userConsentProvided = (state = true, action: ReturnType<typeof setUserConsentProvided>) => {\n  if (action.type === actions.setUserConsentProvided) {\n    return action.consentProvided;\n  }\n\n  return state;\n};\n\n/** Sets whether the user has consented to the storage policy. */\nexport const dispatchSetUserConsentProvided = (dispatch: Dispatch) => (isConsentGiven: boolean) => {\n  dispatch(setUserConsentProvided(isConsentGiven));\n};\n\n/**\n * True if local storage customizations have been applied. An attempt to load should be made once\n * after the user has accepted the storage policy and changes to content.\n */\nconst customizationApplied = (state = false, action: ReturnType<typeof setCustomizationApplied>) => {\n  if (action.type === actions.setCustomizationApplied) {\n    return action.isApplied;\n  }\n\n  return state;\n};\n\n/** Sets the locale id in lowercase, such as en-us. */\nexport const dispatchSetCustomizationApplied = (dispatch: Dispatch) => (isCustomizationApplied: boolean) => {\n  dispatch(setCustomizationApplied(isCustomizationApplied));\n};\n\n// Combine reducers and typescript definition.\nexport interface IPersistenceState {\n  customizationApplied: boolean;\n  userConsentProvided: boolean;\n}\n\nexport const persistence = combineReducers({\n  customizationApplied,\n  userConsentProvided,\n});\n","import { getActionGuid } from \"./reduxTools\";\nimport { IRunnerLogSeparatorStyle, IRunnerStyle, IPlayerRunnerOptions, ITextStyle } from \"./typedefs\";\n\nexport const actions = {\n  setPlayerStoryInputStyles: getActionGuid(),\n  setPlayerStoryLogSeparatorStyles: getActionGuid(),\n  setPlayerStoryOptionStyles: getActionGuid(),\n  setPlayerStoryOptionHighlightStyles: getActionGuid(),\n  setPlayerStoryOutputStyles: getActionGuid(),\n  setPlayerStoryRunnerOptions: getActionGuid(),\n  setPlayerStoryRunnerStyles: getActionGuid(),\n};\n\n/**\n * Sets the player preferred styling for previous textbox input from the player. This is the final styling.\n * The order goes built-in defaults -> global story styling -> story style override -> player style override.\n */\nexport const setPlayerStoryInputStyles = (style: ITextStyle) => {\n  return {\n    type: actions.setPlayerStoryInputStyles,\n    style,\n  };\n};\n\n/*\n * Sets the player preferred styling for the log separator. This is the final styling. The order goes\n * built-in defaults -> global story styling -> player style override.\n */\nexport const setPlayerStoryLogSeparatorStyles = (style: IRunnerLogSeparatorStyle) => {\n  return {\n    type: actions.setPlayerStoryLogSeparatorStyles,\n    style,\n  };\n};\n\n/**\n * Sets the player preferred styling for hyperlinks in the story. This is the final styling. The order goes\n * built-in defaults -> global story styling -> story style override -> player style override.\n */\nexport const setPlayerStoryOptionStyles = (style: ITextStyle) => {\n  return {\n    type: actions.setPlayerStoryOptionStyles,\n    style,\n  };\n};\n\n/**\n * Sets the player preferred styling for hovered hyperlinks in the story. This is the final styling. The\n * order goes built-in defaults -> global story styling -> story style override -> player style override.\n */\nexport const setPlayerStoryOptionHighlightStyles = (style: ITextStyle) => {\n  return {\n    type: actions.setPlayerStoryOptionHighlightStyles,\n    style,\n  };\n};\n\n/**\n * Sets the player preferred styling for all text output from the story. This is the final styling. The\n * order goes built-in defaults -> global story styling -> story style override -> player style override.\n */\nexport const setPlayerStoryOutputStyles = (style: ITextStyle) => {\n  return {\n    type: actions.setPlayerStoryOutputStyles,\n    style,\n  };\n};\n\n/**\n * Sets story options such as logging behavior.\n */\nexport const setPlayerStoryRunnerOptions = (options: IPlayerRunnerOptions) => {\n  return {\n    type: actions.setPlayerStoryRunnerOptions,\n    options,\n  };\n};\n\n/**\n * Sets the player preferred styling for the runner itself. This is the final styling. The order goes\n * built-in defaults -> global story styling -> story style override -> player style override.\n */\nexport const setPlayerStoryRunnerStyles = (style: IRunnerStyle) => {\n  return {\n    type: actions.setPlayerStoryRunnerStyles,\n    style,\n  };\n};\n","import { combineReducers, Dispatch } from \"redux\";\nimport * as actions from \"./playerStorySettings.actions\";\nimport { IAction } from \"./reduxTools\";\nimport * as types from \"./typedefs\";\nimport { newStory } from \"./viewedit.actions\";\n\nconst playerStoryInputStyles = (state = {}, action: IAction) => {\n  if (action.type === actions.actions.setPlayerStoryInputStyles) {\n    return (action as ReturnType<typeof actions.setPlayerStoryInputStyles>).style;\n  }\n  if (action.type === newStory.type) {\n    return {};\n  }\n\n  return state;\n};\n\nconst playerStoryLogSeparatorStyles = (state = {}, action: IAction) => {\n  if (action.type === actions.actions.setPlayerStoryLogSeparatorStyles) {\n    return (action as ReturnType<typeof actions.setPlayerStoryLogSeparatorStyles>).style;\n  }\n  if (action.type === newStory.type) {\n    return {};\n  }\n\n  return state;\n};\n\nconst playerStoryOptionStyles = (state = {}, action: IAction) => {\n  if (action.type === actions.actions.setPlayerStoryOptionStyles) {\n    return (action as ReturnType<typeof actions.setPlayerStoryOptionStyles>).style;\n  }\n  if (action.type === newStory.type) {\n    return {};\n  }\n\n  return state;\n};\n\nconst playerStoryOptionHighlightStyles = (state = {}, action: IAction) => {\n  if (action.type === actions.actions.setPlayerStoryOptionHighlightStyles) {\n    return (action as ReturnType<typeof actions.setPlayerStoryOptionHighlightStyles>).style;\n  }\n  if (action.type === newStory.type) {\n    return {};\n  }\n\n  return state;\n};\n\nconst playerStoryOutputStyles = (state = {}, action: IAction) => {\n  if (action.type === actions.actions.setPlayerStoryOutputStyles) {\n    return (action as ReturnType<typeof actions.setPlayerStoryOutputStyles>).style;\n  }\n  if (action.type === newStory.type) {\n    return {};\n  }\n\n  return state;\n};\n\nconst playerStoryRunnerOptions = (state = {}, action: IAction) => {\n  if (action.type === actions.actions.setPlayerStoryRunnerOptions) {\n    return (action as ReturnType<typeof actions.setPlayerStoryRunnerOptions>).options;\n  }\n  if (action.type === newStory.type) {\n    return {};\n  }\n\n  return state;\n};\n\nconst playerStoryRunnerStyles = (state = { background: { type: \"plain\" } }, action: IAction) => {\n  if (action.type === actions.actions.setPlayerStoryRunnerStyles) {\n    return (action as ReturnType<typeof actions.setPlayerStoryRunnerStyles>).style;\n  }\n  if (action.type === newStory.type) {\n    return { background: { type: \"plain\" } };\n  }\n\n  return state;\n};\n\nexport const dispatchSetPlayerStoryInputStyles = (dispatch: Dispatch) => (style: types.ITextStyle) => {\n  dispatch(actions.setPlayerStoryInputStyles(style));\n};\n\nexport const dispatchSetPlayerStoryLogSeparatorStyles = (dispatch: Dispatch) => (\n  style: types.IRunnerLogSeparatorStyle\n) => {\n  dispatch(actions.setPlayerStoryLogSeparatorStyles(style));\n};\n\nexport const dispatchSetPlayerStoryOptionStyles = (dispatch: Dispatch) => (style: types.ITextStyle) => {\n  dispatch(actions.setPlayerStoryOptionStyles(style));\n};\n\nexport const dispatchSetPlayerStoryOptionHighlightStyles = (dispatch: Dispatch) => (style: types.ITextStyle) => {\n  dispatch(actions.setPlayerStoryOptionHighlightStyles(style));\n};\n\nexport const dispatchSetPlayerStoryOutputStyles = (dispatch: Dispatch) => (style: types.ITextStyle) => {\n  dispatch(actions.setPlayerStoryOutputStyles(style));\n};\n\nexport const dispatchSetPlayerStoryRunnerOptions = (dispatch: Dispatch) => (options: types.IPlayerRunnerOptions) => {\n  dispatch(actions.setPlayerStoryRunnerOptions(options));\n};\n\nexport const dispatchSetPlayerStoryRunnerStyles = (dispatch: Dispatch) => (style: types.IRunnerStyle) => {\n  dispatch(actions.setPlayerStoryRunnerStyles(style));\n};\n\n// Combine reducers and typescript definition.\nexport interface IPlayerStorySettingsState {\n  playerStoryInputStyles: types.ITextStyle;\n  playerStoryLogSeparatorStyles: types.IRunnerLogSeparatorStyle;\n  playerStoryOptionStyles: types.ITextStyle;\n  playerStoryOptionHighlightStyles: types.ITextStyle;\n  playerStoryOutputStyles: types.ITextStyle;\n  playerStoryRunnerOptions: types.IPlayerRunnerOptions;\n  playerStoryRunnerStyles: types.IRunnerStyle;\n}\n\nexport const playerStorySettings = combineReducers({\n  playerStoryInputStyles,\n  playerStoryLogSeparatorStyles,\n  playerStoryOptionStyles,\n  playerStoryOptionHighlightStyles,\n  playerStoryOutputStyles,\n  playerStoryRunnerOptions,\n  playerStoryRunnerStyles,\n});\n","import { applyMiddleware, combineReducers, createStore } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport { ISettingState, settings } from \"./common/settings/settings.reducers\";\nimport { IPersistenceState, persistence } from \"./common/storage/persistence.reducers\";\nimport { IViewEditState, viewEdit } from \"./common/redux/viewedit.reducers\";\nimport { IAuthorStorySettingsState, authorStorySettings } from \"./common/redux/authorStorySettings.reducers\";\nimport { IPlayerStorySettingsState, playerStorySettings } from \"./common/redux/playerStorySettings.reducers\";\nimport { ICurrentRunnerSettingsState, currentRunnerSettings } from \"./common/redux/currentRunnerSettings.reducers\";\n\n/** All reducers. */\nexport interface IRootState {\n  persistence: IPersistenceState;\n  settings: ISettingState;\n  viewEdit: IViewEditState;\n  authorStorySettings: IAuthorStorySettingsState;\n  currentRunnerSettings: ICurrentRunnerSettingsState;\n  playerStorySettings: IPlayerStorySettingsState;\n}\n\nconst rootReducer = combineReducers({\n  persistence,\n  settings,\n  viewEdit,\n  authorStorySettings,\n  currentRunnerSettings,\n  playerStorySettings,\n});\n\n/** Provides global access to the static Redux store. */\nexport const store = createStore(rootReducer, undefined, applyMiddleware(thunk));\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { Provider } from \"react-redux\";\nimport { initializeIcons, loadTheme } from \"office-ui-fabric-react\";\nimport { HashRouter } from \"react-router-dom\";\nimport { listenForShortcuts } from \"./common/commands/shortcutManager\";\nimport { store } from \"./store\";\nimport { Themes, themes } from \"./common/themes\";\nimport { Routing } from \"./common/routing/Routing\";\n\ninitializeIcons(); // Ensures all icons are available.\nlistenForShortcuts(); // Hooks up global key listeners.\nloadTheme(themes[Themes.DefaultLight].theme); // Applies the default light theme.\n\nReactDOM.render(\n  <Provider store={store}>\n    <HashRouter>\n      <Routing />\n    </HashRouter>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n","import { commandIds, commands, ICommand, invokeCommand } from \"./CommandHandler\";\n\n/** A sequence of consecutive keystrokes that define a shortcut. */\nexport interface IShortcut {\n  /** If defined, this represents a custom preferred shortcut defined by the user. */\n  customSequence?: IShortcutStep[];\n\n  disabled?: boolean;\n\n  /**\n   * Used only if no custom sequence is defined. This is used to clear user-defined shortcuts. An\n   * empty array signifies the shortcut was created entirely by the user.\n   */\n  originalSequence: IShortcutStep[];\n}\n\n/** A single key with optional modifier keys requirements. */\nexport interface IShortcutStep {\n  key: string;\n  usesAlt?: boolean;\n  usesCtrl?: boolean;\n  usesShift?: boolean;\n}\n\ninterface IMatchProgress {\n  shortcut: IShortcut;\n  step: number;\n}\n\n/** Returns a string representation of the provided shortcut. */\nexport const getKeyTip = (shortcut: IShortcutStep[]) => {\n  let shortcutString = \"\";\n\n  shortcut.forEach((step: IShortcutStep, index: number) => {\n    if (index !== 0) {\n      shortcutString += \", \";\n    }\n\n    if (step.usesCtrl === true) {\n      shortcutString += \"Ctrl + \";\n    }\n    if (step.usesShift === true) {\n      shortcutString += \"Shift + \";\n    }\n    if (step.usesAlt === true) {\n      shortcutString += \"Alt + \";\n    }\n\n    shortcutString += step.key.toUpperCase();\n  });\n\n  return shortcutString;\n};\n\n/** Returns a string representation of the first active shortcut for the given command. */\nexport const getFirstKeyTip = (command: ICommand) => {\n  if (command.shortcuts.length === 0) {\n    return \"\";\n  }\n\n  if (command.shortcuts[0].customSequence !== undefined) {\n    return getKeyTip(command.shortcuts[0].customSequence);\n  }\n\n  return getKeyTip(command.shortcuts[0].originalSequence);\n};\n\n/** Begins listening to key presses and invokes matching commands. */\nexport const listenForShortcuts = () => {\n  const commandKeys = Object.keys(commands) as Array<keyof typeof commands>;\n  const commandsWithMatchProgress: Partial<{ [key in commandIds]: IMatchProgress[] }> = {};\n\n  // Tracks progress towards executing a command.\n  commandKeys.forEach((key: commandIds) => {\n    commandsWithMatchProgress[key] = commands[key].shortcuts.map((shortcut: IShortcut) => ({\n      shortcut,\n      step: 0,\n    }));\n  });\n\n  window.addEventListener(\"keypress\", (ev: KeyboardEvent) => {\n    // For every shortcut on every command.\n    commandKeys.forEach((key: commandIds) => {\n      const commandProgress = commandsWithMatchProgress[key]!;\n\n      // tslint:disable:prefer-for-of Better performance with return.\n      for (let i = 0; i < commandProgress.length; i++) {\n        const progress = commandProgress[i];\n\n        if (progress.shortcut.disabled === true) {\n          continue;\n        }\n\n        // Which keyboard sequence is actually bound to the command.\n        const sequence =\n          progress.shortcut.customSequence !== undefined\n            ? progress.shortcut.customSequence\n            : progress.shortcut.originalSequence;\n\n        if (sequence.length === 0) {\n          continue;\n        }\n\n        // Resets progress towards executing a command if the pressed key is out of sequence.\n        if (\n          sequence[progress.step].key !== ev.key.toUpperCase() ||\n          Boolean(sequence[progress.step].usesAlt) !== ev.altKey ||\n          Boolean(sequence[progress.step].usesCtrl) !== ev.ctrlKey ||\n          Boolean(sequence[progress.step].usesShift) !== ev.shiftKey\n        ) {\n          progress.step = 0;\n        }\n\n        // Increments the sequence progress or executes the command and returns to avoid redundant\n        // execution.\n        else {\n          if (progress.step === sequence.length - 1) {\n            invokeCommand(key);\n            progress.step = 0;\n            return;\n          }\n\n          progress.step++;\n        }\n      }\n    });\n  });\n};\n","import { IToken } from \"./utils\";\n\n/** A bool token to store a bool literal. */\nexport class TokenBool implements IToken {\n  public strForm: string;\n  public value: boolean;\n\n  constructor(value: boolean) {\n    this.strForm = value.toString();\n    this.value = value;\n  }\n\n  /** Returns true if all properties of each token are the same. */\n  public equals(obj: TokenBool) {\n    return this.strForm === obj.strForm && this.value === obj.value;\n  }\n}\n","import { getStrings } from \"./localization/Localization\";\nimport { createTheme, ITheme } from \"office-ui-fabric-react/lib/Styling\";\n\nexport enum ThemeTypes {\n  Light,\n  Dark,\n}\n\n/** All existing themes. The theme dropdown menu populates items in the given order, so don't change it. */\nexport enum Themes {\n  DefaultLight = 0,\n  EarthAndSky = 1,\n  ContrastLight = 2,\n  DefaultDark = 3,\n  DeepSea = 4,\n  MidnightEarth = 5,\n  ContrastDark = 6,\n}\n\nexport interface ISupportedTheme {\n  localizedName: string;\n  theme: ITheme;\n  themeId: Themes;\n  themeType: ThemeTypes;\n}\n\nconst strings = getStrings();\n\n/** Colors with associated themes. Note: items here are displayed in the order given below for the themes dropdown. */\nexport const themes: { [key in Themes]: ISupportedTheme } = {\n  [Themes.ContrastDark]: {\n    localizedName: strings.ThemeContrastDark,\n    themeId: Themes.ContrastDark,\n    themeType: ThemeTypes.Dark,\n    theme: createTheme({\n      palette: {\n        themePrimary: \"#ffea00\",\n        themeLighterAlt: \"#0a0900\",\n        themeLighter: \"#292500\",\n        themeLight: \"#4d4600\",\n        themeTertiary: \"#998c00\",\n        themeSecondary: \"#e0ce00\",\n        themeDarkAlt: \"#ffec19\",\n        themeDark: \"#ffef3d\",\n        themeDarker: \"#fff370\",\n        neutralLighterAlt: \"#0b0b0b\",\n        neutralLighter: \"#151515\",\n        neutralLight: \"#252525\",\n        neutralQuaternaryAlt: \"#2f2f2f\",\n        neutralQuaternary: \"#373737\",\n        neutralTertiaryAlt: \"#595959\",\n        neutralTertiary: \"#c8c8c8\",\n        neutralSecondary: \"#d0d0d0\",\n        neutralPrimaryAlt: \"#dadada\",\n        neutralPrimary: \"#ffffff\",\n        neutralDark: \"#f4f4f4\",\n        black: \"#f8f8f8\",\n        white: \"#000000\",\n      },\n    }),\n  },\n  [Themes.ContrastLight]: {\n    localizedName: strings.ThemeContrastLight,\n    themeId: Themes.ContrastLight,\n    themeType: ThemeTypes.Light,\n    theme: createTheme({\n      palette: {\n        themePrimary: \"#000080\",\n        themeLighterAlt: \"#f0f0fa\",\n        themeLighter: \"#c5c5eb\",\n        themeLight: \"#9898d9\",\n        themeTertiary: \"#4747b3\",\n        themeSecondary: \"#11118f\",\n        themeDarkAlt: \"#000073\",\n        themeDark: \"#000061\",\n        themeDarker: \"#000047\",\n        neutralLighterAlt: \"#f8f8f8\",\n        neutralLighter: \"#f4f4f4\",\n        neutralLight: \"#eaeaea\",\n        neutralQuaternaryAlt: \"#dadada\",\n        neutralQuaternary: \"#d0d0d0\",\n        neutralTertiaryAlt: \"#c8c8c8\",\n        neutralTertiary: \"#595754\",\n        neutralSecondary: \"#373534\",\n        neutralPrimaryAlt: \"#2f2d2c\",\n        neutralPrimary: \"#000000\",\n        neutralDark: \"#151413\",\n        black: \"#0b0b0a\",\n        white: \"#ffffff\",\n      },\n    }),\n  },\n  [Themes.DeepSea]: {\n    localizedName: strings.ThemeDeepSea,\n    themeId: Themes.DeepSea,\n    themeType: ThemeTypes.Dark,\n    theme: createTheme({\n      palette: {\n        themePrimary: \"#e8a63c\",\n        themeLighterAlt: \"#090702\",\n        themeLighter: \"#251b0a\",\n        themeLight: \"#463212\",\n        themeTertiary: \"#8b6424\",\n        themeSecondary: \"#cc9235\",\n        themeDarkAlt: \"#eaaf4e\",\n        themeDark: \"#eeba68\",\n        themeDarker: \"#f2cc8e\",\n        neutralLighterAlt: \"#02132b\",\n        neutralLighter: \"#041833\",\n        neutralLight: \"#092141\",\n        neutralQuaternaryAlt: \"#0e274a\",\n        neutralQuaternary: \"#122c51\",\n        neutralTertiaryAlt: \"#27456f\",\n        neutralTertiary: \"#e8f6f6\",\n        neutralSecondary: \"#ebf8f7\",\n        neutralPrimaryAlt: \"#eff9f9\",\n        neutralPrimary: \"#dcf2f1\",\n        neutralDark: \"#f7fcfc\",\n        black: \"#fbfdfd\",\n        white: \"#000e21\",\n      },\n    }),\n  },\n  [Themes.DefaultDark]: {\n    localizedName: strings.ThemeDefaultDark,\n    themeId: Themes.DefaultDark,\n    themeType: ThemeTypes.Dark,\n    theme: createTheme({\n      palette: {\n        themePrimary: \"#00c8ff\",\n        themeLighterAlt: \"#00080a\",\n        themeLighter: \"#002029\",\n        themeLight: \"#003c4d\",\n        themeTertiary: \"#007899\",\n        themeSecondary: \"#00b0e0\",\n        themeDarkAlt: \"#19cdff\",\n        themeDark: \"#3dd5ff\",\n        themeDarker: \"#70e0ff\",\n        neutralLighterAlt: \"#323130\",\n        neutralLighter: \"#31302f\",\n        neutralLight: \"#2f2e2d\",\n        neutralQuaternaryAlt: \"#2c2b2a\",\n        neutralQuaternary: \"#2a2928\",\n        neutralTertiaryAlt: \"#282726\",\n        neutralTertiary: \"#c8c8c8\",\n        neutralSecondary: \"#d0d0d0\",\n        neutralPrimaryAlt: \"#dadada\",\n        neutralPrimary: \"#ffffff\",\n        neutralDark: \"#f4f4f4\",\n        black: \"#f8f8f8\",\n        white: \"#323130\",\n      },\n    }),\n  },\n  [Themes.DefaultLight]: {\n    localizedName: strings.ThemeDefaultLight,\n    themeId: Themes.DefaultLight,\n    themeType: ThemeTypes.Light,\n    theme: createTheme({\n      palette: {\n        themePrimary: \"#00570e\",\n        themeLighterAlt: \"#cfebd3\",\n        themeLighter: \"#a7d8af\",\n        themeLight: \"#83c68e\",\n        themeTertiary: \"#63b370\",\n        themeSecondary: \"#47a156\",\n        themeDarkAlt: \"#2f8e3f\",\n        themeDark: \"#1b7c2b\",\n        themeDarker: \"#0c691b\",\n        neutralLighterAlt: \"#f3f3f3\",\n        neutralLighter: \"#efefef\",\n        neutralLight: \"#e5e5e5\",\n        neutralQuaternaryAlt: \"#d6d6d6\",\n        neutralQuaternary: \"#cccccc\",\n        neutralTertiaryAlt: \"#c4c4c4\",\n        neutralTertiary: \"#a19f9d\",\n        neutralSecondary: \"#605e5c\",\n        neutralPrimaryAlt: \"#3b3a39\",\n        neutralPrimary: \"#323130\",\n        neutralDark: \"#201f1e\",\n        black: \"#000000\",\n        white: \"#fafafa\",\n      },\n    }),\n  },\n  [Themes.EarthAndSky]: {\n    localizedName: strings.ThemeEarthAndSky,\n    themeId: Themes.EarthAndSky,\n    themeType: ThemeTypes.Light,\n    theme: createTheme({\n      palette: {\n        themePrimary: \"#8f4700\",\n        themeLighterAlt: \"#fbf6f0\",\n        themeLighter: \"#eddac7\",\n        themeLight: \"#ddbc9b\",\n        themeTertiary: \"#bc834b\",\n        themeSecondary: \"#9c5813\",\n        themeDarkAlt: \"#814000\",\n        themeDark: \"#6d3600\",\n        themeDarker: \"#502800\",\n        neutralLighterAlt: \"#e9f6f8\",\n        neutralLighter: \"#e5f2f4\",\n        neutralLight: \"#dce8ea\",\n        neutralQuaternaryAlt: \"#cdd8da\",\n        neutralQuaternary: \"#c4cfd0\",\n        neutralTertiaryAlt: \"#bcc7c8\",\n        neutralTertiary: \"#a19f9d\",\n        neutralSecondary: \"#605e5c\",\n        neutralPrimaryAlt: \"#3b3a39\",\n        neutralPrimary: \"#323130\",\n        neutralDark: \"#201f1e\",\n        black: \"#000000\",\n        white: \"#f0fdff\",\n      },\n    }),\n  },\n  [Themes.MidnightEarth]: {\n    localizedName: strings.ThemeMidnightEarth,\n    themeId: Themes.MidnightEarth,\n    themeType: ThemeTypes.Dark,\n    theme: createTheme({\n      palette: {\n        themePrimary: \"#d1ad7d\",\n        themeLighterAlt: \"#080705\",\n        themeLighter: \"#211c14\",\n        themeLight: \"#3f3426\",\n        themeTertiary: \"#7d684b\",\n        themeSecondary: \"#b8986e\",\n        themeDarkAlt: \"#d6b489\",\n        themeDark: \"#dcbf99\",\n        themeDarker: \"#e5cfb2\",\n        neutralLighterAlt: \"#0b0b0b\",\n        neutralLighter: \"#151515\",\n        neutralLight: \"#252525\",\n        neutralQuaternaryAlt: \"#2f2f2f\",\n        neutralQuaternary: \"#373737\",\n        neutralTertiaryAlt: \"#595959\",\n        neutralTertiary: \"#e0e0e0\",\n        neutralSecondary: \"#e5e5e5\",\n        neutralPrimaryAlt: \"#eaeaea\",\n        neutralPrimary: \"#d1d1d1\",\n        neutralDark: \"#f4f4f4\",\n        black: \"#f9f9f9\",\n        white: \"#000000\",\n      },\n    }),\n  },\n};\n","/**\n * The values of entries in this file are guaranteed to remain the same so that they form a\n * reliable public API that enables browser plugins and other script modifications to work with\n * the editor & runner software. Do not change them.\n */\n\n/** Identifies the source input field for direct editing. */\nexport const idEditorInputfield = \"editor-inputfield\";\n\n/** Wraps the div that contains everything related to the editor. */\nexport const idEditorWrapper = \"editor-wrapper\";\n\n/** Wraps the content of the current page. */\nexport const idRunnerContent = \"runner-content\";\n\n/** Indentifies the textbox while playing the game, if available. */\nexport const idRunnerInputfield = \"runner-inputfield\";\n\n/** Wraps the log of all previous content (both player input and game output). */\nexport const idRunnerLog = \"runner-log\";\n\n/** Wraps the hyperlink options list. */\nexport const idRunnerOptions = \"runner-options\";\n\n/** Identifies the special restart option. */\nexport const idRunnerOptionRestart = \"runner-option-restart\";\n\n/** Wraps the div that contains everything related to the runner. */\nexport const idRunnerWrapper = \"runner-wrapper\";\n\n/** Identifies an element in the runner designated as representing player input. */\nexport const idRunnerInputElement = \"runner-input\";\n\n/** Identifies an element in the runner designated as representing an option. */\nexport const idRunnerOptionElement = \"runner-option\";\n\n/** Identifies an element in the runner designated as representing game output. */\nexport const idRunnerOutputElement = \"runner-output\";\n","import { IToken } from \"./utils\";\n\n/** A numeric token to store an identifer. */\nexport class TokenId implements IToken {\n  public strForm: string;\n  public value: number | string | boolean | null;\n\n  constructor(name: string, value: number | string | boolean | null) {\n    this.strForm = name;\n    this.value = value;\n  }\n\n  /** Returns true if all properties of each token are the same. */\n  public equals(obj: TokenId) {\n    return this.strForm === obj.strForm && this.value === obj.value;\n  }\n}\n","import { IToken, tokenEvalFunc } from \"./utils\";\n\n/** A symbolic token to store a general symbol. */\nexport class TokenFunc implements IToken {\n  public strForm: string;\n  public numArgs: number;\n  public function: tokenEvalFunc;\n\n  constructor(name: string, numberOfArgs: number, operation: tokenEvalFunc) {\n    this.strForm = name;\n    this.numArgs = numberOfArgs;\n    this.function = operation;\n  }\n\n  /** Returns true if all properties of each token are the same. */\n  public equals(obj: TokenFunc) {\n    return this.strForm === obj.strForm && this.numArgs === obj.numArgs && this.function === obj.function;\n  }\n}\n","import { localizedStrings } from \"./LocalizedStrings\";\n\n/**\n * Gets the nearest supported locale from the browser using navigator.languages or\n * navigator.language. This is accurate for Firefox and Chrome. IE and Edge return the OS language\n * instead and only return the browser language from an Accept-Languages header. This is considered\n * good enough though. Defaults to en-US if the preferred locale isn't listed.\n */\nexport const getSupportedLocale = (): keyof ILocalizedStringSets => {\n  let defaultLocale = \"en-us\";\n\n  // This is an experimental feature at time of writing, so it may be undefined.\n  if (navigator.languages !== undefined) {\n    for (const lang of navigator.languages) {\n      const langParts = lang.toLowerCase().split(\"-\");\n      const language = langParts[0];\n      const region = langParts.length > 1 ? langParts[1] : \"\";\n\n      // If a language but not the dialect for a region is available, use it instead.\n      if (`${language}-${region}` in supportedLocales) {\n        defaultLocale = `${language}-${region}`;\n        break;\n      } else if (`${language}` in supportedLocales) {\n        defaultLocale = `${language}`;\n        break;\n      }\n    }\n  } else {\n    const language = navigator.language.toLowerCase();\n\n    if (language in supportedLocales) {\n      defaultLocale = language;\n    }\n  }\n\n  return supportedLocales[defaultLocale as keyof ISupportedLocales];\n};\n\n/** Returns the strings for the given locale, or the assumed locale if not provided. */\nexport const getStrings = (locale?: keyof ISupportedLocales): ILocalizedStrings => {\n  return localizedStrings[supportedLocales[locale || getSupportedLocale()] as keyof typeof localizedStrings];\n};\n\n/** All locales to be accepted as valid. */\nexport interface ISupportedLocales {\n  \"en\": keyof ILocalizedStringSets;\n  \"en-us\": keyof ILocalizedStringSets;\n}\n\n/** A list of valid locales as keys, and the locales they default to as values. */\nexport const supportedLocales: ISupportedLocales = {\n  \"en\": \"en-us\",\n  \"en-us\": \"en-us\",\n};\n\n/** All locales with direct support. */\nexport interface ILocalizedStringSets {\n  \"en-us\": ILocalizedStrings;\n}\n\n/** All strings to be localized per locale. */\nexport interface ILocalizedStrings {\n  ApplicationName: string;\n  ApplicationNameAndVersion: (appName: string, appVersion: string) => string;\n  EditorPlay: string;\n  LanguageCodeName: string;\n  MenuFile: string;\n  MenuFileNew: string;\n  MenuFileOpen: string;\n  MenuFileSave: string;\n  MenuFileSwitch: string;\n  RunnerRestart: string;\n  ThemeContrastDark: string;\n  ThemeContrastLight: string;\n  ThemeDefaultDark: string;\n  ThemeDefaultLight: string;\n  ThemeDeepSea: string;\n  ThemeEarthAndSky: string;\n  ThemeMidnightEarth: string;\n  ThemeDropdownText: (themeName: string) => string;\n  TipLanguage: string;\n  TipNavigateCommandBar: string;\n  TipTheme: string;\n}\n","import { combineReducers, Dispatch } from \"redux\";\nimport { IAction } from \"./reduxTools\";\nimport { actions, updateStory, saveAndRunStory, rerenderStory, newStory } from \"./viewedit.actions\";\n\n/**\n * Contains the up-to-date text for the story, which is updated when loading a story, adding to\n * it with GUI controls, trying to run the story after editing the source, or blurring the textarea\n * after editing the source.\n */\nconst story = (state = \"\", action: IAction) => {\n  if (action.type === actions.updateStory) {\n    return (action as ReturnType<typeof updateStory>).story;\n  }\n  if (action.type === actions.saveAndRunStory) {\n    return (action as ReturnType<typeof saveAndRunStory>).story;\n  }\n  if (action.type === actions.newStory) {\n    return \"\";\n  }\n\n  return state;\n};\n\n/**\n * Contains the copy of the story from when it was last executed, which may be older than the\n * current story. Updating this causes the story to execute again.\n */\nconst storyToParse = (state = \"\", action: IAction) => {\n  if (action.type === actions.saveAndRunStory) {\n    return (action as ReturnType<typeof saveAndRunStory>).story;\n  }\n  if (action.type === actions.newStory) {\n    return \"\";\n  }\n\n  return state;\n};\n\n/**\n * Uses a number to indicate that the story should be parsed again. Necessary because there is no good way to pass the\n * action from the editor to runner, and restarting without the story text changing is a common operation.\n */\nconst storyReparseToken = (state = 0, action: IAction) => {\n  if (action.type === actions.saveAndRunStory) {\n    return state + 1;\n  }\n\n  return state;\n};\n\n/**\n * Uses a number to indicate that the runner should re-render. The alternative is to re-render any time output, input,\n * and logs change, which gets up to 20-30 re-renders per new page. Instead, increment this when the page is done.\n */\nconst storyRerenderToken = (state = 0, action: IAction) => {\n  if (action.type === actions.rerenderStory) {\n    return state + 1;\n  }\n\n  return state;\n};\n\n/** Clears all story-related states. */\nexport const dispatchNewStory = (dispatch: Dispatch) => {\n  dispatch(newStory);\n};\n\n/** Sets the story that the user has typed. */\nexport const dispatchSetStory = (dispatch: Dispatch) => (story: string) => {\n  dispatch(updateStory(story));\n};\n\n/** Parses the story as currently written, updating the stored story to match the provided string. */\nexport const dispatchSaveAndRunStory = (dispatch: Dispatch) => (story: string) => {\n  dispatch(saveAndRunStory(story));\n};\n\n/** Causes the story to re-render. */\nexport const dispatchRerenderStory = (dispatch: Dispatch) => () => {\n  dispatch(rerenderStory);\n};\n\n// Combine reducers and typescript definition.\nexport interface IViewEditState {\n  story: string;\n  storyReparseToken: number;\n  storyRerenderToken: number;\n  storyToParse: string;\n}\n\nexport const viewEdit = combineReducers({\n  story,\n  storyReparseToken,\n  storyRerenderToken,\n  storyToParse,\n});\n","/** Represents a single token for evaluation. */\nexport interface IToken {\n  strForm: string;\n}\n\n/**\n * When this function is used, the input numbers can be accessed as an array of objects. As many as\n * provided by the number of arguments may be used.\n */\nexport type tokenEvalFunc = (tokens: IToken[]) => IToken | null;\n\n/** Matches an integer with optional negative sign in front. */\nexport const integerRegex = /^-*\\d+$/g;\n\n/** Matches a valid decimal number. */\nexport const numberRegex = /^-?(\\d+\\.?\\d*|\\d*\\.?\\d+)$/g;\n","import { ITextStyle } from \"../redux/typedefs\";\r\nimport { ISupportedTheme, ThemeTypes } from \"../themes\";\r\nimport { fallbackFontStack } from \"./controlStyles\";\r\n\r\n/** Declaring the element type allows the interpreter to select the right fallback styles. */\r\nexport enum fallbackElementType {\r\n  input,\r\n  option,\r\n  optionHighlight,\r\n  output,\r\n}\r\n\r\n/**\r\n * The inherent styles used for different elements, if no other style is applied.\r\n * Note that the redundant casting below is necessary as of TS 4.0.3 due to type resolution problems.\r\n */\r\nconst fallbackStyles = (theme: ISupportedTheme) => {\r\n  return {\r\n    [fallbackElementType.input]: {\r\n      color: theme.theme.semanticColors.errorText,\r\n      fontFamily: fallbackFontStack,\r\n      fontSize: \"1.2 rem\",\r\n      fontStyle: \"normal\" as \"normal\",\r\n      fontWeight: \"normal\" as \"normal\",\r\n      textDecoration: \"inherit\" as \"inherit\",\r\n    },\r\n    [fallbackElementType.option]: {\r\n      color: theme.theme.palette.blue,\r\n      fontFamily: fallbackFontStack,\r\n      fontSize: \"1.2 rem\",\r\n      fontStyle: \"normal\" as \"normal\",\r\n      fontWeight: \"normal\" as \"normal\",\r\n      textDecoration: \"underline\" as \"underline\",\r\n    },\r\n    [fallbackElementType.optionHighlight]: {\r\n      color: theme.theme.palette.blueDark,\r\n      fontFamily: fallbackFontStack,\r\n      fontSize: \"1.2 rem\",\r\n      fontStyle: \"normal\" as \"normal\",\r\n      fontWeight: \"normal\" as \"normal\",\r\n      textDecoration: \"underline\" as \"underline\",\r\n    },\r\n    [fallbackElementType.output]: {\r\n      color: theme.theme.semanticColors.bodyText,\r\n      fontFamily: fallbackFontStack,\r\n      fontSize: \"1.2 rem\",\r\n      fontStyle: \"normal\" as \"normal\",\r\n      fontWeight: \"normal\" as \"normal\",\r\n      textDecoration: \"inherit\" as \"inherit\",\r\n    },\r\n  };\r\n};\r\n\r\n/**\r\n * Applies text styles to determine font family, size, bold/italic/underline, and color. Players can set their own\r\n * style overrides (playerStyle). The author can set styles within the game that deviate from the normal styling\r\n * (storyStyle), and set a global default style for the story (authorStyle). When editing a story, playerStyle should\r\n * be left empty. PlayerStyle overrides storyStyle, which overrides authorStyle. Overrides work per attribute, and\r\n * fall down to the next style if not met, or a natural default if none are met.\r\n *\r\n * Light colors are used in lightMode and dark colors in darkMode, as defined by the theming.\r\n *\r\n * @param playerStyle Styles that a player has set to override all styles in stories they read, if set.\r\n * @param storyStyle Specific one-off styling within the story.\r\n * @param authorStyle Styles that an author has set as the default text styling.\r\n */\r\nexport const getTextStyle = (\r\n  theme: ISupportedTheme,\r\n  playerStyle: ITextStyle,\r\n  storyStyle: ITextStyle,\r\n  authorStyle: ITextStyle,\r\n  fallback: fallbackElementType\r\n): React.CSSProperties => {\r\n  const fallbackStyle = fallbackStyles(theme)[fallback];\r\n\r\n  const color =\r\n    theme.themeType === ThemeTypes.Light\r\n      ? playerStyle.colorLight || storyStyle.colorLight || authorStyle.colorLight || fallbackStyle.color\r\n      : playerStyle.colorDark || storyStyle.colorDark || authorStyle.colorDark || fallbackStyle.color;\r\n\r\n  const fontFamily = playerStyle.font || storyStyle.font || authorStyle.font || fallbackStyle.fontFamily;\r\n  const fontSize = playerStyle.fontSize || storyStyle.fontSize || authorStyle.fontSize || fallbackStyle.fontSize;\r\n\r\n  let fontStyle: \"italic\" | \"normal\" = \"normal\";\r\n  let fontWeight: \"bold\" | \"normal\" = \"normal\";\r\n  let textDecoration: \"underline\" | \"inherit\" = \"inherit\";\r\n\r\n  if (playerStyle.fontStyle) {\r\n    fontStyle = playerStyle.fontStyle.includes(\"i\") ? \"italic\" : fallbackStyle.fontStyle;\r\n  } else if (storyStyle.fontStyle) {\r\n    fontStyle = storyStyle.fontStyle.includes(\"i\") ? \"italic\" : fallbackStyle.fontStyle;\r\n  } else if (authorStyle.fontStyle) {\r\n    fontStyle = authorStyle.fontStyle.includes(\"i\") ? \"italic\" : fallbackStyle.fontStyle;\r\n  }\r\n\r\n  if (playerStyle.fontStyle) {\r\n    fontWeight = playerStyle.fontStyle.includes(\"b\") ? \"bold\" : fallbackStyle.fontWeight;\r\n  } else if (storyStyle.fontStyle) {\r\n    fontWeight = storyStyle.fontStyle.includes(\"b\") ? \"bold\" : fallbackStyle.fontWeight;\r\n  } else if (authorStyle.fontStyle) {\r\n    fontWeight = authorStyle.fontStyle.includes(\"b\") ? \"bold\" : fallbackStyle.fontWeight;\r\n  }\r\n\r\n  if (playerStyle.fontStyle) {\r\n    textDecoration = playerStyle.fontStyle.includes(\"u\") ? \"underline\" : fallbackStyle.textDecoration;\r\n  } else if (storyStyle.fontStyle) {\r\n    textDecoration = storyStyle.fontStyle.includes(\"u\") ? \"underline\" : fallbackStyle.textDecoration;\r\n  } else if (authorStyle.fontStyle) {\r\n    textDecoration = authorStyle.fontStyle.includes(\"u\") ? \"underline\" : fallbackStyle.textDecoration;\r\n  }\r\n\r\n  return {\r\n    color,\r\n    fontFamily,\r\n    fontSize,\r\n    fontStyle,\r\n    fontWeight,\r\n    textDecoration,\r\n    whiteSpace: \"pre-wrap\", // respects newlines and multiple whitespace.\r\n  };\r\n};\r\n","import { IToken, numberRegex } from \"./utils\";\n\n/** A numeric token to store a numeric literal. */\nexport class TokenNum implements IToken {\n  public strForm: string;\n  public value: number;\n\n  constructor(value: string | number) {\n    if (typeof value === \"string\") {\n      this.strForm = value;\n\n      if (!numberRegex.test(value)) {\n        throw new Error(\"Parser: The expression '\" + value + \"' is not a valid number.\"); // TODO: localize.\n      }\n\n      this.value = parseFloat(value);\n    } else {\n      this.strForm = value.toString();\n      this.value = value;\n    }\n  }\n\n  /** Returns true if all properties of each token are the same. */\n  public equals(obj: TokenNum) {\n    return this.strForm === obj.strForm && this.value === obj.value;\n  }\n}\n","import { ILocalizedStringSets } from \"./Localization\";\n\n// tslint:disable:max-line-length It's actually more legible to keep strings on one line here.\n\n/** All strings localized in all locales. */\nexport const localizedStrings: ILocalizedStringSets = {\n  \"en-us\": {\n    ApplicationName: \"Joshua Tree\",\n    ApplicationNameAndVersion: (appName: string, appVersion: string) => `${appName} version ${appVersion}`,\n    EditorPlay: \"Play\",\n    LanguageCodeName: \"English (United States)\",\n    MenuFile: \"File\",\n    MenuFileNew: \"New\",\n    MenuFileOpen: \"Open\",\n    MenuFileSave: \"Save\",\n    MenuFileSwitch: \"Switch between play and edit\",\n    RunnerRestart: \"Restart\",\n    ThemeContrastDark: \"🌑 Contrast Dark\",\n    ThemeContrastLight: \"☀️ Contrast Light\",\n    ThemeDefaultDark: \"🌑 Default Dark\",\n    ThemeDefaultLight: \"☀️ Default Light\",\n    ThemeDeepSea: \"🌑 Deep Sea\",\n    ThemeEarthAndSky: \"☀️ Earth and Sky\",\n    ThemeMidnightEarth: \"🌑 Midnight Earth\",\n    ThemeDropdownText: (themeName: string) => `${themeName} theme`,\n    TipLanguage: \"Language\",\n    TipNavigateCommandBar: \"Use left and right arrow keys to navigate between commands.\",\n    TipTheme: \"Theme\",\n  },\n};\n","import { getActionGuid } from \"./reduxTools\";\nimport { IAuthorRunnerOptions } from \"./typedefs\";\n\nexport const actions = {\n  clearAllTempSettings: getActionGuid(),\n  setCurrentRunnerOptions: getActionGuid(),\n};\n\n/** Resets all temp settings to minimal defaults. */\nexport const clearAllTempSettings = {\n  type: actions.clearAllTempSettings,\n};\n\n/**\n * Sets story options such as logging behavior.\n */\nexport const setCurrentRunnerOptions = (options: IAuthorRunnerOptions) => {\n  return {\n    type: actions.setCurrentRunnerOptions,\n    options,\n  };\n};\n","import { combineReducers, Dispatch } from \"redux\";\nimport * as actions from \"./currentRunnerSettings.actions\";\nimport { IAction } from \"./reduxTools\";\nimport * as types from \"./typedefs\";\nimport { newStory } from \"./viewedit.actions\";\n\nconst currentRunnerOptions = (state = {}, action: IAction) => {\n  if (action.type === actions.actions.setCurrentRunnerOptions) {\n    return (action as ReturnType<typeof actions.setCurrentRunnerOptions>).options;\n  }\n  if (action.type === actions.actions.clearAllTempSettings) {\n    return {};\n  }\n  if (action.type === newStory.type) {\n    return {};\n  }\n\n  return state;\n};\n\nexport const dispatchClearAllTempSettings = (dispatch: Dispatch) => {\n  dispatch(actions.clearAllTempSettings);\n};\n\nexport const dispatchSetTempStoryRunnerOptions = (dispatch: Dispatch) => (options: types.IAuthorRunnerOptions) => {\n  dispatch(actions.setCurrentRunnerOptions(options));\n};\n\n// Combine reducers and typescript definition.\nexport interface ICurrentRunnerSettingsState {\n  currentRunnerSettings: types.IAuthorRunnerOptions;\n}\n\nexport const currentRunnerSettings = combineReducers({\n  currentRunnerOptions,\n});\n","import { getActionGuid } from \"./reduxTools\";\nimport {\n  IRunnerLogSeparatorStyle,\n  IRunnerStyle,\n  IAuthorRunnerOptions,\n  ITextStyle,\n  IAuthorRunnerStrings,\n} from \"./typedefs\";\n\nexport const actions = {\n  setAuthorStoryInputStyles: getActionGuid(),\n  setAuthorStoryLogSeparatorStyles: getActionGuid(),\n  setAuthorStoryOptionStyles: getActionGuid(),\n  setAuthorStoryOptionHighlightStyles: getActionGuid(),\n  setAuthorStoryOutputStyles: getActionGuid(),\n  setAuthorStoryRunnerOptions: getActionGuid(),\n  setAuthorStoryRunnerStyles: getActionGuid(),\n  setAuthorStoryStrings: getActionGuid(),\n};\n\n/**\n * Sets the global story styling for previous textbox input from the player. This isn't necessarily the final styling.\n * The order goes built-in defaults -> global story styling -> story style override -> player style override.\n */\nexport const setAuthorStoryInputStyles = (style: ITextStyle) => {\n  return {\n    type: actions.setAuthorStoryInputStyles,\n    style,\n  };\n};\n\n/*\n * Sets the global story styling for the log separator. This isn't necessarily the final styling. The order goes\n * built-in defaults -> global story styling -> player style override.\n */\nexport const setAuthorStoryLogSeparatorStyles = (style: IRunnerLogSeparatorStyle) => {\n  return {\n    type: actions.setAuthorStoryLogSeparatorStyles,\n    style,\n  };\n};\n\n/**\n * Sets the global story styling for hyperlinks in the story. This isn't necessarily the final styling. The order goes\n * built-in defaults -> global story styling -> story style override -> player style override.\n */\nexport const setAuthorStoryOptionStyles = (style: ITextStyle) => {\n  return {\n    type: actions.setAuthorStoryOptionStyles,\n    style,\n  };\n};\n\n/**\n * Sets the global story styling for hovered hyperlinks in the story. This isn't necessarily the final styling. The\n * order goes built-in defaults -> global story styling -> story style override -> player style override.\n */\nexport const setAuthorStoryOptionHighlightStyles = (style: ITextStyle) => {\n  return {\n    type: actions.setAuthorStoryOptionHighlightStyles,\n    style,\n  };\n};\n\n/**\n * Sets the global story styling for all text output from the story. This isn't necessarily the final styling. The\n * order goes built-in defaults -> global story styling -> story style override -> player style override.\n */\nexport const setAuthorStoryOutputStyles = (style: ITextStyle) => {\n  return {\n    type: actions.setAuthorStoryOutputStyles,\n    style,\n  };\n};\n\n/**\n * Sets story options such as logging behavior.\n */\nexport const setAuthorStoryRunnerOptions = (options: IAuthorRunnerOptions) => {\n  return {\n    type: actions.setAuthorStoryRunnerOptions,\n    options,\n  };\n};\n\n/**\n * Sets the global story styling for the runner itself. This isn't necessarily the final styling. The order goes\n * built-in defaults -> global story styling -> story style override -> player style override.\n */\nexport const setAuthorStoryRunnerStyles = (style: IRunnerStyle) => {\n  return {\n    type: actions.setAuthorStoryRunnerStyles,\n    style,\n  };\n};\n\n/**\n * Overrides special built-in strings relevant to the story.\n */\nexport const setAuthorStoryStrings = (strings: IAuthorRunnerStrings) => {\n  return {\n    type: actions.setAuthorStoryStrings,\n    strings,\n  };\n};\n","import { combineReducers, Dispatch } from \"redux\";\nimport * as actions from \"./authorStorySettings.actions\";\nimport { IAction } from \"./reduxTools\";\nimport * as types from \"./typedefs\";\nimport { newStory } from \"./viewedit.actions\";\n\nconst authorStoryInputStyles = (state = {}, action: IAction) => {\n  if (action.type === actions.actions.setAuthorStoryInputStyles) {\n    return (action as ReturnType<typeof actions.setAuthorStoryInputStyles>).style;\n  }\n  if (action.type === newStory.type) {\n    return {};\n  }\n\n  return state;\n};\n\nconst authorStoryLogSeparatorStyles = (state = {}, action: IAction) => {\n  if (action.type === actions.actions.setAuthorStoryLogSeparatorStyles) {\n    return (action as ReturnType<typeof actions.setAuthorStoryLogSeparatorStyles>).style;\n  }\n  if (action.type === newStory.type) {\n    return {};\n  }\n\n  return state;\n};\n\nconst authorStoryOptionStyles = (state = {}, action: IAction) => {\n  if (action.type === actions.actions.setAuthorStoryOptionStyles) {\n    return (action as ReturnType<typeof actions.setAuthorStoryOptionStyles>).style;\n  }\n  if (action.type === newStory.type) {\n    return {};\n  }\n\n  return state;\n};\n\nconst authorStoryOptionHighlightStyles = (state = {}, action: IAction) => {\n  if (action.type === actions.actions.setAuthorStoryOptionHighlightStyles) {\n    return (action as ReturnType<typeof actions.setAuthorStoryOptionHighlightStyles>).style;\n  }\n  if (action.type === newStory.type) {\n    return {};\n  }\n\n  return state;\n};\n\nconst authorStoryOutputStyles = (state = {}, action: IAction) => {\n  if (action.type === actions.actions.setAuthorStoryOutputStyles) {\n    return (action as ReturnType<typeof actions.setAuthorStoryOutputStyles>).style;\n  }\n  if (action.type === newStory.type) {\n    return {};\n  }\n\n  return state;\n};\n\nconst authorStoryRunnerOptions = (state = {}, action: IAction) => {\n  if (action.type === actions.actions.setAuthorStoryRunnerOptions) {\n    return (action as ReturnType<typeof actions.setAuthorStoryRunnerOptions>).options;\n  }\n  if (action.type === newStory.type) {\n    return {};\n  }\n\n  return state;\n};\n\nconst authorStoryRunnerStyles = (state = { background: { type: \"plain\" } }, action: IAction) => {\n  if (action.type === actions.actions.setAuthorStoryRunnerStyles) {\n    return (action as ReturnType<typeof actions.setAuthorStoryRunnerStyles>).style;\n  }\n  if (action.type === newStory.type) {\n    return { background: { type: \"plain\" } };\n  }\n\n  return state;\n};\n\nconst authorStoryStrings = (state = {}, action: IAction) => {\n  if (action.type === actions.actions.setAuthorStoryStrings) {\n    return (action as ReturnType<typeof actions.setAuthorStoryStrings>).strings;\n  }\n  if (action.type === newStory.type) {\n    return {};\n  }\n\n  return state;\n};\n\nexport const dispatchSetAuthorStoryInputStyles = (dispatch: Dispatch) => (style: types.ITextStyle) => {\n  dispatch(actions.setAuthorStoryInputStyles(style));\n};\n\nexport const dispatchSetAuthorStoryLogSeparatorStyles = (dispatch: Dispatch) => (\n  style: types.IRunnerLogSeparatorStyle\n) => {\n  dispatch(actions.setAuthorStoryLogSeparatorStyles(style));\n};\n\nexport const dispatchSetAuthorStoryOptionStyles = (dispatch: Dispatch) => (style: types.ITextStyle) => {\n  dispatch(actions.setAuthorStoryOptionStyles(style));\n};\n\nexport const dispatchSetAuthorStoryOptionHighlightStyles = (dispatch: Dispatch) => (style: types.ITextStyle) => {\n  dispatch(actions.setAuthorStoryOptionHighlightStyles(style));\n};\n\nexport const dispatchSetAuthorStoryOutputStyles = (dispatch: Dispatch) => (style: types.ITextStyle) => {\n  dispatch(actions.setAuthorStoryOutputStyles(style));\n};\n\nexport const dispatchSetAuthorStoryRunnerOptions = (dispatch: Dispatch) => (options: types.IAuthorRunnerOptions) => {\n  dispatch(actions.setAuthorStoryRunnerOptions(options));\n};\n\nexport const dispatchSetAuthorStoryRunnerStyles = (dispatch: Dispatch) => (style: types.IRunnerStyle) => {\n  dispatch(actions.setAuthorStoryRunnerStyles(style));\n};\n\nexport const dispatchSetAuthorStoryStrings = (dispatch: Dispatch) => (strings: types.IAuthorRunnerStrings) => {\n  dispatch(actions.setAuthorStoryStrings(strings));\n};\n\n// Combine reducers and typescript definition.\nexport interface IAuthorStorySettingsState {\n  authorStoryInputStyles: types.ITextStyle;\n  authorStoryLogSeparatorStyles: types.IRunnerLogSeparatorStyle;\n  authorStoryOptionStyles: types.ITextStyle;\n  authorStoryOptionHighlightStyles: types.ITextStyle;\n  authorStoryOutputStyles: types.ITextStyle;\n  authorStoryRunnerOptions: types.IAuthorRunnerOptions;\n  authorStoryRunnerStyles: types.IRunnerStyle;\n  authorStoryStrings: types.IAuthorRunnerStrings;\n}\n\nexport const authorStorySettings = combineReducers({\n  authorStoryInputStyles,\n  authorStoryLogSeparatorStyles,\n  authorStoryOptionStyles,\n  authorStoryOptionHighlightStyles,\n  authorStoryOutputStyles,\n  authorStoryRunnerOptions,\n  authorStoryRunnerStyles,\n  authorStoryStrings,\n});\n"],"sourceRoot":""}